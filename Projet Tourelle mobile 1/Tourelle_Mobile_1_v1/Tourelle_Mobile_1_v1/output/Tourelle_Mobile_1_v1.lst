FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 07 C9 LJMP  _PWM16_ISR         (0153)     ljmp	_PWM16_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 07 93 LJMP  _SPIM_CamGauche_ISR(0157)     ljmp	_SPIM_CamGauche_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 05 95 LJMP  _UART_TX_ISR       (0161)     ljmp	_UART_TX_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 06 E7 LJMP  _TimerCamera_ISR   (0173)     ljmp	_TimerCamera_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 07 AE LJMP  _SPIM_CamDroite_ISR(0177)     ljmp	_SPIM_CamDroite_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0044: 7D 07 CA LJMP  _PWM16_2_ISR       (0185)     ljmp	_PWM16_2_ISR
0047: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
0048: 7D 05 96 LJMP  _UART_RX_ISR       (0189)     ljmp	_UART_RX_ISR
004B: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [Flag_ISR_Timer+206],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [Flag_ISR_Timer+207],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 27 LCALL 0x0527             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 1E    MOV   X,0x1E             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 25    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 25    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 25    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 24    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 25    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 25 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 24    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 24    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 25    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 25 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 24    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 11 C3 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0422: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_spim_cam_Bank1
                                        (0019) export LoadConfigTBL_spim_cam_Bank0
                                        (0020) export LoadConfigTBL_spim_cam_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_spim_cam_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name LED, User Module LED
                                        (0025) ;  Instance name PWM16, User Module PWM16
                                        (0026) ;       Instance name PWM16, Block Name PWM16_LSB(DBB00)
                                        (0027) 	db		23h, 00h		;PWM16_CONTROL_LSB_REG(DBB00CR0)
                                        (0028) 	db		21h, 42h		;PWM16_PERIOD_LSB_REG(DBB00DR1)
                                        (0029) 	db		22h, 1ch		;PWM16_COMPARE_LSB_REG(DBB00DR2)
                                        (0030) ;       Instance name PWM16, Block Name PWM16_MSB(DBB01)
                                        (0031) 	db		27h, 00h		;PWM16_CONTROL_MSB_REG(DBB01CR0)
                                        (0032) 	db		25h, 4fh		;PWM16_PERIOD_MSB_REG(DBB01DR1)
                                        (0033) 	db		26h, 25h		;PWM16_COMPARE_MSB_REG(DBB01DR2)
                                        (0034) ;  Instance name PWM16_2, User Module PWM16
                                        (0035) ;       Instance name PWM16_2, Block Name PWM16_LSB(DBB20)
                                        (0036) 	db		43h, 00h		;PWM16_2_CONTROL_LSB_REG(DBB20CR0)
                                        (0037) 	db		41h, 42h		;PWM16_2_PERIOD_LSB_REG(DBB20DR1)
                                        (0038) 	db		42h, 1ch		;PWM16_2_COMPARE_LSB_REG(DBB20DR2)
                                        (0039) ;       Instance name PWM16_2, Block Name PWM16_MSB(DBB21)
                                        (0040) 	db		47h, 00h		;PWM16_2_CONTROL_MSB_REG(DBB21CR0)
                                        (0041) 	db		45h, 4fh		;PWM16_2_PERIOD_MSB_REG(DBB21DR1)
                                        (0042) 	db		46h, 25h		;PWM16_2_COMPARE_MSB_REG(DBB21DR2)
                                        (0043) ;  Instance name SPIM_CamDroite, User Module SPIM
                                        (0044) ;       Instance name SPIM_CamDroite, Block Name SPIM(DCB13)
                                        (0045) 	db		3fh, 00h		;SPIM_CamDroite_CONTROL_REG  (DCB13CR0)
                                        (0046) 	db		3dh, 00h		;SPIM_CamDroite_TX_BUFFER_REG(DCB13DR1)
                                        (0047) 	db		3eh, 00h		;SPIM_CamDroite_RX_BUFFER_REG(DCB13DR2)
                                        (0048) ;  Instance name SPIM_CamGauche, User Module SPIM
                                        (0049) ;       Instance name SPIM_CamGauche, Block Name SPIM(DCB02)
                                        (0050) 	db		2bh, 00h		;SPIM_CamGauche_CONTROL_REG  (DCB02CR0)
                                        (0051) 	db		29h, 00h		;SPIM_CamGauche_TX_BUFFER_REG(DCB02DR1)
                                        (0052) 	db		2ah, 00h		;SPIM_CamGauche_RX_BUFFER_REG(DCB02DR2)
                                        (0053) ;  Instance name TimerCamera, User Module Timer24
                                        (0054) ;       Instance name TimerCamera, Block Name TIMER24_ISB(DBB11)
                                        (0055) 	db		37h, 00h		;TimerCamera_CONTROL_ISB_REG(DBB11CR0)
                                        (0056) 	db		35h, c3h		;TimerCamera_PERIOD_ISB_REG(DBB11DR1)
                                        (0057) 	db		36h, 00h		;TimerCamera_COMPARE_ISB_REG(DBB11DR2)
                                        (0058) ;       Instance name TimerCamera, Block Name TIMER24_LSB(DBB10)
                                        (0059) 	db		33h, 00h		;TimerCamera_CONTROL_LSB_REG(DBB10CR0)
                                        (0060) 	db		31h, 50h		;TimerCamera_PERIOD_LSB_REG(DBB10DR1)
                                        (0061) 	db		32h, 00h		;TimerCamera_COMPARE_LSB_REG(DBB10DR2)
                                        (0062) ;       Instance name TimerCamera, Block Name TIMER24_MSB(DCB12)
                                        (0063) 	db		3bh, 04h		;TimerCamera_CONTROL_MSB_REG(DCB12CR0)
                                        (0064) 	db		39h, 00h		;TimerCamera_PERIOD_MSB_REG(DCB12DR1)
                                        (0065) 	db		3ah, 00h		;TimerCamera_COMPARE_MSB_REG(DCB12DR2)
                                        (0066) ;  Instance name UART, User Module UART
                                        (0067) ;       Instance name UART, Block Name RX(DCB22)
                                        (0068) 	db		4bh, 00h		;UART_RX_CONTROL_REG(DCB22CR0)
                                        (0069) 	db		49h, 00h		;UART_(DCB22DR1)
                                        (0070) 	db		4ah, 00h		;UART_RX_BUFFER_REG (DCB22DR2)
                                        (0071) ;       Instance name UART, Block Name TX(DCB03)
                                        (0072) 	db		2fh, 00h		;UART_TX_CONTROL_REG(DCB03CR0)
                                        (0073) 	db		2dh, 00h		;UART_TX_BUFFER_REG (DCB03DR1)
                                        (0074) 	db		2eh, 00h		;UART_(DCB03DR2)
                                        (0075) ;  Global Register values Bank 0
                                        (0076) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0077) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0078) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0079) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0080) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0081) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0082) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0083) 	db		b0h, 04h		; Row_0_InputMux register (RDI0RI)
                                        (0084) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0085) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0086) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0087) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0088) 	db		b5h, 41h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0089) 	db		b6h, 22h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0090) 	db		b8h, 5dh		; Row_1_InputMux register (RDI1RI)
                                        (0091) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0092) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0093) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0094) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0095) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0096) 	db		beh, 88h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0097) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0098) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0099) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0100) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0101) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0102) 	db		c5h, 04h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0103) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0104) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0105) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0106) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0107) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0108) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0109) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0110) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0111) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0112) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0113) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0114) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0115) 	db		ffh
                                        (0116) LoadConfigTBL_spim_cam_Bank1:
                                        (0117) ;  Instance name LCD, User Module LCD
                                        (0118) ;  Instance name LED, User Module LED
                                        (0119) ;  Instance name PWM16, User Module PWM16
                                        (0120) ;       Instance name PWM16, Block Name PWM16_LSB(DBB00)
                                        (0121) 	db		20h, 01h		;PWM16_FUNC_LSB_REG(DBB00FN)
                                        (0122) 	db		21h, 16h		;PWM16_INPUT_LSB_REG(DBB00IN)
                                        (0123) 	db		22h, 40h		;PWM16_OUTPUT_LSB_REG(DBB00OU)
                                        (0124) ;       Instance name PWM16, Block Name PWM16_MSB(DBB01)
                                        (0125) 	db		24h, 21h		;PWM16_FUNC_MSB_REG(DBB01FN)
                                        (0126) 	db		25h, 36h		;PWM16_INPUT_MSB_REG(DBB01IN)
                                        (0127) 	db		26h, 44h		;PWM16_OUTPUT_MSB_REG(DBB01OU)
                                        (0128) ;  Instance name PWM16_2, User Module PWM16
                                        (0129) ;       Instance name PWM16_2, Block Name PWM16_LSB(DBB20)
                                        (0130) 	db		40h, 01h		;PWM16_2_FUNC_LSB_REG(DBB20FN)
                                        (0131) 	db		41h, 16h		;PWM16_2_INPUT_LSB_REG(DBA20IN)
                                        (0132) 	db		42h, 40h		;PWM16_2_OUTPUT_LSB_REG(DBA20OU)
                                        (0133) ;       Instance name PWM16_2, Block Name PWM16_MSB(DBB21)
                                        (0134) 	db		44h, 21h		;PWM16_2_FUNC_MSB_REG(DBB21FN)
                                        (0135) 	db		45h, 36h		;PWM16_2_INPUT_MSB_REG(DBB21IN)
                                        (0136) 	db		46h, 44h		;PWM16_2_OUTPUT_MSB_REG(DBB21OU)
                                        (0137) ;  Instance name SPIM_CamDroite, User Module SPIM
                                        (0138) ;       Instance name SPIM_CamDroite, Block Name SPIM(DCB13)
                                        (0139) 	db		3ch, 06h		;SPIM_CamDroite_FUNCTION_REG (DCB13FN)
                                        (0140) 	db		3dh, d6h		;SPIM_CamDroite_INPUT_REG    (DCB13IN)
                                        (0141) 	db		3eh, 37h		;SPIM_CamDroite_OUTPUT_REG   (DCB13OU)
                                        (0142) ;  Instance name SPIM_CamGauche, User Module SPIM
                                        (0143) ;       Instance name SPIM_CamGauche, Block Name SPIM(DCB02)
                                        (0144) 	db		28h, 06h		;SPIM_CamGauche_FUNCTION_REG (DCB02FN)
                                        (0145) 	db		29h, d6h		;SPIM_CamGauche_INPUT_REG    (DCB02IN)
                                        (0146) 	db		2ah, 77h		;SPIM_CamGauche_OUTPUT_REG   (DCB02OU)
                                        (0147) ;  Instance name TimerCamera, User Module Timer24
                                        (0148) ;       Instance name TimerCamera, Block Name TIMER24_ISB(DBB11)
                                        (0149) 	db		34h, 10h		;TimerCamera_FUNC_ISB_REG(DBB11FN)
                                        (0150) 	db		35h, 36h		;TimerCamera_INPUT_ISB_REG(DBB11IN)
                                        (0151) 	db		36h, 40h		;TimerCamera_OUTPUT_ISB_REG(DBB11OU)
                                        (0152) ;       Instance name TimerCamera, Block Name TIMER24_LSB(DBB10)
                                        (0153) 	db		30h, 10h		;TimerCamera_FUNC_LSB_REG(DBB10FN)
                                        (0154) 	db		31h, 06h		;TimerCamera_INPUT_LSB_REG(DBB10IN)
                                        (0155) 	db		32h, 40h		;TimerCamera_OUTPUT_LSB_REG(DBB10OU)
                                        (0156) ;       Instance name TimerCamera, Block Name TIMER24_MSB(DCB12)
                                        (0157) 	db		38h, 30h		;TimerCamera_FUNC_MSB_REG(DCB12FN)
                                        (0158) 	db		39h, 36h		;TimerCamera_INPUT_MSB_REG(DCB12IN)
                                        (0159) 	db		3ah, 40h		;TimerCamera_OUTPUT_MSB_REG(DCB12OU)
                                        (0160) ;  Instance name UART, User Module UART
                                        (0161) ;       Instance name UART, Block Name RX(DCB22)
                                        (0162) 	db		48h, 05h		;UART_RX_FUNC_REG   (DCB22FN)
                                        (0163) 	db		49h, 01h		;UART_RX_INPUT_REG  (DCB22IN)
                                        (0164) 	db		4ah, 40h		;UART_RX_OUTPUT_REG (DCB22OU)
                                        (0165) ;       Instance name UART, Block Name TX(DCB03)
                                        (0166) 	db		2ch, 0dh		;UART_TX_FUNC_REG   (DCB03FN)
                                        (0167) 	db		2dh, 01h		;UART_TX_INPUT_REG  (DCB03IN)
                                        (0168) 	db		2eh, 45h		;UART_TX_OUTPUT_REG (DCB03OU)
                                        (0169) ;  Global Register values Bank 1
                                        (0170) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0171) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0172) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0173) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0174) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0175) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0176) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0177) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0178) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0179) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0180) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0181) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0182) 	db		e1h, 72h		; OscillatorControl_1 register (OSC_CR1)
                                        (0183) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0184) 	db		dfh, 19h		; OscillatorControl_3 register (OSC_CR3)
                                        (0185) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0186) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0187) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0188) 	db		ffh
                                        (0189) AREA psoc_config(rom, rel)
                                        (0190) LoadConfigTBL_spim_cam_Ordered:
                                        (0191) ;  Ordered Global Register values
                                        (0192) 	M8C_SetBank0
0424: 62 00 00 MOV   REG[0x0],0x0       (0193) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0427: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0429: 62 00 C1 MOV   REG[0x0],0xC1      (0195) 	mov	reg[00h], c1h		; Port_0_DriveMode_0 register (PRT0DM0)
042C: 62 01 3E MOV   REG[0x1],0x3E      (0196) 	mov	reg[01h], 3eh		; Port_0_DriveMode_1 register (PRT0DM1)
042F: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
0431: 62 03 1E MOV   REG[0x3],0x1E      (0198) 	mov	reg[03h], 1eh		; Port_0_DriveMode_2 register (PRT0DM2)
0434: 62 02 E1 MOV   REG[0x2],0xE1      (0199) 	mov	reg[02h], e1h		; Port_0_GlobalSelect register (PRT0GS)
0437: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
0439: 62 02 00 MOV   REG[0x2],0x0       (0201) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
043C: 62 03 00 MOV   REG[0x3],0x0       (0202) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
043F: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
0441: 62 01 00 MOV   REG[0x1],0x0       (0204) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0444: 62 04 00 MOV   REG[0x4],0x0       (0205) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0447: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
0449: 62 04 C7 MOV   REG[0x4],0xC7      (0207) 	mov	reg[04h], c7h		; Port_1_DriveMode_0 register (PRT1DM0)
044C: 62 05 38 MOV   REG[0x5],0x38      (0208) 	mov	reg[05h], 38h		; Port_1_DriveMode_1 register (PRT1DM1)
044F: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
0451: 62 07 18 MOV   REG[0x7],0x18      (0210) 	mov	reg[07h], 18h		; Port_1_DriveMode_2 register (PRT1DM2)
0454: 62 06 E3 MOV   REG[0x6],0xE3      (0211) 	mov	reg[06h], e3h		; Port_1_GlobalSelect register (PRT1GS)
0457: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
0459: 62 06 00 MOV   REG[0x6],0x0       (0213) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
045C: 62 07 00 MOV   REG[0x7],0x0       (0214) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
045F: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
0461: 62 05 00 MOV   REG[0x5],0x0       (0216) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0464: 62 08 00 MOV   REG[0x8],0x0       (0217) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0467: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
0469: 62 08 7F MOV   REG[0x8],0x7F      (0219) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
046C: 62 09 80 MOV   REG[0x9],0x80      (0220) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
046F: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
0471: 62 0B 80 MOV   REG[0xB],0x80      (0222) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0474: 62 0A 00 MOV   REG[0xA],0x0       (0223) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0477: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
0479: 62 0A 00 MOV   REG[0xA],0x0       (0225) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
047C: 62 0B 00 MOV   REG[0xB],0x0       (0226) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
047F: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
0481: 62 09 00 MOV   REG[0x9],0x0       (0228) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0484: 62 0C 00 MOV   REG[0xC],0x0       (0229) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0487: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
0489: 62 0C 00 MOV   REG[0xC],0x0       (0231) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
048C: 62 0D 00 MOV   REG[0xD],0x0       (0232) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
048F: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
0491: 62 0F 00 MOV   REG[0xF],0x0       (0234) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0494: 62 0E 00 MOV   REG[0xE],0x0       (0235) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0497: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
0499: 62 0E 00 MOV   REG[0xE],0x0       (0237) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
049C: 62 0F 00 MOV   REG[0xF],0x0       (0238) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
049F: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
04A1: 62 0D 00 MOV   REG[0xD],0x0       (0240) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
04A4: 62 10 00 MOV   REG[0x10],0x0      (0241) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
04A7: 71 10    OR    F,0x10             
                                        (0242) 	M8C_SetBank1
04A9: 62 10 00 MOV   REG[0x10],0x0      (0243) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
04AC: 62 11 00 MOV   REG[0x11],0x0      (0244) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
04AF: 70 EF    AND   F,0xEF             
                                        (0245) 	M8C_SetBank0
04B1: 62 13 00 MOV   REG[0x13],0x0      (0246) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
04B4: 62 12 00 MOV   REG[0x12],0x0      (0247) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
04B7: 71 10    OR    F,0x10             
                                        (0248) 	M8C_SetBank1
04B9: 62 12 00 MOV   REG[0x12],0x0      (0249) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04BC: 62 13 00 MOV   REG[0x13],0x0      (0250) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04BF: 70 EF    AND   F,0xEF             
                                        (0251) 	M8C_SetBank0
04C1: 62 11 00 MOV   REG[0x11],0x0      (0252) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04C4: 62 14 00 MOV   REG[0x14],0x0      (0253) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04C7: 71 10    OR    F,0x10             
                                        (0254) 	M8C_SetBank1
04C9: 62 14 00 MOV   REG[0x14],0x0      (0255) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04CC: 62 15 00 MOV   REG[0x15],0x0      (0256) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04CF: 70 EF    AND   F,0xEF             
                                        (0257) 	M8C_SetBank0
04D1: 62 17 00 MOV   REG[0x17],0x0      (0258) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04D4: 62 16 00 MOV   REG[0x16],0x0      (0259) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04D7: 71 10    OR    F,0x10             
                                        (0260) 	M8C_SetBank1
04D9: 62 16 00 MOV   REG[0x16],0x0      (0261) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04DC: 62 17 00 MOV   REG[0x17],0x0      (0262) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04DF: 70 EF    AND   F,0xEF             
                                        (0263) 	M8C_SetBank0
04E1: 62 15 00 MOV   REG[0x15],0x0      (0264) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04E4: 62 18 00 MOV   REG[0x18],0x0      (0265) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
04E7: 71 10    OR    F,0x10             
                                        (0266) 	M8C_SetBank1
04E9: 62 18 00 MOV   REG[0x18],0x0      (0267) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
04EC: 62 19 00 MOV   REG[0x19],0x0      (0268) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
04EF: 70 EF    AND   F,0xEF             
                                        (0269) 	M8C_SetBank0
04F1: 62 1B 00 MOV   REG[0x1B],0x0      (0270) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
04F4: 62 1A 00 MOV   REG[0x1A],0x0      (0271) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
04F7: 71 10    OR    F,0x10             
                                        (0272) 	M8C_SetBank1
04F9: 62 1A 00 MOV   REG[0x1A],0x0      (0273) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
04FC: 62 1B 00 MOV   REG[0x1B],0x0      (0274) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
04FF: 70 EF    AND   F,0xEF             
                                        (0275) 	M8C_SetBank0
0501: 62 19 00 MOV   REG[0x19],0x0      (0276) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0504: 62 1C 00 MOV   REG[0x1C],0x0      (0277) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
0507: 71 10    OR    F,0x10             
                                        (0278) 	M8C_SetBank1
0509: 62 1C 00 MOV   REG[0x1C],0x0      (0279) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
050C: 62 1D 00 MOV   REG[0x1D],0x0      (0280) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
050F: 70 EF    AND   F,0xEF             
                                        (0281) 	M8C_SetBank0
0511: 62 1F 00 MOV   REG[0x1F],0x0      (0282) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0514: 62 1E 00 MOV   REG[0x1E],0x0      (0283) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
0517: 71 10    OR    F,0x10             
                                        (0284) 	M8C_SetBank1
0519: 62 1E 00 MOV   REG[0x1E],0x0      (0285) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
051C: 62 1F 00 MOV   REG[0x1F],0x0      (0286) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
051F: 70 EF    AND   F,0xEF             
                                        (0287) 	M8C_SetBank0
0521: 62 1D 00 MOV   REG[0x1D],0x0      (0288) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0524: 70 EF    AND   F,0xEF             
                                        (0289) 	M8C_SetBank0
0526: 7F       RET                      (0290) 	ret
                                        (0291) 
                                        (0292) 
                                        (0293) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_spim_cam
                                        (0026) export _LoadConfig_spim_cam
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) export Port_2_Data_SHADE
                                        (0030) export _Port_2_Data_SHADE
                                        (0031) export Port_2_DriveMode_0_SHADE
                                        (0032) export _Port_2_DriveMode_0_SHADE
                                        (0033) export Port_2_DriveMode_1_SHADE
                                        (0034) export _Port_2_DriveMode_1_SHADE
                                        (0035) 
                                        (0036) 
                                        (0037) export NO_SHADOW
                                        (0038) export _NO_SHADOW
                                        (0039) 
                                        (0040) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0041) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0042) 
                                        (0043) AREA psoc_config(rom, rel)
                                        (0044) 
                                        (0045) ;---------------------------------------------------------------------------
                                        (0046) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0047) ;                  parameters handled by boot code, like CPU speed). This
                                        (0048) ;                  function can be called from user code, but typically it
                                        (0049) ;                  is only called from boot.
                                        (0050) ;
                                        (0051) ;       INPUTS: None.
                                        (0052) ;      RETURNS: Nothing.
                                        (0053) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0054) ;               In the large memory model currently only the page
                                        (0055) ;               pointer registers listed below are modified.  This does
                                        (0056) ;               not guarantee that in future implementations of this
                                        (0057) ;               function other page pointer registers will not be
                                        (0058) ;               modified.
                                        (0059) ;          
                                        (0060) ;               Page Pointer Registers Modified: 
                                        (0061) ;               CUR_PP
                                        (0062) ;
                                        (0063) _LoadConfigInit:
                                        (0064)  LoadConfigInit:
                                        (0065)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0066)     
0527: 55 00 00 MOV   [0x0],0x0          (0067) 	mov		[Port_1_Data_SHADE], 0h
052A: 55 01 00 MOV   [0x1],0x0          (0068) 	mov		[Port_2_Data_SHADE], 0h
052D: 55 02 7F MOV   [0x2],0x7F         (0069) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0530: 55 03 80 MOV   [0x3],0x80         (0070) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0071) 
0533: 7C 05 3A LCALL 0x053A             (0072) 	lcall	LoadConfig_spim_cam
0536: 7C 04 22 LCALL 0x0422             (0073) 	lcall	LoadConfigTBL_spim_cam_Ordered
                                        (0074) 
                                        (0075) 
                                        (0076)     RAM_EPILOGUE RAM_USE_CLASS_4
0539: 7F       RET                      (0077)     ret
                                        (0078) 
                                        (0079) ;---------------------------------------------------------------------------
                                        (0080) ; Load Configuration spim_cam
                                        (0081) ;
                                        (0082) ;    Load configuration registers for spim_cam.
                                        (0083) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0084) ;
                                        (0085) ;       INPUTS: None.
                                        (0086) ;      RETURNS: Nothing.
                                        (0087) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0088) ;               modified as may the Page Pointer registers!
                                        (0089) ;               In the large memory model currently only the page
                                        (0090) ;               pointer registers listed below are modified.  This does
                                        (0091) ;               not guarantee that in future implementations of this
                                        (0092) ;               function other page pointer registers will not be
                                        (0093) ;               modified.
                                        (0094) ;          
                                        (0095) ;               Page Pointer Registers Modified: 
                                        (0096) ;               CUR_PP
                                        (0097) ;
                                        (0098) _LoadConfig_spim_cam:
                                        (0099)  LoadConfig_spim_cam:
                                        (0100)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0101) 
053A: 10       PUSH  X                  (0102) 	push	x
053B: 70 EF    AND   F,0xEF             
                                        (0103)     M8C_SetBank0                    ; Force bank 0
053D: 50 00    MOV   A,0x0              (0104)     mov     a, 0                    ; Specify bank 0
053F: 67       ASR   A                  (0105)     asr     a                       ; Store in carry flag
                                        (0106)                                     ; Load bank 0 table:
0540: 50 01    MOV   A,0x1              (0107)     mov     A, >LoadConfigTBL_spim_cam_Bank0
0542: 57 B1    MOV   X,0xB1             (0108)     mov     X, <LoadConfigTBL_spim_cam_Bank0
0544: 7C 05 55 LCALL 0x0555             (0109)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0110) 
0547: 50 01    MOV   A,0x1              (0111)     mov     a, 1                    ; Specify bank 1
0549: 67       ASR   A                  (0112)     asr     a                       ; Store in carry flag
                                        (0113)                                     ; Load bank 1 table:
054A: 50 02    MOV   A,0x2              (0114)     mov     A, >LoadConfigTBL_spim_cam_Bank1
054C: 57 42    MOV   X,0x42             (0115)     mov     X, <LoadConfigTBL_spim_cam_Bank1
054E: 7C 05 55 LCALL 0x0555             (0116)     lcall   LoadConfig              ; Load the bank 1 values
0551: 70 EF    AND   F,0xEF             
                                        (0117) 
                                        (0118)     M8C_SetBank0                    ; Force return to bank 0
0553: 20       POP   X                  (0119) 	pop		x
                                        (0120) 
                                        (0121)     RAM_EPILOGUE RAM_USE_CLASS_4
0554: 7F       RET                      (0122)     ret
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) 
                                        (0127) ;---------------------------------------------------------------------------
                                        (0128) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0129) ;              pairs. Terminate on address=0xFF.
                                        (0130) ;
                                        (0131) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0132) ;           Flag Register Carry bit encodes the Register Bank
                                        (0133) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0134) ;
                                        (0135) ;  RETURNS: nothing.
                                        (0136) ;
                                        (0137) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0138) ;                X-3 Temporary store for register address
                                        (0139) ;                X-2 LSB of config table address
                                        (0140) ;                X-1 MSB of config table address
                                        (0141) ;
                                        (0142) LoadConfig:
                                        (0143)     RAM_PROLOGUE RAM_USE_CLASS_2
0555: 38 02    ADD   SP,0x2             (0144)     add     SP, 2                   ; Set up local vars
0557: 10       PUSH  X                  (0145)     push    X                       ; Save config table address on stack
0558: 08       PUSH  A                  (0146)     push    A
0559: 4F       MOV   X,SP               (0147)     mov     X, SP
055A: 56 FC 00 MOV   [X-4],0x0          (0148)     mov     [X-4], 0                ; Set default Destination to Bank 0
055D: D0 04    JNC   0x0562             (0149)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
055F: 56 FC 01 MOV   [X-4],0x1          (0150)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0151) .BankSelectSaved:
0562: 18       POP   A                  (0152)     pop     A
0563: 20       POP   X                  (0153)     pop     X
0564: 70 EF    AND   F,0xEF             
0566: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0154) 
                                        (0155) LoadConfigLp:
                                        (0156)     M8C_SetBank0                    ; Switch to bank 0
                                        (0157)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0569: 10       PUSH  X                  (0158)     push    X                       ; Preserve the config table address
056A: 08       PUSH  A                  (0159)     push    A
056B: 28       ROMX                     (0160)     romx                            ; Load register address from table
056C: 39 FF    CMP   A,0xFF             (0161)     cmp     A, END_CONFIG_TABLE     ; End of table?
056E: A0 1F    JZ    0x058E             (0162)     jz      EndLoadConfig           ;   Yes, go wrap it up
0570: 4F       MOV   X,SP               (0163)     mov     X, SP                   ;
0571: 48 FC 01 TST   [X-4],0x1          (0164)     tst     [X-4], 1                ; Loading IO Bank 1?
0574: A0 03    JZ    0x0578             (0165)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0576: 71 10    OR    F,0x10             
                                        (0166)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0167) .IOBankNowSet:
0578: 54 FD    MOV   [X-3],A            (0168)     mov     [X-3], A                ; Stash the register address
057A: 18       POP   A                  (0169)     pop     A                       ; Retrieve the table address
057B: 20       POP   X                  (0170)     pop     X
057C: 75       INC   X                  (0171)     inc     X                       ; Advance to the data byte
057D: 09 00    ADC   A,0x0              (0172)     adc     A, 0
057F: 10       PUSH  X                  (0173)     push    X                       ; Save the config table address again
0580: 08       PUSH  A                  (0174)     push    A
0581: 28       ROMX                     (0175)     romx                            ; load config data from the table
0582: 4F       MOV   X,SP               (0176)     mov     X, SP                   ; retrieve the register address
0583: 59 FD    MOV   X,[X-3]            (0177)     mov     X, [X-3]
0585: 61 00    MOV   REG[X+0x0],A       (0178)     mov     reg[X], A               ; Configure the register
0587: 18       POP   A                  (0179)     pop     A                       ; retrieve the table address
0588: 20       POP   X                  (0180)     pop     X
0589: 75       INC   X                  (0181)     inc     X                       ; advance to next table entry
058A: 09 00    ADC   A,0x0              (0182)     adc     A, 0
058C: 8F D7    JMP   0x0564             (0183)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0184) EndLoadConfig:
058E: 38 FC    ADD   SP,0xFC            (0185)     add     SP, -4
0590: 70 3F    AND   F,0x3F             
0592: 71 C0    OR    F,0xC0             
                                        (0186)     RAM_EPILOGUE RAM_USE_CLASS_2
0594: 7F       RET                      (0187)     ret
                                        (0188) 
                                        (0189) AREA InterruptRAM(ram, rel)
                                        (0190) 
                                        (0191) NO_SHADOW:
                                        (0192) _NO_SHADOW:
                                        (0193) ; write only register shadows
                                        (0194) _Port_1_Data_SHADE:
                                        (0195) Port_1_Data_SHADE:	BLK	1
                                        (0196) _Port_2_Data_SHADE:
                                        (0197) Port_2_Data_SHADE:	BLK	1
                                        (0198) _Port_2_DriveMode_0_SHADE:
                                        (0199) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0200) _Port_2_DriveMode_1_SHADE:
                                        (0201) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0202) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
0595: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
                                        (0180)    push A
                                        (0181)    push X
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
                                        (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
                                        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
                                        (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
                                        (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
                                        (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
                                        (0193)    pop  A                                                  ; Restore stack
                                        (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
                                        (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
                                        (0200)    and  A,UART_RX_ERROR
                                        (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
                                        (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
                                        (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
                                        (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
                                        (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
                                        (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
                                        (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
                                        (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
                                        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
                                        (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
                                        (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
                                        (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
                                        (0223)    jnz  .UARTRX_CHK_BACKSPACE
                                        (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
                                        (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
                                        (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
                                        (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
                                        (0254)    jc   .UARTRX_ISR_GETDATA
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
                                        (0259)    jmp  .RESTORE_IDX_PP
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
                                        (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0266)    inc  X                                                  ; Inc the pointer
                                        (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
                                        (0275)    pop  X
                                        (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
0596: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
0597: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
059A: 43 DF 04 OR    REG[0xDF],0x4      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
059D: 7F       RET                      (0182)    ret
059E: 41 E1 F7 AND   REG[0xE1],0xF7     
05A1: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
05A4: 7F       RET                      (0214)    ret
05A5: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
05A7: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
05A9: A0 07    JZ    0x05B1             (0249)    jz    .SetModeRegEmpty
05AB: 43 2C 10 OR    REG[0x2C],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
05AE: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
05B0: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
05B1: 41 2C EF AND   REG[0x2C],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
05B4: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
05B6: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
05B7: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
05B9: 60 2F    MOV   REG[0x2F],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
05BB: 60 4B    MOV   REG[0x4B],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
                                        (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
05BD: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
05BE: 41 2F FE AND   REG[0x2F],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
05C1: 41 4B FE AND   REG[0x4B],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
05C4: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
05C5: 60 2D    MOV   REG[0x2D],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
05C7: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
05C8: 5D 2F    MOV   A,REG[0x2F]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
05CA: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
05CB: 5D 4A    MOV   A,REG[0x4A]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
05CD: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
05CE: 5D 4B    MOV   A,REG[0x4B]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
05D0: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
05D1: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
05D3: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
05D5: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
05D7: A0 06    JZ    0x05DE             (0492)    jz   .SetTxCmpMode
                                        (0493) 
05D9: 41 2C EF AND   REG[0x2C],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
05DC: 80 04    JMP   0x05E1             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
05DE: 43 2C 10 OR    REG[0x2C],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
05E1: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
05E3: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
05E4: 08       PUSH  A                  (0536)    push A
05E5: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
05E7: A0 06    JZ    0x05EE             (0538)    jz   .DisRxInt
05E9: 43 DF 04 OR    REG[0xDF],0x4      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
05EC: 80 04    JMP   0x05F1             (0541)    jmp  .CheckTxInt
05EE: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
05F1: 18       POP   A                  (0547)    pop  A
05F2: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
05F4: A0 06    JZ    0x05FB             (0549)    jz   .DisTxInt
05F6: 43 E1 08 OR    REG[0xE1],0x8      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
05F9: 80 04    JMP   0x05FE             (0552)    jmp  .End_IntCntl
05FB: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
05FE: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
060F: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
0610: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
0611: 67       ASR   A                  (0603)    asr   A
0612: 67       ASR   A                  (0604)    asr   A
0613: 67       ASR   A                  (0605)    asr   A
0614: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
0616: FF E7    INDEX 0x05FF             (0607)    index UART_HEX_STR                  ; Get Hex value
0618: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
061A: 18       POP   A                  (0609)    pop   A                             ; Restore value
061B: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
061D: FF E0    INDEX 0x05FF             (0611)    index UART_HEX_STR                  ; Get Hex value
061F: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
0621: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
0622: 4B       SWAP  A,X                (0645)    swap  A,X
0623: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
0625: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
0626: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
0628: 7F       RET                      (0650)    ret
0629: 49 2F 10 TST   REG[0x2F],0x10     
062C: AF FC    JZ    _UART_PutChar      
062E: 60 2D    MOV   REG[0x2D],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
0630: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
0631: 49 4B 08 TST   REG[0x4B],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
0634: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
0636: 5D 4A    MOV   A,REG[0x4A]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
0638: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
0639: 5D 4B    MOV   A,REG[0x4B]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
063B: 08       PUSH  A                  (0756)    push A
063C: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
063E: B0 04    JNZ   0x0643             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0640: 18       POP   A                  (0759)    pop  A
0641: 80 0B    JMP   0x064D             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
0643: 5D 4A    MOV   A,REG[0x4A]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
0645: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
0646: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
0647: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
0649: B0 03    JNZ   0x064D             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
064B: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
064C: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
064D: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
064F: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
0650: 5D 4B    MOV   A,REG[0x4B]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
0652: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
0654: 08       PUSH  A                  (0819)    push A
0655: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
0657: B0 07    JNZ   0x065F             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0659: 18       POP   A                  (0822)    pop  A
065A: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
065C: 4B       SWAP  A,X                (0824)    swap A,X
065D: 80 07    JMP   0x0665             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
065F: 18       POP   A                  (0828)    pop  A
0660: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0662: 4B       SWAP  A,X                (0830)    swap A,X
0663: 5D 4A    MOV   A,REG[0x4A]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
0665: 7F       RET                      (0836)    ret
0666: 70 BF    AND   F,0xBF             
0668: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
066A: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
066C: A0 06    JZ    0x0673             (0872)    jz    End_PutString                           ; Check for end of string
066E: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0670: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0671: 8F F8    JMP   0x066A             (0875)    jmp   .PutStringLoop                          ; Get next character
0673: 70 3F    AND   F,0x3F             
0675: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
0677: 7F       RET                      (0879)    ret
0678: 70 BF    AND   F,0xBF             
067A: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
067D: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
067E: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0680: A0 1A    JZ    0x069B             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0682: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
0684: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
0686: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
0688: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
068A: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
068C: 49 2F 10 TST   REG[0x2F],0x10     
068F: AF FC    JZ    0x068C             
0691: 60 2D    MOV   REG[0x2D],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0693: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
0694: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
0697: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
0699: 8F E4    JMP   0x067E             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
069B: 70 3F    AND   F,0x3F             
069D: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
069F: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
06A0: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
06A1: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
06A4: B0 06    JNZ   0x06AB             (0980)    jnz   .CW_WRITEIT
06A6: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
06A9: A0 1D    JZ    0x06C7             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
06AB: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
06AC: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
06AE: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
06B0: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
06B1: 49 2F 10 TST   REG[0x2F],0x10     
06B4: AF FC    JZ    0x06B1             
06B6: 60 2D    MOV   REG[0x2D],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
06B8: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
06B9: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
06BC: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
06BF: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
06C2: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
06C5: 8F DB    JMP   0x06A1             (0995)    jmp   .CW_Loop
06C7: 70 3F    AND   F,0x3F             
06C9: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
06CB: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
06CC: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
06CD: 10       PUSH  X                  (1030)    push  X
06CE: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
06CF: A0 0B    JZ    0x06DB             (1032)    jz    .End_CPutString
06D1: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
06D3: 20       POP   X                  (1034)    pop   X
06D4: 18       POP   A                  (1035)    pop   A
06D5: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
06D6: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
06D8: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
06D9: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
06DB: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
06DD: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
06DE: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
06E0: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
06E2: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
06E4: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
06E6: 7F       RET                      (1078)    ret
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
                                        (1122)    mov [UART_aRxBuffer], 0x00
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1124)    mov [UART_bRxCnt], 0x00
                                        (1125)    and [UART_fStatus], 0x00
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
                                        (1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1129)    ret
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1165)    mov A,  [UART_fStatus]
                                        (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1168)    ret
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
                                        (1209)    mov A,  [UART_fStatus]
                                        (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
                                        (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1213)    ret
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
                                        (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1246)    ret
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
                                        (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
                                        (1305)    add   A, [ptrParam]                      ; Add string offset
                                        (1306)    mov   X, A
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (1308)    mov   A, [X]                             ; Get character pointed by X
                                        (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
                                        (1310)    push  X                                  ;       Yes, Save LSB of current pointer
                                        (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
                                        (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
                                        (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
                                        (1317)    inc   X                                  ;   Yes, Increment both index and...
                                        (1318)    inc   [ptrParam]                         ;          the stored pointer.
                                        (1319)    mov   A, [X]                             ; Get character pointed by X
                                        (1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
                                        (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
                                        (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
                                        (1326)    mov   [X], 0x00                          ; Make sure string is zero
                                        (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
                                        (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
                                        (1333)    inc   X                                  ; Advance pointers.
                                        (1334)    inc   [ptrParam]
                                        (1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1336)    jz    .TerminateString
                                        (1337)    mov   A, [X]                             ; Get next character
                                        (1338)    jz    .End_GetNextParam
                                        (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
                                        (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
                                        (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
                                        (1342)    inc   [ptrParam]
                                        (1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
                                        (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
                                        (1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
                                        (1348)    pop   X
                                        (1349)    push  X
                                        (1350)    cmp   [X], 0x00
                                        (1351)    jnz   .NotNullString
                                        (1352)    pop   X
                                        (1353)    mov   X, 0x00
                                        (1354)    mov   A, X
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
                                        (1360)    pop  X
                                        (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1364)    ret
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
                                        (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
                                        (1397)    add  A, [ptrParam]                       ; Add string offset
                                        (1398)    mov  X,A
                                        (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
                                        (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\timercameraint.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TimerCameraINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer24 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "TimerCamera.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _TimerCamera_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _TimerCamera_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _TimerCamera_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
06E7: 7D 14 02 LJMP  _TimerCamera_ISR_C (0068)    ljmp _TimerCamera_ISR_C  ; jump to the ISR written in main.c
                                        (0069)    
                                        (0070)    ;   NOTE: interrupt service routines must preserve
                                        (0071)    ;   the values of the A and X CPU registers.
                                        (0072)    
                                        (0073)    ;---------------------------------------------------
                                        (0074)    ; Insert your custom assembly code above this banner
                                        (0075)    ;---------------------------------------------------
                                        (0076)    
                                        (0077)    ;---------------------------------------------------
                                        (0078)    ; Insert a lcall to a C function below this banner
                                        (0079)    ; and un-comment the lines between these banners
                                        (0080)    ;---------------------------------------------------
                                        (0081)    
                                        (0082)    ;PRESERVE_CPU_CONTEXT
                                        (0083)    ;lcall _My_C_Function
                                        (0084)    ;RESTORE_CPU_CONTEXT
                                        (0085)    
                                        (0086)    ;---------------------------------------------------
                                        (0087)    ; Insert a lcall to a C function above this banner
                                        (0088)    ; and un-comment the lines between these banners
                                        (0089)    ;---------------------------------------------------
                                        (0090)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0091) 
06EA: 7E       RETI                     (0092)    reti
                                        (0093) 
                                        (0094) 
                                        (0095) ; end of file TimerCameraINT.asm
FILE: lib\timercamera.asm               (0001) ;;*****************************************************************************
06EB: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: TimerCamera.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer24 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "TimerCamera.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  TimerCamera_EnableInt
                                        (0030) export _TimerCamera_EnableInt
                                        (0031) export  TimerCamera_DisableInt
                                        (0032) export _TimerCamera_DisableInt
                                        (0033) export  TimerCamera_Start
                                        (0034) export _TimerCamera_Start
                                        (0035) export  TimerCamera_Stop
                                        (0036) export _TimerCamera_Stop
                                        (0037) export  TimerCamera_WritePeriod
                                        (0038) export _TimerCamera_WritePeriod
                                        (0039) export  TimerCamera_WriteCompareValue
                                        (0040) export _TimerCamera_WriteCompareValue
                                        (0041) export  TimerCamera_ReadCompareValue
                                        (0042) export _TimerCamera_ReadCompareValue
                                        (0043) export  TimerCamera_ReadTimer
                                        (0044) export _TimerCamera_ReadTimer
                                        (0045) export  TimerCamera_ReadTimerSaveCV
                                        (0046) export _TimerCamera_ReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  TimerCamera_ReadCounter       ; obsolete
                                        (0051) export _TimerCamera_ReadCounter       ; obsolete
                                        (0052) export  TimerCamera_CaptureCounter    ; obsolete
                                        (0053) export _TimerCamera_CaptureCounter    ; obsolete
                                        (0054) 
                                        (0055) 
                                        (0056) AREA spim_cam_RAM (RAM,REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: TimerCamera_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.                    
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  TimerCamera_EnableInt:
                                        (0091) _TimerCamera_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    TimerCamera_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
06EE: 7F       RET                      (0095)    ret
06EF: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0096) 
                                        (0097) .ENDSECTION
                                        (0098) 
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: TimerCamera_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS: 
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  TimerCamera_DisableInt:
                                        (0119) _TimerCamera_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    TimerCamera_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
06F2: 7F       RET                      (0123)    ret
06F3: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) .ENDSECTION
                                        (0126) 
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: TimerCamera_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     timer will begin counting on the next input clock.
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    None
                                        (0138) ;  RETURNS:      Nothing
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146)  TimerCamera_Start:
                                        (0147) _TimerCamera_Start:
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0149)    TimerCamera_Start_M
                                        (0150)    RAM_EPILOGUE RAM_USE_CLASS_1
06F6: 7F       RET                      (0151)    ret
06F7: 41 33 FE AND   REG[0x33],0xFE     
                                        (0152) 
                                        (0153) .ENDSECTION
                                        (0154) 
                                        (0155) 
                                        (0156) .SECTION
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;  FUNCTION NAME: TimerCamera_Stop
                                        (0159) ;
                                        (0160) ;  DESCRIPTION:
                                        (0161) ;     Disables timer operation by clearing the start bit in the Control
                                        (0162) ;     register of the LSB block.
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;
                                        (0165) ;  ARGUMENTS:    None
                                        (0166) ;  RETURNS:      Nothing
                                        (0167) ;  SIDE EFFECTS: 
                                        (0168) ;    The A and X registers may be modified by this or future implementations
                                        (0169) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0170) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0171) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0172) ;    functions.
                                        (0173) ;
                                        (0174)  TimerCamera_Stop:
                                        (0175) _TimerCamera_Stop:
                                        (0176)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0177)    TimerCamera_Stop_M
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_1
06FA: 7F       RET                      (0179)    ret
                                        (0180) 
                                        (0181) .ENDSECTION
                                        (0182) 
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: TimerCamera_WritePeriod
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Write the 24-bit period value into the Period register (DR1). If the
                                        (0190) ;     Timer user module is stopped, then this value will also be latched
                                        (0191) ;     into the Count register (DR0).
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;
                                        (0194) ;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (passed on stack)
                                        (0195) ;  RETURNS:   Nothing
                                        (0196) ;  SIDE EFFECTS: 
                                        (0197) ;    The A and X registers may be modified by this or future implementations
                                        (0198) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0199) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0200) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0201) ;    functions.
                                        (0202) ;
                                        (0203) _TimerCamera_WritePeriod:
                                        (0204)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0205)  TimerCamera_WritePeriod:
06FB: 4F       MOV   X,SP               (0206)    mov   X, SP
06FC: 52 FB    MOV   A,[X-5]            (0207)    mov   A, [X-5]                                ; load the period registers
06FE: 60 39    MOV   REG[0x39],A        (0208)    mov   reg[TimerCamera_PERIOD_MSB_REG], A
0700: 52 FC    MOV   A,[X-4]            (0209)    mov   A, [X-4]
0702: 60 35    MOV   REG[0x35],A        (0210)    mov   reg[TimerCamera_PERIOD_ISB_REG], A
0704: 52 FD    MOV   A,[X-3]            (0211)    mov   A, [X-3]
0706: 60 31    MOV   REG[0x31],A        (0212)    mov   reg[TimerCamera_PERIOD_LSB_REG], A
0708: 70 3F    AND   F,0x3F             
070A: 71 C0    OR    F,0xC0             
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_2
070C: 7F       RET                      (0214)    ret
                                        (0215) 
                                        (0216) .ENDSECTION
                                        (0217) 
                                        (0218) 
                                        (0219) .SECTION
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;  FUNCTION NAME: TimerCamera_WriteCompareValue
                                        (0222) ;
                                        (0223) ;  DESCRIPTION:
                                        (0224) ;     Writes compare value into the Compare register (DR2).
                                        (0225) ;
                                        (0226) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0227) ;           Compare register. (Call TimerCamera_Stop to disable).
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;
                                        (0230) ;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (passed on stack)
                                        (0231) ;  RETURNS:      Nothing
                                        (0232) ;  SIDE EFFECTS: 
                                        (0233) ;    The A and X registers may be modified by this or future implementations
                                        (0234) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0235) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0236) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0237) ;    functions.
                                        (0238) ;
                                        (0239) _TimerCamera_WriteCompareValue:
                                        (0240)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0241)  TimerCamera_WriteCompareValue:
070D: 4F       MOV   X,SP               (0242)    mov   X, SP
070E: 52 FB    MOV   A,[X-5]            (0243)    mov   A, [X-5]                                ; load the compare registers
0710: 60 3A    MOV   REG[0x3A],A        (0244)    mov   reg[TimerCamera_COMPARE_MSB_REG], A
0712: 52 FC    MOV   A,[X-4]            (0245)    mov   A, [X-4]
0714: 60 36    MOV   REG[0x36],A        (0246)    mov   reg[TimerCamera_COMPARE_ISB_REG], A
0716: 52 FD    MOV   A,[X-3]            (0247)    mov   A, [X-3]
0718: 60 32    MOV   REG[0x32],A        (0248)    mov   reg[TimerCamera_COMPARE_LSB_REG], A
071A: 70 3F    AND   F,0x3F             
071C: 71 C0    OR    F,0xC0             
                                        (0249)    RAM_EPILOGUE RAM_USE_CLASS_2
071E: 7F       RET                      (0250)    ret
071F: 70 BF    AND   F,0xBF             
0721: 60 D3    MOV   REG[0xD3],A        
                                        (0251) 
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) 
                                        (0255) .SECTION
                                        (0256) ;-----------------------------------------------------------------------------
                                        (0257) ;  FUNCTION NAME: TimerCamera_ReadCompareValue
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;     Reads the Compare registers.
                                        (0261) ;-----------------------------------------------------------------------------
                                        (0262) ;
                                        (0263) ;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
                                        (0264) ;             (pointer: LSB in X, MSB in A)
                                        (0265) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0266) ;  SIDE EFFECTS:
                                        (0267) ;    The DWORD pointed to by X takes on the value read from DR2
                                        (0268) ;
                                        (0269) ;    The A and X registers may be modified by this or future implementations
                                        (0270) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0271) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0272) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0273) ;    functions.
                                        (0274) ;          
                                        (0275) ;    Currently only the page pointer registers listed below are modified:
                                        (0276) ;          IDX_PP
                                        (0277) ;
                                        (0278)  TimerCamera_ReadCompareValue:
                                        (0279) _TimerCamera_ReadCompareValue:
                                        (0280)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0281)    RAM_SETPAGE_IDX A 
0723: 56 00 00 MOV   [X+0],0x0          (0282)    mov   [X], 0
0726: 5D 3A    MOV   A,REG[0x3A]        (0283)    mov   A, reg[TimerCamera_COMPARE_MSB_REG]
0728: 54 01    MOV   [X+1],A            (0284)    mov   [X+1], A
072A: 5D 36    MOV   A,REG[0x36]        (0285)    mov   A, reg[TimerCamera_COMPARE_ISB_REG]
072C: 54 02    MOV   [X+2],A            (0286)    mov   [X+2], A
072E: 5D 32    MOV   A,REG[0x32]        (0287)    mov   A, reg[TimerCamera_COMPARE_LSB_REG]
0730: 54 03    MOV   [X+3],A            (0288)    mov   [X+3], A
0732: 70 3F    AND   F,0x3F             
0734: 71 C0    OR    F,0xC0             
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_3
0736: 7F       RET                      (0290)    ret
0737: 70 BF    AND   F,0xBF             
0739: 60 D3    MOV   REG[0xD3],A        
                                        (0291) 
                                        (0292) .ENDSECTION
                                        (0293) 
                                        (0294) 
                                        (0295) .SECTION
                                        (0296) ;-----------------------------------------------------------------------------
                                        (0297) ;  FUNCTION NAME: TimerCamera_ReadTimerSaveCV
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Retrieves the value in the Count register (DR0), preserving the
                                        (0301) ;     value in the compare register (DR2).
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0305) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0306) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0307) ;  SIDE EFFECTS:
                                        (0308) ;     1) The DWORD pointed to by X takes on the value read from DR0
                                        (0309) ;     2) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0310) ;     3) If enabled, Global interrupts are momentarily disabled.
                                        (0311) ;     4) The user module is stopped momentarily while the compare value is
                                        (0312) ;        restored.  This may cause the Count register to miss one or more
                                        (0313) ;        counts depending on the input clock speed.
                                        (0314) ;  
                                        (0315) ;     5) The A and X registers may be modified by this or future implementations
                                        (0316) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0317) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0318) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0319) ;        functions.
                                        (0320) ;              
                                        (0321) ;        Currently only the page pointer registers listed below are modified: 
                                        (0322) ;             IDX_PP
                                        (0323) ;
                                        (0324) ;  THEORY of OPERATION:
                                        (0325) ;     1) Read and save the Compare register.
                                        (0326) ;     2) Read the Count register, causing its data to be latched into
                                        (0327) ;        the Compare register.
                                        (0328) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0329) ;        to the buffer.
                                        (0330) ;     4) Disable global interrupts
                                        (0331) ;     5) Halt the timer
                                        (0332) ;     6) Restore the Compare register values
                                        (0333) ;     7) Start the Timer again
                                        (0334) ;     8) Restore global interrupt state
                                        (0335) ;
                                        (0336)  TimerCamera_ReadTimerSaveCV:
                                        (0337) _TimerCamera_ReadTimerSaveCV:
                                        (0338)  TimerCamera_ReadCounter:                        ; this name deprecated
                                        (0339) _TimerCamera_ReadCounter:                        ; this name deprecated
                                        (0340) 
                                        (0341)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0342)    RAM_SETPAGE_IDX A 
                                        (0343)    ; save the Control register on the stack
073B: 5D 33    MOV   A,REG[0x33]        (0344)    mov   A, reg[TimerCamera_CONTROL_LSB_REG]
073D: 08       PUSH  A                  (0345)    push  A
                                        (0346) 
                                        (0347)    ; save the Compare register value
073E: 5D 3A    MOV   A,REG[0x3A]        (0348)    mov   A, reg[TimerCamera_COMPARE_MSB_REG]
0740: 08       PUSH  A                  (0349)    push  A
0741: 5D 36    MOV   A,REG[0x36]        (0350)    mov   A, reg[TimerCamera_COMPARE_ISB_REG]
0743: 08       PUSH  A                  (0351)    push  A
0744: 5D 32    MOV   A,REG[0x32]        (0352)    mov   A, reg[TimerCamera_COMPARE_LSB_REG]
0746: 08       PUSH  A                  (0353)    push  A
                                        (0354) 
                                        (0355)    ; Read the LSB count. This latches the Count register data into the
                                        (0356)    ; Compare register of all bytes of chained PSoC blocks!
                                        (0357)    ; This may cause an interrupt.
0747: 5D 30    MOV   A,REG[0x30]        (0358)    mov   A, reg[TimerCamera_COUNTER_LSB_REG]
                                        (0359) 
                                        (0360)    ; Read the Compare register, which contains the counter value
                                        (0361)    ; and store the return result
0749: 56 00 00 MOV   [X+0],0x0          (0362)    mov   [X], 0
074C: 5D 3A    MOV   A,REG[0x3A]        (0363)    mov   A, reg[TimerCamera_COMPARE_MSB_REG]
074E: 54 01    MOV   [X+1],A            (0364)    mov   [X+1], A
0750: 5D 36    MOV   A,REG[0x36]        (0365)    mov   A, reg[TimerCamera_COMPARE_ISB_REG]
0752: 54 02    MOV   [X+2],A            (0366)    mov   [X+2], A
0754: 5D 32    MOV   A,REG[0x32]        (0367)    mov   A, reg[TimerCamera_COMPARE_LSB_REG]
0756: 54 03    MOV   [X+3],A            (0368)    mov   [X+3], A
                                        (0369) 
                                        (0370)    ; determine current interrupt state and save in X
0758: 50 00    MOV   A,0x0              (0371)    mov   A, 0
075A: 49 F7 01 TST   REG[0xF7],0x1      (0372)    tst   reg[CPU_F], FLAG_GLOBAL_IE
075D: A0 03    JZ    0x0761             (0373)    jz    .SetupStatusFlag
075F: 50 01    MOV   A,0x1              (0374)    mov   A, FLAG_GLOBAL_IE
                                        (0375) .SetupStatusFlag:
0761: 5C       MOV   X,A                (0376)    mov   X, A
0762: 70 FE    AND   F,0xFE             
0764: 41 33 FE AND   REG[0x33],0xFE     
                                        (0377) 
                                        (0378)    ; disable interrupts for the time being
                                        (0379)    M8C_DisableGInt
                                        (0380) 
                                        (0381)    ; stop the timer
                                        (0382)    TimerCamera_Stop_M
                                        (0383) 
                                        (0384)    ; Restore the Compare register
0767: 18       POP   A                  (0385)    pop   A
0768: 60 32    MOV   REG[0x32],A        (0386)    mov   reg[TimerCamera_COMPARE_LSB_REG], A
076A: 18       POP   A                  (0387)    pop   A
076B: 60 36    MOV   REG[0x36],A        (0388)    mov   reg[TimerCamera_COMPARE_ISB_REG], A
076D: 18       POP   A                  (0389)    pop   A
076E: 60 3A    MOV   REG[0x3A],A        (0390)    mov   reg[TimerCamera_COMPARE_MSB_REG], A
                                        (0391) 
                                        (0392)    ; restore start state of the timer
0770: 18       POP   A                  (0393)    pop   A
0771: 60 33    MOV   REG[0x33],A        (0394)    mov   reg[TimerCamera_CONTROL_LSB_REG], A
                                        (0395) 
                                        (0396)    ; push the flag register to restore on the stack
0773: 10       PUSH  X                  (0397)    push  X
0774: 70 3F    AND   F,0x3F             
0776: 71 C0    OR    F,0xC0             
                                        (0398) 
                                        (0399)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0400)    ; Use RETI because it pops a the flag register off the stack
                                        (0401)    ; and then returns to the caller.
0778: 7E       RETI                     (0402)    reti
0779: 70 BF    AND   F,0xBF             
077B: 60 D3    MOV   REG[0xD3],A        
                                        (0403) 
                                        (0404) .ENDSECTION
                                        (0405) 
                                        (0406) 
                                        (0407) .SECTION
                                        (0408) ;-----------------------------------------------------------------------------
                                        (0409) ;  FUNCTION NAME: TimerCamera_ReadTimer
                                        (0410) ;
                                        (0411) ;  DESCRIPTION:
                                        (0412) ;     Performs a software capture of the Count register.  A synchronous
                                        (0413) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0414) ;
                                        (0415) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0416) ;-----------------------------------------------------------------------------
                                        (0417) ;
                                        (0418) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0419) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0420) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0421) ;  SIDE EFFECTS:
                                        (0422) ;     1) The DWORD pointed to by X takes on the value read from DR2.
                                        (0423) ;     2) May cause an interrupt.
                                        (0424) ;     3) The A and X registers may be modified by this or future implementations
                                        (0425) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0426) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0427) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0428) ;        functions.
                                        (0429) ;              
                                        (0430) ;        Currently only the page pointer registers listed below are modified: 
                                        (0431) ;              IDX_PP
                                        (0432) 
                                        (0433) ;
                                        (0434) ;  THEORY of OPERATION:
                                        (0435) ;     1) Read the Count register - this causes the count value to be
                                        (0436) ;        latched into the Compare registers.
                                        (0437) ;     2) Read and return the Count register values from the Compare
                                        (0438) ;        registers into the return buffer.
                                        (0439) ;
                                        (0440)  TimerCamera_ReadTimer:
                                        (0441) _TimerCamera_ReadTimer:
                                        (0442)  TimerCamera_CaptureCounter:                     ; this name deprecated
                                        (0443) _TimerCamera_CaptureCounter:                     ; this name deprecated
                                        (0444) 
                                        (0445)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0446)    ; Read the LSB of the Count register, DR0. This latches the count data into
                                        (0447)    ; the Compare register of all bytes of chained PSoC blocks and may cause
                                        (0448)    ; an interrupt.
                                        (0449)    RAM_SETPAGE_IDX A 
077D: 5D 30    MOV   A,REG[0x30]        (0450)    mov   A, reg[TimerCamera_COUNTER_LSB_REG]
                                        (0451) 
                                        (0452)    ; Read the Compare register, which contains the counter value
                                        (0453)    ; and store ther return result
077F: 56 00 00 MOV   [X+0],0x0          (0454)    mov   [X], 0
0782: 5D 3A    MOV   A,REG[0x3A]        (0455)    mov   A, reg[TimerCamera_COMPARE_MSB_REG]
0784: 54 01    MOV   [X+1],A            (0456)    mov   [X+1], A
0786: 5D 36    MOV   A,REG[0x36]        (0457)    mov   A, reg[TimerCamera_COMPARE_ISB_REG]
0788: 54 02    MOV   [X+2],A            (0458)    mov   [X+2], A
078A: 5D 32    MOV   A,REG[0x32]        (0459)    mov   A, reg[TimerCamera_COMPARE_LSB_REG]
078C: 54 03    MOV   [X+3],A            (0460)    mov   [X+3], A
078E: 70 3F    AND   F,0x3F             
0790: 71 C0    OR    F,0xC0             
                                        (0461)    RAM_EPILOGUE RAM_USE_CLASS_3
0792: 7F       RET                      (0462)    ret
                                        (0463) 
                                        (0464) .ENDSECTION
                                        (0465) 
                                        (0466) ; End of File TimerCamera.asm
FILE: lib\spim_camgaucheint.asm         (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_CamGaucheINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM_CamGauche.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM_CamGauche.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_CamGauche_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_CamGauche_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_CamGauche_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0793: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIM_CamGaucheINT.asm
FILE: lib\spim_camgauche.asm            (0001) ;;*****************************************************************************
0794: 43 E1 04 OR    REG[0xE1],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_CamGauche.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM_CamGauche.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_CamGauche_EnableInt
                                        (0030) export  _SPIM_CamGauche_EnableInt
                                        (0031) export   SPIM_CamGauche_DisableInt
                                        (0032) export  _SPIM_CamGauche_DisableInt
                                        (0033) export   SPIM_CamGauche_Start
                                        (0034) export  _SPIM_CamGauche_Start
                                        (0035) export   SPIM_CamGauche_Stop
                                        (0036) export  _SPIM_CamGauche_Stop
                                        (0037) export   SPIM_CamGauche_SendTxData
                                        (0038) export  _SPIM_CamGauche_SendTxData
                                        (0039) export   SPIM_CamGauche_bReadRxData
                                        (0040) export  _SPIM_CamGauche_bReadRxData
                                        (0041) export   SPIM_CamGauche_bReadStatus
                                        (0042) export  _SPIM_CamGauche_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_CamGauche_ReadRxData
                                        (0047) export  _bSPIM_CamGauche_ReadRxData
                                        (0048) export   bSPIM_CamGauche_ReadStatus
                                        (0049) export  _bSPIM_CamGauche_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_CamGauche_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_CamGauche_EnableInt:
                                        (0087) _SPIM_CamGauche_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_CamGauche_INT_REG, SPIM_CamGauche_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
0797: 7F       RET                      (0091)    ret
0798: 41 E1 FB AND   REG[0xE1],0xFB     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_CamGauche_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_CamGauche_DisableInt:
                                        (0120) _SPIM_CamGauche_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_CamGauche_INT_REG, SPIM_CamGauche_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
079B: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_CamGauche_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_CamGauche_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_CamGauche_Start:
                                        (0160) _SPIM_CamGauche_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
079C: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
079E: 60 2B    MOV   REG[0x2B],A        (0164)    mov   REG[SPIM_CamGauche_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
07A0: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_CamGauche_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_CamGauche_Stop:
                                        (0194) _SPIM_CamGauche_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
07A1: 41 2B FE AND   REG[0x2B],0xFE     (0197)    and   REG[SPIM_CamGauche_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
07A4: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_CamGauche_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_CamGauche_SendTxData:
                                        (0229) _SPIM_CamGauche_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
07A5: 60 29    MOV   REG[0x29],A        (0232)    mov REG[SPIM_CamGauche_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
07A7: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_CamGauche_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_CamGauche_bReadRxData:
                                        (0263) _SPIM_CamGauche_bReadRxData:
                                        (0264)  bSPIM_CamGauche_ReadRxData:
                                        (0265) _bSPIM_CamGauche_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
07A8: 5D 2A    MOV   A,REG[0x2A]        (0267)    mov A, REG[SPIM_CamGauche_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
07AA: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_CamGauche_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_CamGauche_bReadStatus:
                                        (0300) _SPIM_CamGauche_bReadStatus:
                                        (0301)  bSPIM_CamGauche_ReadStatus:
                                        (0302) _bSPIM_CamGauche_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
07AB: 5D 2B    MOV   A,REG[0x2B]        (0304)    mov A,  REG[SPIM_CamGauche_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
07AD: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM_CamGauche.asm
FILE: lib\spim_camdroiteint.asm         (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_CamDroiteINT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:
                                        (0008) ;;    Interrupt handler routine for SPIM user module instance: SPIM_CamDroite.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "SPIM_CamDroite.inc"
                                        (0017) 
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) export  _SPIM_CamDroite_ISR
                                        (0023) 
                                        (0024) 
                                        (0025) AREA InterruptRAM (RAM,REL,CON)
                                        (0026) 
                                        (0027) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0028) ;---------------------------------------------------
                                        (0029) ; Insert your custom declarations below this banner
                                        (0030) ;---------------------------------------------------
                                        (0031) 
                                        (0032) ;------------------------
                                        (0033) ; Includes
                                        (0034) ;------------------------
                                        (0035) 
                                        (0036) 	
                                        (0037) ;------------------------
                                        (0038) ;  Constant Definitions
                                        (0039) ;------------------------
                                        (0040) 
                                        (0041) 
                                        (0042) ;------------------------
                                        (0043) ; Variable Allocation
                                        (0044) ;------------------------
                                        (0045) 
                                        (0046) 
                                        (0047) ;---------------------------------------------------
                                        (0048) ; Insert your custom declarations above this banner
                                        (0049) ;---------------------------------------------------
                                        (0050) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0051) 
                                        (0052) 
                                        (0053) AREA UserModules (ROM, REL)
                                        (0054) 
                                        (0055) ;-----------------------------------------------------------------------------
                                        (0056) ;  FUNCTION NAME: _SPIM_CamDroite_ISR
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0059) ;
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;
                                        (0062) 
                                        (0063) _SPIM_CamDroite_ISR:
                                        (0064) 
                                        (0065)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0066)    ;---------------------------------------------------
                                        (0067)    ; Insert your custom assembly code below this banner
                                        (0068)    ;---------------------------------------------------
                                        (0069)    ;   NOTE: interrupt service routines must preserve
                                        (0070)    ;   the values of the A and X CPU registers.
                                        (0071)    
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
07AE: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file SPIM_CamDroiteINT.asm
FILE: lib\spim_camdroite.asm            (0001) ;;*****************************************************************************
07AF: 43 E1 80 OR    REG[0xE1],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: SPIM_CamDroite.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:42
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: SPIM User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "SPIM_CamDroite.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export   SPIM_CamDroite_EnableInt
                                        (0030) export  _SPIM_CamDroite_EnableInt
                                        (0031) export   SPIM_CamDroite_DisableInt
                                        (0032) export  _SPIM_CamDroite_DisableInt
                                        (0033) export   SPIM_CamDroite_Start
                                        (0034) export  _SPIM_CamDroite_Start
                                        (0035) export   SPIM_CamDroite_Stop
                                        (0036) export  _SPIM_CamDroite_Stop
                                        (0037) export   SPIM_CamDroite_SendTxData
                                        (0038) export  _SPIM_CamDroite_SendTxData
                                        (0039) export   SPIM_CamDroite_bReadRxData
                                        (0040) export  _SPIM_CamDroite_bReadRxData
                                        (0041) export   SPIM_CamDroite_bReadStatus
                                        (0042) export  _SPIM_CamDroite_bReadStatus
                                        (0043) 
                                        (0044) // These globals will be removed in a future release
                                        (0045) // Do not use
                                        (0046) export   bSPIM_CamDroite_ReadRxData
                                        (0047) export  _bSPIM_CamDroite_ReadRxData
                                        (0048) export   bSPIM_CamDroite_ReadStatus
                                        (0049) export  _bSPIM_CamDroite_ReadStatus
                                        (0050) 
                                        (0051) ;-----------------------------------------------
                                        (0052) ;  Constant Definitions
                                        (0053) ;-----------------------------------------------
                                        (0054) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0055) 
                                        (0056) 
                                        (0057) area UserModules (ROM, REL)
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: SPIM_CamDroite_EnableInt
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Enables the SPIM interrupt by setting the interrupt enable mask
                                        (0065) ;     bit associated with this User Module.
                                        (0066) ;
                                        (0067) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0068) ;           M8C global macro: M8C_EnableGInt
                                        (0069) ;
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:  none
                                        (0073) ;
                                        (0074) ;  RETURNS:  none
                                        (0075) ;
                                        (0076) ;  SIDE EFFECTS: 
                                        (0077) ;    The A and X registers may be modified by this or future implementations
                                        (0078) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0079) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0080) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0081) ;    functions.
                                        (0082) ;
                                        (0083) ;  THEORY of OPERATION or PROCEDURE:
                                        (0084) ;     Sets the specific user module interrupt enable mask bit.
                                        (0085) ;
                                        (0086)  SPIM_CamDroite_EnableInt:
                                        (0087) _SPIM_CamDroite_EnableInt:
                                        (0088)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0089)    M8C_EnableIntMask SPIM_CamDroite_INT_REG, SPIM_CamDroite_bINT_MASK
                                        (0090)    RAM_EPILOGUE RAM_USE_CLASS_1
07B2: 7F       RET                      (0091)    ret
07B3: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0092) 
                                        (0093) .ENDSECTION
                                        (0094) 
                                        (0095) .SECTION
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;  FUNCTION NAME: SPIM_CamDroite_DisableInt
                                        (0098) ;
                                        (0099) ;  DESCRIPTION:
                                        (0100) ;     Disables this SPIM's interrupt by clearing the interrupt enable mask bit
                                        (0101) ;     associated with this User Module.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS:  none
                                        (0106) ;
                                        (0107) ;  RETURNS:  none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS: 
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116) ;  THEORY of OPERATION or PROCEDURE:
                                        (0117) ;     Clears the specific user module interrupt enable mask bit.
                                        (0118) ;
                                        (0119)  SPIM_CamDroite_DisableInt:
                                        (0120) _SPIM_CamDroite_DisableInt:
                                        (0121)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0122)    M8C_DisableIntMask SPIM_CamDroite_INT_REG, SPIM_CamDroite_bINT_MASK
                                        (0123)    RAM_EPILOGUE RAM_USE_CLASS_1
07B6: 7F       RET                      (0124)    ret
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: SPIM_CamDroite_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit, SPI mode, and LSB/MSB first configuration of the SPIM
                                        (0134) ;     user module.
                                        (0135) ;
                                        (0136) ;     Transmission will begin transmitting when a byte is written into the TX buffer
                                        (0137) ;     using the SPIM_CamDroite_SendTxData function.
                                        (0138) ;
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140) ;
                                        (0141) ;  ARGUMENTS:
                                        (0142) ;     BYTE bConfiguration - Consists of SPI Mode and LSB/MSB first bit.
                                        (0143) ;           Use defined masks - masks can be OR'd together.
                                        (0144) ;     PASSED in Accumulator.
                                        (0145) ;
                                        (0146) ;  RETURNS:  none
                                        (0147) ;
                                        (0148) ;  SIDE EFFECTS: 
                                        (0149) ;    The A and X registers may be modified by this or future implementations
                                        (0150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0153) ;    functions.
                                        (0154) ;
                                        (0155) ;  THEORY of OPERATION or PROCEDURE:
                                        (0156) ;     1) Set all Slave Select outputs high
                                        (0157) ;     2) Set the specified SPI configuration bits in the Control register.
                                        (0158) ;
                                        (0159)  SPIM_CamDroite_Start:
                                        (0160) _SPIM_CamDroite_Start:
                                        (0161)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0162)    ; setup the SPIM configuration setting
07B7: 29 01    OR    A,0x1              (0163)    or    A, bfCONTROL_REG_START_BIT
07B9: 60 3F    MOV   REG[0x3F],A        (0164)    mov   REG[SPIM_CamDroite_CONTROL_REG], A
                                        (0165)    RAM_EPILOGUE RAM_USE_CLASS_1
07BB: 7F       RET                      (0166)    ret
                                        (0167) 
                                        (0168) .ENDSECTION
                                        (0169) 
                                        (0170) .SECTION
                                        (0171) ;-----------------------------------------------------------------------------
                                        (0172) ;  FUNCTION NAME: SPIM_CamDroite_Stop
                                        (0173) ;
                                        (0174) ;  DESCRIPTION:
                                        (0175) ;     Disables SPIM operation.
                                        (0176) ;
                                        (0177) ;-----------------------------------------------------------------------------
                                        (0178) ;
                                        (0179) ;  ARGUMENTS:  none
                                        (0180) ;
                                        (0181) ;  RETURNS:  none
                                        (0182) ;
                                        (0183) ;  SIDE EFFECTS: 
                                        (0184) ;    The A and X registers may be modified by this or future implementations
                                        (0185) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0186) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0187) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0188) ;    functions.
                                        (0189) ;
                                        (0190) ;  THEORY of OPERATION or PROCEDURE:
                                        (0191) ;     Clear the start bit in the Control register.
                                        (0192) ;
                                        (0193)  SPIM_CamDroite_Stop:
                                        (0194) _SPIM_CamDroite_Stop:
                                        (0195)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0196)    ; clear the SPIM stop bits
07BC: 41 3F FE AND   REG[0x3F],0xFE     (0197)    and   REG[SPIM_CamDroite_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
07BF: 7F       RET                      (0199)    ret
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) .SECTION
                                        (0204) ;-----------------------------------------------------------------------------
                                        (0205) ;  FUNCTION NAME: SPIM_CamDroite_SendTxData
                                        (0206) ;
                                        (0207) ;  DESCRIPTION:
                                        (0208) ;     Initiates an SPI data transfer.
                                        (0209) ;
                                        (0210) ;-----------------------------------------------------------------------------
                                        (0211) ;
                                        (0212) ;  ARGUMENTS:
                                        (0213) ;     BYTE  bTxData - data to transmit.
                                        (0214) ;        Passed in Accumulator.
                                        (0215) ;
                                        (0216) ;  RETURNS:  none
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS: 
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;
                                        (0225) ;  THEORY of OPERATION or PROCEDURE:
                                        (0226) ;     Writes data to the TX buffer register.
                                        (0227) ;
                                        (0228)  SPIM_CamDroite_SendTxData:
                                        (0229) _SPIM_CamDroite_SendTxData:
                                        (0230)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231)    ; Transmit the data!
07C0: 60 3D    MOV   REG[0x3D],A        (0232)    mov REG[SPIM_CamDroite_TX_BUFFER_REG], A
                                        (0233)    RAM_EPILOGUE RAM_USE_CLASS_1
07C2: 7F       RET                      (0234)    ret
                                        (0235) 
                                        (0236) .ENDSECTION
                                        (0237) 
                                        (0238) .SECTION
                                        (0239) ;-----------------------------------------------------------------------------
                                        (0240) ;  FUNCTION NAME: SPIM_CamDroite_bReadRxData
                                        (0241) ;
                                        (0242) ;  DESCRIPTION:
                                        (0243) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0244) ;     sure data is valid.
                                        (0245) ;
                                        (0246) ;-----------------------------------------------------------------------------
                                        (0247) ;
                                        (0248) ;  ARGUMENTS:  none
                                        (0249) ;
                                        (0250) ;  RETURNS:
                                        (0251) ;     bRxData - returned in A.
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS: 
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260) ;  THEORY of OPERATION or PROCEDURE:
                                        (0261) ;
                                        (0262)  SPIM_CamDroite_bReadRxData:
                                        (0263) _SPIM_CamDroite_bReadRxData:
                                        (0264)  bSPIM_CamDroite_ReadRxData:
                                        (0265) _bSPIM_CamDroite_ReadRxData:
                                        (0266)    RAM_PROLOGUE RAM_USE_CLASS_1
07C3: 5D 3E    MOV   A,REG[0x3E]        (0267)    mov A, REG[SPIM_CamDroite_RX_BUFFER_REG]
                                        (0268)    RAM_EPILOGUE RAM_USE_CLASS_1   
07C5: 7F       RET                      (0269)    ret
                                        (0270) 
                                        (0271) 
                                        (0272) .ENDSECTION
                                        (0273) 
                                        (0274) .SECTION
                                        (0275) ;-----------------------------------------------------------------------------
                                        (0276) ;  FUNCTION NAME: SPIM_CamDroite_ReadStatus
                                        (0277) ;
                                        (0278) ;  DESCRIPTION:
                                        (0279) ;     Reads the SPIM Status bits in the Control/Status register.
                                        (0280) ;
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;
                                        (0283) ;  ARGUMENTS:  none
                                        (0284) ;
                                        (0285) ;  RETURNS:
                                        (0286) ;     BYTE  bStatus - transmit status data.  Use the defined bit masks.
                                        (0287) ;        Returned in Accumulator.
                                        (0288) ;
                                        (0289) ;  SIDE EFFECTS: 
                                        (0290) ;    The A and X registers may be modified by this or future implementations
                                        (0291) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0292) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0293) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0294) ;    functions.
                                        (0295) ;
                                        (0296) ;  THEORY of OPERATION or PROCEDURE:
                                        (0297) ;     Read the status and control register.
                                        (0298) ;
                                        (0299)  SPIM_CamDroite_bReadStatus:
                                        (0300) _SPIM_CamDroite_bReadStatus:
                                        (0301)  bSPIM_CamDroite_ReadStatus:
                                        (0302) _bSPIM_CamDroite_ReadStatus:
                                        (0303)    RAM_PROLOGUE RAM_USE_CLASS_1
07C6: 5D 3F    MOV   A,REG[0x3F]        (0304)    mov A,  REG[SPIM_CamDroite_CONTROL_REG]
                                        (0305)    RAM_EPILOGUE RAM_USE_CLASS_1   
07C8: 7F       RET                      (0306)    ret
                                        (0307) 
                                        (0308) .ENDSECTION
                                        (0309) 
                                        (0310) ; End of File SPIM_CamDroite.asm
FILE: lib\pwm16int.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07C9: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16INT.asm
FILE: lib\pwm16_2int.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
07CA: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_2INT.asm
FILE: lib\pwm16_2.asm                   (0001) ;;*****************************************************************************
07CB: 43 DF 02 OR    REG[0xDF],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_2_EnableInt
                                        (0030) export _PWM16_2_EnableInt
                                        (0031) export  PWM16_2_DisableInt
                                        (0032) export _PWM16_2_DisableInt
                                        (0033) export  PWM16_2_Start
                                        (0034) export _PWM16_2_Start
                                        (0035) export  PWM16_2_Stop
                                        (0036) export _PWM16_2_Stop
                                        (0037) export  PWM16_2_WritePeriod
                                        (0038) export _PWM16_2_WritePeriod
                                        (0039) export  PWM16_2_WritePulseWidth
                                        (0040) export _PWM16_2_WritePulseWidth
                                        (0041) export  PWM16_2_wReadPulseWidth
                                        (0042) export _PWM16_2_wReadPulseWidth
                                        (0043) export  PWM16_2_wReadCounter
                                        (0044) export _PWM16_2_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_2_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_2_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_2_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA spim_cam_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_2_EnableInt:
                                        (0091) _PWM16_2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
07CE: 7F       RET                      (0095)    ret
07CF: 41 DF FD AND   REG[0xDF],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_2_DisableInt:
                                        (0119) _PWM16_2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
07D2: 7F       RET                      (0123)    ret
07D3: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_2_Start:
                                        (0148) _PWM16_2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
07D6: 7F       RET                      (0152)    ret
07D7: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_2_Stop:
                                        (0176) _PWM16_2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
07DA: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_2_WritePeriod:
                                        (0206) _PWM16_2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
07DB: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWM16_2_PERIOD_LSB_REG], A
07DD: 5B       MOV   A,X                (0209)    mov   A, X
07DE: 60 45    MOV   REG[0x45],A        (0210)    mov   reg[PWM16_2_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
07E0: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_2_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_2_WritePulseWidth:
                                        (0235) _PWM16_2_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
07E1: 60 42    MOV   REG[0x42],A        (0237)    mov   reg[PWM16_2_COMPARE_LSB_REG], A
07E3: 5B       MOV   A,X                (0238)    mov   A, X
07E4: 60 46    MOV   REG[0x46],A        (0239)    mov   reg[PWM16_2_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
07E6: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_2_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_2_wReadPulseWidth:
                                        (0264) _PWM16_2_wReadPulseWidth:
                                        (0265)  wPWM16_2_ReadPulseWidth:                        ; this name deprecated
                                        (0266) _wPWM16_2_ReadPulseWidth:                        ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
07E7: 5D 46    MOV   A,REG[0x46]        (0268)    mov   A, reg[PWM16_2_COMPARE_MSB_REG]
07E9: 5C       MOV   X,A                (0269)    mov   X, A
07EA: 5D 42    MOV   A,REG[0x42]        (0270)    mov   A, reg[PWM16_2_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
07EC: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_2_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_2_wReadCounter:
                                        (0299) _PWM16_2_wReadCounter:
                                        (0300)  wPWM16_2_ReadCounter:                           ; this name deprecated
                                        (0301) _wPWM16_2_ReadCounter:                           ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
07ED: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
07EE: 5D 46    MOV   A,REG[0x46]        (0310)    mov   A, reg[PWM16_2_COMPARE_MSB_REG]         ; Save the Compare register on the stack
07F0: 08       PUSH  A                  (0311)    push  A                                          ;
07F1: 5D 42    MOV   A,REG[0x42]        (0312)    mov   A, reg[PWM16_2_COMPARE_LSB_REG]         ;
07F3: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
07F4: 41 43 FE AND   REG[0x43],0xFE     
07F7: 71 10    OR    F,0x10             
                                        (0314)    PWM16_2_Stop_M                                ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
07F9: 5D 41    MOV   A,REG[0x41]        (0316)    mov   A, reg[PWM16_2_INPUT_LSB_REG]           ; save the LSB clock input setting
07FB: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
07FC: 62 41 00 MOV   REG[0x41],0x0      (0319)    mov   reg[PWM16_2_INPUT_LSB_REG], INPUT_REG_NULL
07FF: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0801: 5D 44    MOV   A,REG[0x44]        (0321)    mov   A, reg[PWM16_2_COUNTER_MSB_REG]         ; DR2 <- DR0 (in the MSB block)
0803: 5D 46    MOV   A,REG[0x46]        (0322)    mov   A, reg[PWM16_2_COMPARE_MSB_REG]         ; Stash the Count MSB on the stack
0805: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0806: 5D 40    MOV   A,REG[0x40]        (0324)    mov   A, reg[PWM16_2_COUNTER_LSB_REG]         ; DR2 <- DR0 (in the LSB block)
0808: 5D 42    MOV   A,REG[0x42]        (0325)    mov   A, reg[PWM16_2_COMPARE_LSB_REG]         ; Stash the Count LSB on the stack
080A: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
080B: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
080D: 60 46    MOV   REG[0x46],A        (0328)    mov   reg[PWM16_2_COMPARE_MSB_REG], A         ;
080F: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0811: 60 42    MOV   REG[0x42],A        (0330)    mov   reg[PWM16_2_COMPARE_LSB_REG], A         ;
0813: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0815: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0817: 60 41    MOV   REG[0x41],A        (0333)    mov   reg[PWM16_2_INPUT_LSB_REG], A           ;    and restore it
0819: 70 EF    AND   F,0xEF             
081B: 43 43 01 OR    REG[0x43],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_2_Start_M                               ; Now re-enable the PWM function
081E: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
081F: 20       POP   X                  (0337)    pop   X                                          ;
0820: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0822: 70 3F    AND   F,0x3F             
0824: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0826: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_2.asm
FILE: lib\pwm16.asm                     (0001) ;;*****************************************************************************
0827: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_EnableInt
                                        (0030) export _PWM16_EnableInt
                                        (0031) export  PWM16_DisableInt
                                        (0032) export _PWM16_DisableInt
                                        (0033) export  PWM16_Start
                                        (0034) export _PWM16_Start
                                        (0035) export  PWM16_Stop
                                        (0036) export _PWM16_Stop
                                        (0037) export  PWM16_WritePeriod
                                        (0038) export _PWM16_WritePeriod
                                        (0039) export  PWM16_WritePulseWidth
                                        (0040) export _PWM16_WritePulseWidth
                                        (0041) export  PWM16_wReadPulseWidth
                                        (0042) export _PWM16_wReadPulseWidth
                                        (0043) export  PWM16_wReadCounter
                                        (0044) export _PWM16_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA spim_cam_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_EnableInt:
                                        (0091) _PWM16_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
082A: 7F       RET                      (0095)    ret
082B: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_DisableInt:
                                        (0119) _PWM16_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
082E: 7F       RET                      (0123)    ret
082F: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_Start:
                                        (0148) _PWM16_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0832: 7F       RET                      (0152)    ret
0833: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_Stop:
                                        (0176) _PWM16_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0836: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_WritePeriod:
                                        (0206) _PWM16_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0837: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM16_PERIOD_LSB_REG], A
0839: 5B       MOV   A,X                (0209)    mov   A, X
083A: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[PWM16_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
083C: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_WritePulseWidth:
                                        (0235) _PWM16_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
083D: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[PWM16_COMPARE_LSB_REG], A
083F: 5B       MOV   A,X                (0238)    mov   A, X
0840: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[PWM16_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0842: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_wReadPulseWidth:
                                        (0264) _PWM16_wReadPulseWidth:
                                        (0265)  wPWM16_ReadPulseWidth:                          ; this name deprecated
                                        (0266) _wPWM16_ReadPulseWidth:                          ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0843: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[PWM16_COMPARE_MSB_REG]
0845: 5C       MOV   X,A                (0269)    mov   X, A
0846: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[PWM16_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0848: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_wReadCounter:
                                        (0299) _PWM16_wReadCounter:
                                        (0300)  wPWM16_ReadCounter:                             ; this name deprecated
                                        (0301) _wPWM16_ReadCounter:                             ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0849: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
084A: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[PWM16_COMPARE_MSB_REG]           ; Save the Compare register on the stack
084C: 08       PUSH  A                  (0311)    push  A                                          ;
084D: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[PWM16_COMPARE_LSB_REG]           ;
084F: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0850: 41 23 FE AND   REG[0x23],0xFE     
0853: 71 10    OR    F,0x10             
                                        (0314)    PWM16_Stop_M                                  ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0855: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[PWM16_INPUT_LSB_REG]             ; save the LSB clock input setting
0857: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0858: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[PWM16_INPUT_LSB_REG], INPUT_REG_NULL
085B: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
085D: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[PWM16_COUNTER_MSB_REG]           ; DR2 <- DR0 (in the MSB block)
085F: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[PWM16_COMPARE_MSB_REG]           ; Stash the Count MSB on the stack
0861: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0862: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[PWM16_COUNTER_LSB_REG]           ; DR2 <- DR0 (in the LSB block)
0864: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[PWM16_COMPARE_LSB_REG]           ; Stash the Count LSB on the stack
0866: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0867: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0869: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[PWM16_COMPARE_MSB_REG], A           ;
086B: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
086D: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[PWM16_COMPARE_LSB_REG], A           ;
086F: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0871: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0873: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[PWM16_INPUT_LSB_REG], A             ;    and restore it
0875: 70 EF    AND   F,0xEF             
0877: 43 23 01 OR    REG[0x23],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_Start_M                                 ; Now re-enable the PWM function
087A: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
087B: 20       POP   X                  (0337)    pop   X                                          ;
087C: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
087E: 70 3F    AND   F,0x3F             
0880: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0882: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16.asm
FILE: lib\led.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_Start
                                        (0027) export  LED_Start
                                        (0028) 
                                        (0029) export _LED_Stop
                                        (0030) export  LED_Stop
                                        (0031) 
                                        (0032) export _LED_On
                                        (0033) export  LED_On
                                        (0034) 
                                        (0035) export _LED_Off
                                        (0036) export  LED_Off
                                        (0037) 
                                        (0038) export _LED_Switch
                                        (0039) export  LED_Switch
                                        (0040) 
                                        (0041) export _LED_Invert
                                        (0042) export  LED_Invert
                                        (0043) 
                                        (0044) export _LED_GetState
                                        (0045) export  LED_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_On:
                                        (0079)  LED_On:
0883: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0885: 80 03    JMP   _LED_Switch        (0081)    jmp  LED_Switch 
                                        (0082) 
                                        (0083) _LED_Start:
                                        (0084)  LED_Start:
                                        (0085) _LED_Stop:
                                        (0086)  LED_Stop:
                                        (0087) _LED_Off:
                                        (0088)  LED_Off:
0887: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0889: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _LED_Switch:
                                        (0092)  LED_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
088C: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
088E: A0 06    JZ    0x0895             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],LED_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0890: 26 00 FB AND   [0x0],0xFB         (0104)    and  [Port_1_Data_SHADE],~LED_PinMask
                                        (0105) ENDIF
0893: 80 04    JMP   0x0898             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~LED_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
0895: 2E 00 04 OR    [0x0],0x4          (0112)    or   [Port_1_Data_SHADE],LED_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0898: 51 00    MOV   A,[0x0]            (0116)    mov  A,[Port_1_Data_SHADE]
089A: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_PortDR],A
089C: 70 3F    AND   F,0x3F             
089E: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
08A0: 7F       RET                      (0121)    ret
08A1: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_Invert:
                                        (0144)  LED_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
08A4: 36 00 04 XOR   [0x0],0x4          (0149)    xor  [Port_1_Data_SHADE],LED_PinMask
08A7: 51 00    MOV   A,[0x0]            (0150)    mov  A,[Port_1_Data_SHADE]
08A9: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_PortDR],A
08AB: 70 3F    AND   F,0x3F             
08AD: 71 C0    OR    F,0xC0             
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
08AF: 7F       RET                      (0155)    ret
08B0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_GetState:
                                        (0177)  LED_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
08B3: 51 00    MOV   A,[0x0]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
08B5: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
08B6: 21 04    AND   A,0x4              (0188)    and   A,LED_PinMask                 ; Mask off the trash
08B8: A0 03    JZ    0x08BC             (0189)    jz    .End_LED_GS                   ; If zero, we're done
08BA: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
08BC: 70 3F    AND   F,0x3F             
08BE: 71 C0    OR    F,0xC0             
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
08C0: 7F       RET                      (0195)    ret
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
08C1: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
08C2: 10       PUSH  X                  (0209)     push  X
08C3: 28       ROMX                     (0210)     romx                               ; Get character from ROM
08C4: B0 04    JNZ   0x08C9             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
08C6: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
08C7: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
08C8: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
08C9: 90 44    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
08CB: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
08CC: 18       POP   A                  (0220)     pop   A
08CD: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
08CE: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
08D0: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
08D1: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
08E3: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
08E4: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
08E5: 67       ASR   A                  (0262)     asr   A
08E6: 67       ASR   A                  (0263)     asr   A
08E7: 67       ASR   A                  (0264)     asr   A
08E8: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
08EA: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
08EC: 90 21    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
08EE: 18       POP   A                  (0268)     pop   A                            ; Restore value
08EF: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
08F1: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
08F3: 90 1A    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
08F5: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
08F6: 4B       SWAP  A,X                (0305)     swap  A,X
08F7: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
08F9: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
08FA: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
08FC: 7F       RET                      (0310)     ret
08FD: 70 BF    AND   F,0xBF             
08FF: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0901: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0903: A0 06    JZ    0x090A             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0905: 90 08    CALL  LCD_WriteData|_LCD_Write_Data|_LCD_WriteData|LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0907: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0908: 8F F8    JMP   0x0901             (0351)     jmp   .Loop_PrString               ; Go get next character
090A: 70 3F    AND   F,0x3F             
090C: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
090E: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
090F: 90 65    CALL  0x0976             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0911: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0912: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0913: 67       ASR   A                  (0390)     asr   A
0914: 67       ASR   A                  (0391)     asr   A
0915: 67       ASR   A                  (0392)     asr   A
0916: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0918: 90 3B    CALL  0x0955             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
091A: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
091B: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
091D: 40       NOP                      (0397)     nop
091E: 40       NOP                      (0398)     nop
091F: 40       NOP                      (0399)     nop
0920: 90 33    CALL  0x0955             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0922: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0923: 90 51    CALL  0x0976             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0925: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0926: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0927: 67       ASR   A                  (0436)     asr   A
0928: 67       ASR   A                  (0437)     asr   A
0929: 67       ASR   A                  (0438)     asr   A
092A: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
092C: 90 09    CALL  0x0937             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
092E: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
092F: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0931: 40       NOP                      (0443)     nop
0932: 40       NOP                      (0444)     nop
0933: 40       NOP                      (0445)     nop
0934: 90 01    CALL  0x0937             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0936: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0937: 08       PUSH  A                  (0477)     push  A
0938: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
093B: 26 01 80 AND   [0x1],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
093E: 51 01    MOV   A,[0x1]            (0480)     mov   A,[Port_2_Data_SHADE]
0940: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0942: 18       POP   A                  (0483)     pop   A
0943: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0945: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0947: 2A 01    OR    A,[0x1]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0949: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
094B: 53 01    MOV   [0x1],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
094D: 40       NOP                      (0489)     nop
094E: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0950: 53 01    MOV   [0x1],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0952: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0954: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0955: 08       PUSH  A                  (0523)     push  A
0956: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0959: 26 01 80 AND   [0x1],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
095C: 2E 01 20 OR    [0x1],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
095F: 51 01    MOV   A,[0x1]            (0527)     mov   A,[Port_2_Data_SHADE]
0961: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0963: 18       POP   A                  (0530)     pop   A
0964: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0966: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0968: 2A 01    OR    A,[0x1]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
096A: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
096C: 53 01    MOV   [0x1],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
096E: 40       NOP                      (0536)     NOP
096F: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0971: 53 01    MOV   [0x1],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0973: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0975: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0976: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0977: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
097A: 26 01 80 AND   [0x1],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
097D: 51 01    MOV   A,[0x1]            (0574)     mov   A,[Port_2_Data_SHADE]
097F: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0981: 26 02 F0 AND   [0x2],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0984: 51 02    MOV   A,[0x2]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0986: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0988: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
098A: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
098C: 2E 01 40 OR    [0x1],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
098F: 51 01    MOV   A,[0x1]            (0584)     mov   A,[Port_2_Data_SHADE]
0991: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0993: 40       NOP                      (0586)     NOP
                                        (0587) 
0994: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0995: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0997: 2E 01 50 OR    [0x1],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
099A: 51 01    MOV   A,[0x1]            (0593)     mov   A,[Port_2_Data_SHADE]
099C: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
099E: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
099F: 40       NOP                      (0597)     nop
09A0: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
09A2: 08       PUSH  A                  (0610)     push  A
09A3: 26 01 C0 AND   [0x1],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
09A6: 51 01    MOV   A,[0x1]            (0612)     mov   A,[Port_2_Data_SHADE]
09A8: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
09AA: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
09AB: 40       NOP                      (0616)     nop                                    ; fastest PSoC
09AC: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
09AD: 2E 01 50 OR    [0x1],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
09B0: 51 01    MOV   A,[0x1]            (0620)     mov   A,[Port_2_Data_SHADE]
09B2: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
09B4: 40       NOP                      (0623)     nop
09B5: 40       NOP                      (0624)     nop
                                        (0625) 
09B6: 26 01 C0 AND   [0x1],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
09B9: 51 01    MOV   A,[0x1]            (0627)     mov   A,[Port_2_Data_SHADE]
09BB: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
09BD: 18       POP   A                  (0630)     pop   A
09BE: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
09C0: A0 04    JZ    0x09C5             (0633)     jz    .UNLOCK
09C2: 79       DEC   X                  (0634)     dec   X
09C3: BF D3    JNZ   0x0997             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
09C5: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
09C6: 2E 02 7F OR    [0x2],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
09C9: 51 02    MOV   A,[0x2]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
09CB: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
09CD: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
09CF: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
09D1: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
09D2: 7F       RET                      (0646)     ret
09D3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
09D6: 26 02 80 AND   [0x2],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
09D9: 2E 02 7F OR    [0x2],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
09DC: 26 03 80 AND   [0x3],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
09DF: 51 02    MOV   A,[0x2]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
09E1: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
09E3: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
09E5: 51 03    MOV   A,[0x3]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
09E7: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
09E9: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
09EB: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09ED: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
09EF: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09F1: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
09F3: 50 03    MOV   A,0x3              (0701)     mov   A,03h
09F5: 9F 40    CALL  0x0937             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
09F7: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
09F9: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
09FB: 50 03    MOV   A,0x3              (0707)     mov   A,03h
09FD: 9F 38    CALL  0x0937             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
09FF: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0A01: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0A03: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0A05: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0A07: 9F 2E    CALL  0x0937             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0A09: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A0B: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0A0D: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0A0F: 9F 26    CALL  0x0937             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0A11: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A13: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0A15: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0A17: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0A19: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A1B: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0A1D: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0A1F: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0A21: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A23: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0A25: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0A27: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0A29: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0A2B: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0A2D: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0A2F: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0A31: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0A33: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0A35: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0A37: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0A39: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0A3B: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0A3D: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A3F: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0A41: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0A46: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0A48: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0A49: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0A4B: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0A4C: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0A4E: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0A4F: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0A51: 70 3F    AND   F,0x3F             
0A53: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0A55: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0A56: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0A58: 78       DEC   A                  (0828)     dec   A
0A59: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0A5B: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0A64: 08       PUSH  A                  (0871)     push  A
0A65: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0A67: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0A69: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0A6B: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0A6D: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0A6F: D0 06    JNC   0x0A76             (0877)     jnc   .Delay50u_End
0A71: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0A73: 78       DEC   A                  (0880)     dec   A                              ; [4]
0A74: BF FE    JNZ   0x0A73             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0A76: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0A77: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: C:\Users\germa\Desktop\PROJET~1\PR80B3~1\TOUREL~1\TOUREL~1\affichage.c
(0001) /**
(0002)  * \file 		affichage.c
(0003)  * \brief 		Fonction d'affichage sur le LCD
(0004)  * \author 		Systendo
(0005)  * \version 	3.5
(0006)  * \date 		23 septembre 2016
(0007)  */
(0008) 
(0009) #include <m8c.h>
(0010) #include "PSoCAPI.h"
(0011) #include "affichage.h"
(0012) #include "const.h"
(0013) #include <stdio.h>
(0014) #include <stdlib.h>
(0015) #include <string.h>
(0016) 
(0017) /**
(0018)  * \void affichage(int signature_aff, int x_aff_gauche, int y_aff_gauche, int x_aff_droite, int y_aff_droite)
(0019)  * \brief Cette fonction affiche les données propres à l'objet sur le LCD.
(0020)  *
(0021)  * \param signature_aff, x_aff_gauche, int y_aff_gauche, x_aff_droite,y_aff_droite contiennent les différentes données de position, de taille et de signature de l'objet détecté.
(0022)  * \return Aucune donnée n'est retourné
(0023)  */
(0024) 
(0025) void affichage(	int signature_aff, 
(0026) 				int x_aff_gauche, 
(0027) 				int y_aff_gauche, 
(0028) 				int x_aff_droite,
(0029) 				int y_aff_droite)
(0030) {
__UserModules_end|__text_start|_affichage|_affichage:
  LCDStr               --> X+0
  y_aff_droite         --> X-13
  x_aff_droite         --> X-11
  y_aff_gauche         --> X-9
  x_aff_gauche         --> X-7
  signature_aff        --> X-5
    0A78: 10       PUSH  X
    0A79: 4F       MOV   X,SP
    0A7A: 38 02    ADD   SP,0x2
(0031) 	char *LCDStr;	
(0032) 	
(0033) 	csprintf(LCDStr, "S:%d", signature_aff);
    0A7C: 52 FB    MOV   A,[X-5]
    0A7E: 08       PUSH  A
    0A7F: 52 FC    MOV   A,[X-4]
    0A81: 08       PUSH  A
    0A82: 50 01    MOV   A,0x1
    0A84: 08       PUSH  A
    0A85: 50 AC    MOV   A,0xAC
    0A87: 08       PUSH  A
    0A88: 52 00    MOV   A,[X+0]
    0A8A: 08       PUSH  A
    0A8B: 52 01    MOV   A,[X+1]
    0A8D: 08       PUSH  A
    0A8E: 7C 1A 8D LCALL _csprintf
    0A91: 38 FA    ADD   SP,0xFA
(0034) 	LCD_Position(0,0);
    0A93: 10       PUSH  X
    0A94: 50 00    MOV   A,0x0
    0A96: 57 00    MOV   X,0x0
    0A98: 7C 0A 46 LCALL _LCD_Position
    0A9B: 20       POP   X
(0035) 	LCD_PrString(LCDStr);
    0A9C: 10       PUSH  X
    0A9D: 52 00    MOV   A,[X+0]
    0A9F: 08       PUSH  A
    0AA0: 52 01    MOV   A,[X+1]
    0AA2: 5C       MOV   X,A
    0AA3: 18       POP   A
    0AA4: 7C 08 FD LCALL _LCD_PrString
    0AA7: 20       POP   X
(0036) 	
(0037) 	if(signature_aff <= 10) LCD_PrCString(" ");
    0AA8: 50 0A    MOV   A,0xA
    0AAA: 13 FC    SUB   A,[X-4]
    0AAC: 52 FB    MOV   A,[X-5]
    0AAE: 31 80    XOR   A,0x80
    0AB0: 62 D0 00 MOV   REG[0xD0],0x0
    0AB3: 53 1F    MOV   [__rX],A
    0AB5: 50 80    MOV   A,0x80
    0AB7: 1A 1F    SBB   A,[__rX]
    0AB9: C0 0D    JC    0x0AC7
    0ABB: 10       PUSH  X
    0ABC: 50 01    MOV   A,0x1
    0ABE: 08       PUSH  A
    0ABF: 50 AA    MOV   A,0xAA
    0AC1: 5C       MOV   X,A
    0AC2: 18       POP   A
    0AC3: 7C 08 C1 LCALL _LCD_PrCString
    0AC6: 20       POP   X
(0038) 	if(signature_aff <= 100) LCD_PrCString(" ");
    0AC7: 50 64    MOV   A,0x64
    0AC9: 13 FC    SUB   A,[X-4]
    0ACB: 52 FB    MOV   A,[X-5]
    0ACD: 31 80    XOR   A,0x80
    0ACF: 62 D0 00 MOV   REG[0xD0],0x0
    0AD2: 53 1F    MOV   [__rX],A
    0AD4: 50 80    MOV   A,0x80
    0AD6: 1A 1F    SBB   A,[__rX]
    0AD8: C0 0D    JC    0x0AE6
    0ADA: 10       PUSH  X
    0ADB: 50 01    MOV   A,0x1
    0ADD: 08       PUSH  A
    0ADE: 50 AA    MOV   A,0xAA
    0AE0: 5C       MOV   X,A
    0AE1: 18       POP   A
    0AE2: 7C 08 C1 LCALL _LCD_PrCString
    0AE5: 20       POP   X
(0039) 	
(0040) 	csprintf(LCDStr, "X=%d", x_aff_gauche);
    0AE6: 52 F9    MOV   A,[X-7]
    0AE8: 08       PUSH  A
    0AE9: 52 FA    MOV   A,[X-6]
    0AEB: 08       PUSH  A
    0AEC: 50 01    MOV   A,0x1
    0AEE: 08       PUSH  A
    0AEF: 50 A5    MOV   A,0xA5
    0AF1: 08       PUSH  A
    0AF2: 52 00    MOV   A,[X+0]
    0AF4: 08       PUSH  A
    0AF5: 52 01    MOV   A,[X+1]
    0AF7: 08       PUSH  A
    0AF8: 7C 1A 8D LCALL _csprintf
    0AFB: 38 FA    ADD   SP,0xFA
(0041) 	LCD_Position(0,5);
    0AFD: 10       PUSH  X
    0AFE: 57 05    MOV   X,0x5
    0B00: 50 00    MOV   A,0x0
    0B02: 7C 0A 46 LCALL _LCD_Position
    0B05: 20       POP   X
(0042) 	LCD_PrString(LCDStr);
    0B06: 10       PUSH  X
    0B07: 52 00    MOV   A,[X+0]
    0B09: 08       PUSH  A
    0B0A: 52 01    MOV   A,[X+1]
    0B0C: 5C       MOV   X,A
    0B0D: 18       POP   A
    0B0E: 7C 08 FD LCALL _LCD_PrString
    0B11: 20       POP   X
(0043) 
(0044) 	if(x_aff_gauche <= 10) LCD_PrCString(" ");
    0B12: 50 0A    MOV   A,0xA
    0B14: 13 FA    SUB   A,[X-6]
    0B16: 52 F9    MOV   A,[X-7]
    0B18: 31 80    XOR   A,0x80
    0B1A: 62 D0 00 MOV   REG[0xD0],0x0
    0B1D: 53 1F    MOV   [__rX],A
    0B1F: 50 80    MOV   A,0x80
    0B21: 1A 1F    SBB   A,[__rX]
    0B23: C0 0D    JC    0x0B31
    0B25: 10       PUSH  X
    0B26: 50 01    MOV   A,0x1
    0B28: 08       PUSH  A
    0B29: 50 AA    MOV   A,0xAA
    0B2B: 5C       MOV   X,A
    0B2C: 18       POP   A
    0B2D: 7C 08 C1 LCALL _LCD_PrCString
    0B30: 20       POP   X
(0045) 	if(x_aff_gauche <= 100) LCD_PrCString(" ");
    0B31: 50 64    MOV   A,0x64
    0B33: 13 FA    SUB   A,[X-6]
    0B35: 52 F9    MOV   A,[X-7]
    0B37: 31 80    XOR   A,0x80
    0B39: 62 D0 00 MOV   REG[0xD0],0x0
    0B3C: 53 1F    MOV   [__rX],A
    0B3E: 50 80    MOV   A,0x80
    0B40: 1A 1F    SBB   A,[__rX]
    0B42: C0 0D    JC    0x0B50
    0B44: 10       PUSH  X
    0B45: 50 01    MOV   A,0x1
    0B47: 08       PUSH  A
    0B48: 50 AA    MOV   A,0xAA
    0B4A: 5C       MOV   X,A
    0B4B: 18       POP   A
    0B4C: 7C 08 C1 LCALL _LCD_PrCString
    0B4F: 20       POP   X
(0046) 	if(x_aff_gauche <= 1000) LCD_PrCString(" ");
    0B50: 50 E8    MOV   A,0xE8
    0B52: 13 FA    SUB   A,[X-6]
    0B54: 52 F9    MOV   A,[X-7]
    0B56: 31 80    XOR   A,0x80
    0B58: 62 D0 00 MOV   REG[0xD0],0x0
    0B5B: 53 1F    MOV   [__rX],A
    0B5D: 50 83    MOV   A,0x83
    0B5F: 1A 1F    SBB   A,[__rX]
    0B61: C0 0D    JC    0x0B6F
    0B63: 10       PUSH  X
    0B64: 50 01    MOV   A,0x1
    0B66: 08       PUSH  A
    0B67: 50 AA    MOV   A,0xAA
    0B69: 5C       MOV   X,A
    0B6A: 18       POP   A
    0B6B: 7C 08 C1 LCALL _LCD_PrCString
    0B6E: 20       POP   X
(0047) 	
(0048) 	csprintf(LCDStr, "Y=%d", y_aff_gauche);
    0B6F: 52 F7    MOV   A,[X-9]
    0B71: 08       PUSH  A
    0B72: 52 F8    MOV   A,[X-8]
    0B74: 08       PUSH  A
    0B75: 50 01    MOV   A,0x1
    0B77: 08       PUSH  A
    0B78: 50 A0    MOV   A,0xA0
    0B7A: 08       PUSH  A
    0B7B: 52 00    MOV   A,[X+0]
    0B7D: 08       PUSH  A
    0B7E: 52 01    MOV   A,[X+1]
    0B80: 08       PUSH  A
    0B81: 7C 1A 8D LCALL _csprintf
    0B84: 38 FA    ADD   SP,0xFA
(0049) 	LCD_Position(0,11);
    0B86: 10       PUSH  X
    0B87: 57 0B    MOV   X,0xB
    0B89: 50 00    MOV   A,0x0
    0B8B: 7C 0A 46 LCALL _LCD_Position
    0B8E: 20       POP   X
(0050) 	LCD_PrString(LCDStr);
    0B8F: 10       PUSH  X
    0B90: 52 00    MOV   A,[X+0]
    0B92: 08       PUSH  A
    0B93: 52 01    MOV   A,[X+1]
    0B95: 5C       MOV   X,A
    0B96: 18       POP   A
    0B97: 7C 08 FD LCALL _LCD_PrString
    0B9A: 20       POP   X
(0051) 
(0052) 	if(y_aff_gauche <= 10) LCD_PrCString(" ");
    0B9B: 50 0A    MOV   A,0xA
    0B9D: 13 F8    SUB   A,[X-8]
    0B9F: 52 F7    MOV   A,[X-9]
    0BA1: 31 80    XOR   A,0x80
    0BA3: 62 D0 00 MOV   REG[0xD0],0x0
    0BA6: 53 1F    MOV   [__rX],A
    0BA8: 50 80    MOV   A,0x80
    0BAA: 1A 1F    SBB   A,[__rX]
    0BAC: C0 0D    JC    0x0BBA
    0BAE: 10       PUSH  X
    0BAF: 50 01    MOV   A,0x1
    0BB1: 08       PUSH  A
    0BB2: 50 AA    MOV   A,0xAA
    0BB4: 5C       MOV   X,A
    0BB5: 18       POP   A
    0BB6: 7C 08 C1 LCALL _LCD_PrCString
    0BB9: 20       POP   X
(0053) 	if(y_aff_gauche <= 100) LCD_PrCString(" ");
    0BBA: 50 64    MOV   A,0x64
    0BBC: 13 F8    SUB   A,[X-8]
    0BBE: 52 F7    MOV   A,[X-9]
    0BC0: 31 80    XOR   A,0x80
    0BC2: 62 D0 00 MOV   REG[0xD0],0x0
    0BC5: 53 1F    MOV   [__rX],A
    0BC7: 50 80    MOV   A,0x80
    0BC9: 1A 1F    SBB   A,[__rX]
    0BCB: C0 0D    JC    0x0BD9
    0BCD: 10       PUSH  X
    0BCE: 50 01    MOV   A,0x1
    0BD0: 08       PUSH  A
    0BD1: 50 AA    MOV   A,0xAA
    0BD3: 5C       MOV   X,A
    0BD4: 18       POP   A
    0BD5: 7C 08 C1 LCALL _LCD_PrCString
    0BD8: 20       POP   X
(0054) 	if(y_aff_gauche <= 1000) LCD_PrCString(" ");
    0BD9: 50 E8    MOV   A,0xE8
    0BDB: 13 F8    SUB   A,[X-8]
    0BDD: 52 F7    MOV   A,[X-9]
    0BDF: 31 80    XOR   A,0x80
    0BE1: 62 D0 00 MOV   REG[0xD0],0x0
    0BE4: 53 1F    MOV   [__rX],A
    0BE6: 50 83    MOV   A,0x83
    0BE8: 1A 1F    SBB   A,[__rX]
    0BEA: C0 0D    JC    0x0BF8
    0BEC: 10       PUSH  X
    0BED: 50 01    MOV   A,0x1
    0BEF: 08       PUSH  A
    0BF0: 50 AA    MOV   A,0xAA
    0BF2: 5C       MOV   X,A
    0BF3: 18       POP   A
    0BF4: 7C 08 C1 LCALL _LCD_PrCString
    0BF7: 20       POP   X
(0055) 	
(0056) 	csprintf(LCDStr, "X=%d", x_aff_droite);
    0BF8: 52 F5    MOV   A,[X-11]
    0BFA: 08       PUSH  A
    0BFB: 52 F6    MOV   A,[X-10]
    0BFD: 08       PUSH  A
    0BFE: 50 01    MOV   A,0x1
    0C00: 08       PUSH  A
    0C01: 50 A5    MOV   A,0xA5
    0C03: 08       PUSH  A
    0C04: 52 00    MOV   A,[X+0]
    0C06: 08       PUSH  A
    0C07: 52 01    MOV   A,[X+1]
    0C09: 08       PUSH  A
    0C0A: 7C 1A 8D LCALL _csprintf
    0C0D: 38 FA    ADD   SP,0xFA
(0057) 	LCD_Position(1,5);
    0C0F: 10       PUSH  X
    0C10: 57 05    MOV   X,0x5
    0C12: 50 01    MOV   A,0x1
    0C14: 7C 0A 46 LCALL _LCD_Position
    0C17: 20       POP   X
(0058) 	LCD_PrString(LCDStr);
    0C18: 10       PUSH  X
    0C19: 52 00    MOV   A,[X+0]
    0C1B: 08       PUSH  A
    0C1C: 52 01    MOV   A,[X+1]
    0C1E: 5C       MOV   X,A
    0C1F: 18       POP   A
    0C20: 7C 08 FD LCALL _LCD_PrString
    0C23: 20       POP   X
(0059) 	
(0060) 	if(x_aff_droite <= 10) LCD_PrCString(" ");
    0C24: 50 0A    MOV   A,0xA
    0C26: 13 F6    SUB   A,[X-10]
    0C28: 52 F5    MOV   A,[X-11]
    0C2A: 31 80    XOR   A,0x80
    0C2C: 62 D0 00 MOV   REG[0xD0],0x0
    0C2F: 53 1F    MOV   [__rX],A
    0C31: 50 80    MOV   A,0x80
    0C33: 1A 1F    SBB   A,[__rX]
    0C35: C0 0D    JC    0x0C43
    0C37: 10       PUSH  X
    0C38: 50 01    MOV   A,0x1
    0C3A: 08       PUSH  A
    0C3B: 50 AA    MOV   A,0xAA
    0C3D: 5C       MOV   X,A
    0C3E: 18       POP   A
    0C3F: 7C 08 C1 LCALL _LCD_PrCString
    0C42: 20       POP   X
(0061) 	if(x_aff_droite <= 100) LCD_PrCString(" ");
    0C43: 50 64    MOV   A,0x64
    0C45: 13 F6    SUB   A,[X-10]
    0C47: 52 F5    MOV   A,[X-11]
    0C49: 31 80    XOR   A,0x80
    0C4B: 62 D0 00 MOV   REG[0xD0],0x0
    0C4E: 53 1F    MOV   [__rX],A
    0C50: 50 80    MOV   A,0x80
    0C52: 1A 1F    SBB   A,[__rX]
    0C54: C0 0D    JC    0x0C62
    0C56: 10       PUSH  X
    0C57: 50 01    MOV   A,0x1
    0C59: 08       PUSH  A
    0C5A: 50 AA    MOV   A,0xAA
    0C5C: 5C       MOV   X,A
    0C5D: 18       POP   A
    0C5E: 7C 08 C1 LCALL _LCD_PrCString
    0C61: 20       POP   X
(0062) 	if(x_aff_droite <= 1000) LCD_PrCString(" ");
    0C62: 50 E8    MOV   A,0xE8
    0C64: 13 F6    SUB   A,[X-10]
    0C66: 52 F5    MOV   A,[X-11]
    0C68: 31 80    XOR   A,0x80
    0C6A: 62 D0 00 MOV   REG[0xD0],0x0
    0C6D: 53 1F    MOV   [__rX],A
    0C6F: 50 83    MOV   A,0x83
    0C71: 1A 1F    SBB   A,[__rX]
    0C73: C0 0D    JC    0x0C81
    0C75: 10       PUSH  X
    0C76: 50 01    MOV   A,0x1
    0C78: 08       PUSH  A
    0C79: 50 AA    MOV   A,0xAA
    0C7B: 5C       MOV   X,A
    0C7C: 18       POP   A
    0C7D: 7C 08 C1 LCALL _LCD_PrCString
    0C80: 20       POP   X
(0063) 	
(0064) 	csprintf(LCDStr, "Y=%d", y_aff_droite);
    0C81: 52 F3    MOV   A,[X-13]
    0C83: 08       PUSH  A
    0C84: 52 F4    MOV   A,[X-12]
    0C86: 08       PUSH  A
    0C87: 50 01    MOV   A,0x1
    0C89: 08       PUSH  A
    0C8A: 50 A0    MOV   A,0xA0
    0C8C: 08       PUSH  A
    0C8D: 52 00    MOV   A,[X+0]
    0C8F: 08       PUSH  A
    0C90: 52 01    MOV   A,[X+1]
    0C92: 08       PUSH  A
    0C93: 7C 1A 8D LCALL _csprintf
    0C96: 38 FA    ADD   SP,0xFA
(0065) 	LCD_Position(1,11);
    0C98: 10       PUSH  X
    0C99: 57 0B    MOV   X,0xB
    0C9B: 50 01    MOV   A,0x1
    0C9D: 7C 0A 46 LCALL _LCD_Position
    0CA0: 20       POP   X
(0066) 	LCD_PrString(LCDStr);			
    0CA1: 10       PUSH  X
    0CA2: 52 00    MOV   A,[X+0]
    0CA4: 08       PUSH  A
    0CA5: 52 01    MOV   A,[X+1]
    0CA7: 5C       MOV   X,A
    0CA8: 18       POP   A
    0CA9: 7C 08 FD LCALL _LCD_PrString
    0CAC: 20       POP   X
(0067) 
(0068) 	if(y_aff_droite <= 10) LCD_PrCString(" ");
    0CAD: 50 0A    MOV   A,0xA
    0CAF: 13 F4    SUB   A,[X-12]
    0CB1: 52 F3    MOV   A,[X-13]
    0CB3: 31 80    XOR   A,0x80
    0CB5: 62 D0 00 MOV   REG[0xD0],0x0
    0CB8: 53 1F    MOV   [__rX],A
    0CBA: 50 80    MOV   A,0x80
    0CBC: 1A 1F    SBB   A,[__rX]
    0CBE: C0 0D    JC    0x0CCC
    0CC0: 10       PUSH  X
    0CC1: 50 01    MOV   A,0x1
    0CC3: 08       PUSH  A
    0CC4: 50 AA    MOV   A,0xAA
    0CC6: 5C       MOV   X,A
    0CC7: 18       POP   A
    0CC8: 7C 08 C1 LCALL _LCD_PrCString
    0CCB: 20       POP   X
(0069) 	if(y_aff_droite <= 100) LCD_PrCString(" ");
    0CCC: 50 64    MOV   A,0x64
    0CCE: 13 F4    SUB   A,[X-12]
    0CD0: 52 F3    MOV   A,[X-13]
    0CD2: 31 80    XOR   A,0x80
    0CD4: 62 D0 00 MOV   REG[0xD0],0x0
    0CD7: 53 1F    MOV   [__rX],A
    0CD9: 50 80    MOV   A,0x80
    0CDB: 1A 1F    SBB   A,[__rX]
    0CDD: C0 0D    JC    0x0CEB
    0CDF: 10       PUSH  X
    0CE0: 50 01    MOV   A,0x1
    0CE2: 08       PUSH  A
    0CE3: 50 AA    MOV   A,0xAA
    0CE5: 5C       MOV   X,A
    0CE6: 18       POP   A
    0CE7: 7C 08 C1 LCALL _LCD_PrCString
    0CEA: 20       POP   X
(0070) 	if(y_aff_droite <= 1000) LCD_PrCString(" ");
    0CEB: 50 E8    MOV   A,0xE8
    0CED: 13 F4    SUB   A,[X-12]
    0CEF: 52 F3    MOV   A,[X-13]
    0CF1: 31 80    XOR   A,0x80
    0CF3: 62 D0 00 MOV   REG[0xD0],0x0
    0CF6: 53 1F    MOV   [__rX],A
    0CF8: 50 83    MOV   A,0x83
    0CFA: 1A 1F    SBB   A,[__rX]
    0CFC: C0 0D    JC    0x0D0A
    0CFE: 10       PUSH  X
    0CFF: 50 01    MOV   A,0x1
    0D01: 08       PUSH  A
    0D02: 50 AA    MOV   A,0xAA
    0D04: 5C       MOV   X,A
    0D05: 18       POP   A
    0D06: 7C 08 C1 LCALL _LCD_PrCString
    0D09: 20       POP   X
(0071) 	
(0072) 	return;
    0D0A: 38 FE    ADD   SP,0xFE
    0D0C: 20       POP   X
    0D0D: 7F       RET   
FILE: C:\Users\germa\Desktop\PROJET~1\PR80B3~1\TOUREL~1\TOUREL~1\camdroite.c
(0001) /**
(0002)  * \file 		camdroite.c
(0003)  * \brief 		Fonctions utilisant le SPIM lié à la caméra droite
(0004)  * \author 		Systendo
(0005)  * \version 	3.5
(0006)  * \date 		23 septembre 2016
(0007)  */
(0008) 
(0009) #include <m8c.h>
(0010) #include "PSoCAPI.h"
(0011) #include "camdroite.h"
(0012) #include "const.h"
(0013) 
(0014) /**
(0015)  * \fn 		static BYTE getByte_CamDroite(char out)
(0016)  * \brief 	Fonction d'envoi et de réception de 8 bits de data entre la PixyCam de droite et le Psoc.
(0017)  *
(0018)  * \param 	out qui contient les 8 bits de data à envoyer à la PixyCam de droite.
(0019)  * \return 	Data_Read qui contient les 8 bits de data envoyés par la PixyCam de droite.
(0020)  */
(0021) 
(0022) BYTE getByte_CamDroite(char out)
(0023) {
_getByte_CamDroite:
  Data_Read            --> X+0
  out                  --> X-4
    0D0E: 10       PUSH  X
    0D0F: 4F       MOV   X,SP
    0D10: 38 01    ADD   SP,0x1
(0024) 	char Data_Read = 0;
    0D12: 56 00 00 MOV   [X+0],0x0
(0025) 	SPIM_CamDroite_SendTxData(out);
    0D15: 10       PUSH  X
    0D16: 52 FC    MOV   A,[X-4]
    0D18: 7C 07 C0 LCALL _SPIM_CamDroite_SendTxData
    0D1B: 20       POP   X
(0026) 	while (!(SPIM_CamDroite_bReadStatus() && SPIM_CamDroite_SPIM_SPI_COMPLETE)){};
    0D1C: 10       PUSH  X
    0D1D: 7C 07 C6 LCALL _bSPIM_CamDroite_ReadStatus|_SPIM_CamDroite_bReadStatus|SPIM_CamDroite_bReadStatus
    0D20: 20       POP   X
    0D21: 62 D0 00 MOV   REG[0xD0],0x0
    0D24: 39 00    CMP   A,0x0
    0D26: AF F5    JZ    0x0D1C
(0027) 	Data_Read = SPIM_CamDroite_bReadRxData();
    0D28: 10       PUSH  X
    0D29: 7C 07 C3 LCALL bSPIM_CamDroite_ReadRxData|SPIM_CamDroite_bReadRxData|_bSPIM_CamDroite_ReadRxData|_SPIM_CamDroite_bReadRxData
    0D2C: 20       POP   X
    0D2D: 62 D0 00 MOV   REG[0xD0],0x0
    0D30: 54 00    MOV   [X+0],A
(0028) 	return (Data_Read);
    0D32: 52 00    MOV   A,[X+0]
    0D34: 38 FF    ADD   SP,0xFF
    0D36: 20       POP   X
    0D37: 7F       RET   
(0029) }
(0030) 
(0031) 
(0032) /**
(0033)  * \fn 		static short getWord_CamDroite(void)
(0034)  * \brief 	Fonction qui réceptionne deux datas sur 8bits provenant de la PixyCam de droite et les fusionne pour retourner une data de 16 bits.
(0035)  *  		L'ordre d'envoi des octets est en big endian donc pas d'inversion nécessaire.
(0036)  * \param 	aucun paramètre en entrée.
(0037)  * \return 	w qui contient 16 bits de donnée provenant de la PixyCam de droite.
(0038)  */
(0039) 
(0040) int getWord_CamDroite(void)
(0041) {
_getWord_CamDroite:
  cout                 --> X+3
  c                    --> X+2
  w                    --> X+0
    0D38: 10       PUSH  X
    0D39: 4F       MOV   X,SP
    0D3A: 38 04    ADD   SP,0x4
(0042) 	int w;
(0043) 	char c, cout = 0;
    0D3C: 56 03 00 MOV   [X+3],0x0
(0044) 
(0045) 	w = getByte_CamDroite(PIXY_SYNC_BYTE);	/// envoie un BYTE de synchronisation
    0D3F: 50 5A    MOV   A,0x5A
    0D41: 08       PUSH  A
    0D42: 9F CA    CALL  _getByte_CamDroite
    0D44: 62 D0 00 MOV   REG[0xD0],0x0
    0D47: 54 01    MOV   [X+1],A
    0D49: 56 00 00 MOV   [X+0],0x0
(0046) 
(0047) 	w <<= 8;
    0D4C: 52 01    MOV   A,[X+1]
    0D4E: 54 00    MOV   [X+0],A
    0D50: 56 01 00 MOV   [X+1],0x0
(0048) 	c = getByte_CamDroite(cout);			/// envoie un BYTE de data 
    0D53: 52 03    MOV   A,[X+3]
    0D55: 08       PUSH  A
    0D56: 9F B6    CALL  _getByte_CamDroite
    0D58: 38 FE    ADD   SP,0xFE
    0D5A: 62 D0 00 MOV   REG[0xD0],0x0
    0D5D: 54 02    MOV   [X+2],A
(0049) 	w |= c;
    0D5F: 52 02    MOV   A,[X+2]
    0D61: 2D 01    OR    [X+1],A
(0050) 
(0051) 	return w;
    0D63: 52 01    MOV   A,[X+1]
    0D65: 53 24    MOV   [__r1],A
    0D67: 52 00    MOV   A,[X+0]
    0D69: 53 25    MOV   [__r0],A
    0D6B: 38 FC    ADD   SP,0xFC
    0D6D: 20       POP   X
    0D6E: 7F       RET   
(0052) }
(0053) /**
(0054)  * \fn 		int getStart_CamDroite(void)
(0055)  * \brief 	Fonction qui détecte le début de la transmission d'une série de données par la PixyCam de droite.
(0056)  * 			Le début d'une série de données est indiqué par l'envoi de deux BYTES pouvant prendre les valeurs AA55 ou AA56.
(0057)  *			La combinaison obtenue annonce le type de donnée qui va être transmise ( aa55 aa55 : Normal et aa55 aa56 : Couleur)
(0058)  *
(0059)  * \param 	aucun paramètre en entrée.
(0060)  * \return 	1 si des mots de départ sont reçus, retourne 0 sinon.
(0061)  */
(0062) 
(0063) int getStart_CamDroite(void)
(0064) {
_getStart_CamDroite:
  lastw                --> X+2
  w                    --> X+0
    0D6F: 10       PUSH  X
    0D70: 4F       MOV   X,SP
    0D71: 38 04    ADD   SP,0x4
(0065) 	int w, lastw;
(0066) 
(0067) 	lastw = 0xffff;
    0D73: 56 03 FF MOV   [X+3],0xFF
    0D76: 56 02 FF MOV   [X+2],0xFF
    0D79: 80 87    JMP   0x0E01
(0068) 
(0069) 	while(1)
(0070) 	{
(0071) 		w = getWord_CamDroite();
    0D7B: 9F BB    CALL  _getWord_CamDroite
    0D7D: 62 D0 00 MOV   REG[0xD0],0x0
    0D80: 51 24    MOV   A,[__r1]
    0D82: 54 01    MOV   [X+1],A
    0D84: 51 25    MOV   A,[__r0]
    0D86: 54 00    MOV   [X+0],A
(0072) 		
(0073) 		if (w==0 && lastw==0) return 0; 							/// Pas de mot de départ 
    0D88: 3D 00 00 CMP   [X+0],0x0
    0D8B: B0 1B    JNZ   0x0DA7
    0D8D: 3D 01 00 CMP   [X+1],0x0
    0D90: B0 16    JNZ   0x0DA7
    0D92: 3D 02 00 CMP   [X+2],0x0
    0D95: B0 11    JNZ   0x0DA7
    0D97: 3D 03 00 CMP   [X+3],0x0
    0D9A: B0 0C    JNZ   0x0DA7
    0D9C: 62 D0 00 MOV   REG[0xD0],0x0
    0D9F: 55 24 00 MOV   [__r1],0x0
    0DA2: 55 25 00 MOV   [__r0],0x0
    0DA5: 80 5D    JMP   0x0E03
(0074) 		else if (w==PIXY_START_WORD && lastw==PIXY_START_WORD)  
    0DA7: 3D 00 AA CMP   [X+0],0xAA
    0DAA: B0 1B    JNZ   0x0DC6
    0DAC: 3D 01 55 CMP   [X+1],0x55
    0DAF: B0 16    JNZ   0x0DC6
    0DB1: 3D 02 AA CMP   [X+2],0xAA
    0DB4: B0 11    JNZ   0x0DC6
    0DB6: 3D 03 55 CMP   [X+3],0x55
    0DB9: B0 0C    JNZ   0x0DC6
(0075) 		{
(0076) 			return 1; 												/// Mots de départ trouvés, aa55 et aa55 : annonce la transmission de données normales
    0DBB: 62 D0 00 MOV   REG[0xD0],0x0
    0DBE: 55 24 01 MOV   [__r1],0x1
    0DC1: 55 25 00 MOV   [__r0],0x0
    0DC4: 80 3E    JMP   0x0E03
(0077) 		}
(0078) 		else if (w==PIXY_START_WORD_CC && lastw==PIXY_START_WORD)
    0DC6: 3D 00 AA CMP   [X+0],0xAA
    0DC9: B0 1B    JNZ   0x0DE5
    0DCB: 3D 01 56 CMP   [X+1],0x56
    0DCE: B0 16    JNZ   0x0DE5
    0DD0: 3D 02 AA CMP   [X+2],0xAA
    0DD3: B0 11    JNZ   0x0DE5
    0DD5: 3D 03 55 CMP   [X+3],0x55
    0DD8: B0 0C    JNZ   0x0DE5
(0079) 		{
(0080) 			return 1; /// Mots de départ aa55 aa56 trouvés : annonce la transmission de données couleurs
    0DDA: 62 D0 00 MOV   REG[0xD0],0x0
    0DDD: 55 24 01 MOV   [__r1],0x1
    0DE0: 55 25 00 MOV   [__r0],0x0
    0DE3: 80 1F    JMP   0x0E03
(0081) 		}    
(0082) 	
(0083) 		else if (w==PIXY_START_WORDX) getByte_CamDroite(0); 		/// On est plus synchronisé, renvoie 0 
    0DE5: 3D 00 55 CMP   [X+0],0x55
    0DE8: B0 10    JNZ   0x0DF9
    0DEA: 3D 01 AA CMP   [X+1],0xAA
    0DED: B0 0B    JNZ   0x0DF9
    0DEF: 50 00    MOV   A,0x0
    0DF1: 08       PUSH  A
    0DF2: 9F 1A    CALL  _getByte_CamDroite
    0DF4: 38 FF    ADD   SP,0xFF
    0DF6: 62 D0 00 MOV   REG[0xD0],0x0
(0084) 	
(0085) 		lastw = w; 
    0DF9: 52 01    MOV   A,[X+1]
    0DFB: 54 03    MOV   [X+3],A
    0DFD: 52 00    MOV   A,[X+0]
    0DFF: 54 02    MOV   [X+2],A
(0086) 	}
    0E01: 8F 79    JMP   0x0D7B
(0087) 
(0088) 	return 0;
(0089) 
(0090) }
FILE: C:\Users\germa\Desktop\PROJET~1\PR80B3~1\TOUREL~1\TOUREL~1\camgauche.c
(0001) /**
(0002)  * \file 		camgauche.c
(0003)  * \brief 		Fonctions utilisant le SPIM lié à la caméra gauche
(0004)  * \author 		Systendo
(0005)  * \version 	3.5
(0006)  * \date 		23 septembre 2016
(0007)  */
(0008) 
(0009) #include <m8c.h>
(0010) #include "PSoCAPI.h"
(0011) #include "camgauche.h"
(0012) #include "const.h"
(0013) 
(0014) /**
(0015)  * \fn 		static BYTE getByte_CamGauche(char out)
(0016)  * \brief 	Fonction d'envoi et de réception de 8 bits de data entre la PixyCam de gauche et le Psoc.
(0017)  *
(0018)  * \param 	out qui contient les 8 bits de data à envoyer à la PixyCam de gauche.
(0019)  * \return 	Data_Read qui contient les 8 bits de data envoyés par la PixyCam de gauche.
(0020)  */
(0021) 
(0022) BYTE getByte_CamGauche(char out)
(0023) {
_getByte_CamGauche:
  Data_Read            --> X+0
  out                  --> X-4
    0E07: 10       PUSH  X
    0E08: 4F       MOV   X,SP
    0E09: 38 01    ADD   SP,0x1
(0024) 	char Data_Read = 0;
    0E0B: 56 00 00 MOV   [X+0],0x0
(0025) 	SPIM_CamGauche_SendTxData(out);
    0E0E: 10       PUSH  X
    0E0F: 52 FC    MOV   A,[X-4]
    0E11: 7C 07 A5 LCALL _SPIM_CamGauche_SendTxData
    0E14: 20       POP   X
(0026) 	while (!(SPIM_CamGauche_bReadStatus() && SPIM_CamGauche_SPIM_SPI_COMPLETE)){};
    0E15: 10       PUSH  X
    0E16: 7C 07 AB LCALL SPIM_CamGauche_bReadStatus|bSPIM_CamGauche_ReadStatus|_SPIM_CamGauche_bReadStatus|_bSPIM_CamGauche_ReadStatus
    0E19: 20       POP   X
    0E1A: 62 D0 00 MOV   REG[0xD0],0x0
    0E1D: 39 00    CMP   A,0x0
    0E1F: AF F5    JZ    0x0E15
(0027) 	Data_Read = SPIM_CamGauche_bReadRxData();
    0E21: 10       PUSH  X
    0E22: 7C 07 A8 LCALL SPIM_CamGauche_bReadRxData|bSPIM_CamGauche_ReadRxData|_SPIM_CamGauche_bReadRxData|_bSPIM_CamGauche_ReadRxData
    0E25: 20       POP   X
    0E26: 62 D0 00 MOV   REG[0xD0],0x0
    0E29: 54 00    MOV   [X+0],A
(0028) 	return (Data_Read);
    0E2B: 52 00    MOV   A,[X+0]
    0E2D: 38 FF    ADD   SP,0xFF
    0E2F: 20       POP   X
    0E30: 7F       RET   
(0029) }
(0030) 
(0031) /**
(0032)  * \fn 		static short getWord_CamGauche(void)
(0033)  * \brief 	Fonction qui réceptionne deux datas sur 8bits provenant de la PixyCam de gauche et les fusionne pour retourner une data de 16 bits.
(0034)  *  		L'ordre d'envoi des octets est en big endian donc pas d'inversion nécessaire.
(0035)  * \param 	aucun paramètre en entrée.
(0036)  * \return 	w qui contient 16 bits de donnée provenant de la PixyCam de gauche.
(0037)  */
(0038) 
(0039) int getWord_CamGauche(void)
(0040) { 
_getWord_CamGauche:
  cout                 --> X+3
  c                    --> X+2
  w                    --> X+0
    0E31: 10       PUSH  X
    0E32: 4F       MOV   X,SP
    0E33: 38 04    ADD   SP,0x4
(0041) 	int w;
(0042) 	char c, cout = 0;
    0E35: 56 03 00 MOV   [X+3],0x0
(0043) 
(0044) 	w = getByte_CamGauche(PIXY_SYNC_BYTE); /// envoie un BYTE de synchronisation 
    0E38: 50 5A    MOV   A,0x5A
    0E3A: 08       PUSH  A
    0E3B: 9F CA    CALL  _getByte_CamGauche
    0E3D: 62 D0 00 MOV   REG[0xD0],0x0
    0E40: 54 01    MOV   [X+1],A
    0E42: 56 00 00 MOV   [X+0],0x0
(0045) 
(0046) 	w <<= 8;
    0E45: 52 01    MOV   A,[X+1]
    0E47: 54 00    MOV   [X+0],A
    0E49: 56 01 00 MOV   [X+1],0x0
(0047) 	c = getByte_CamGauche(cout); 		   /// envoie un BYTE de data 
    0E4C: 52 03    MOV   A,[X+3]
    0E4E: 08       PUSH  A
    0E4F: 9F B6    CALL  _getByte_CamGauche
    0E51: 38 FE    ADD   SP,0xFE
    0E53: 62 D0 00 MOV   REG[0xD0],0x0
    0E56: 54 02    MOV   [X+2],A
(0048) 	w |= c;
    0E58: 52 02    MOV   A,[X+2]
    0E5A: 2D 01    OR    [X+1],A
(0049) 
(0050) 	return w;
    0E5C: 52 01    MOV   A,[X+1]
    0E5E: 53 24    MOV   [__r1],A
    0E60: 52 00    MOV   A,[X+0]
    0E62: 53 25    MOV   [__r0],A
    0E64: 38 FC    ADD   SP,0xFC
    0E66: 20       POP   X
    0E67: 7F       RET   
(0051) }
(0052) 
(0053) /**
(0054)  * \fn 		int getStart_CamGauche(void)
(0055)  * \brief 	Fonction qui détecte le début de la transmission d'une série de données par la PixyCam de gauche.
(0056)  * 			Le début d'une série de données est indiqué par l'envoi de deux bytes pouvant prendre les valeurs aa55 ou aa56.
(0057)  * 			La combinaison obtenue annonce le type de donnée qui va être transmise ( aa55 aa55 : Normal et aa55 aa56 : Couleur)
(0058)  *
(0059)  * \param 	aucun paramètre en entrée.
(0060)  * \return 	1 si des mots de départ sont reçus, retourne 0 sinon.
(0061)  */
(0062) 
(0063) int getStart_CamGauche(void)
(0064) {
_getStart_CamGauche:
  lastw                --> X+2
  w                    --> X+0
    0E68: 10       PUSH  X
    0E69: 4F       MOV   X,SP
    0E6A: 38 04    ADD   SP,0x4
(0065) 	int w, lastw;
(0066) 
(0067) 	lastw = 0xffff;
    0E6C: 56 03 FF MOV   [X+3],0xFF
    0E6F: 56 02 FF MOV   [X+2],0xFF
    0E72: 80 87    JMP   0x0EFA
(0068) 
(0069) 	while(1)
(0070) 	{
(0071) 		w = getWord_CamGauche();
    0E74: 9F BB    CALL  _getWord_CamGauche
    0E76: 62 D0 00 MOV   REG[0xD0],0x0
    0E79: 51 24    MOV   A,[__r1]
    0E7B: 54 01    MOV   [X+1],A
    0E7D: 51 25    MOV   A,[__r0]
    0E7F: 54 00    MOV   [X+0],A
(0072) 		
(0073) 		if (w==0 && lastw==0)
    0E81: 3D 00 00 CMP   [X+0],0x0
    0E84: B0 1B    JNZ   0x0EA0
    0E86: 3D 01 00 CMP   [X+1],0x0
    0E89: B0 16    JNZ   0x0EA0
    0E8B: 3D 02 00 CMP   [X+2],0x0
    0E8E: B0 11    JNZ   0x0EA0
    0E90: 3D 03 00 CMP   [X+3],0x0
    0E93: B0 0C    JNZ   0x0EA0
(0074) 		  return 0; 											 /// Pas de mot de départ
    0E95: 62 D0 00 MOV   REG[0xD0],0x0
    0E98: 55 24 00 MOV   [__r1],0x0
    0E9B: 55 25 00 MOV   [__r0],0x0
    0E9E: 80 5D    JMP   0x0EFC
(0075) 		else if (w==PIXY_START_WORD && lastw==PIXY_START_WORD)
    0EA0: 3D 00 AA CMP   [X+0],0xAA
    0EA3: B0 1B    JNZ   0x0EBF
    0EA5: 3D 01 55 CMP   [X+1],0x55
    0EA8: B0 16    JNZ   0x0EBF
    0EAA: 3D 02 AA CMP   [X+2],0xAA
    0EAD: B0 11    JNZ   0x0EBF
    0EAF: 3D 03 55 CMP   [X+3],0x55
    0EB2: B0 0C    JNZ   0x0EBF
(0076) 		{
(0077) 			return 1;											 /// Mots de départ trouvés, aa55 et aa55 : annonce la transmission de données normales
    0EB4: 62 D0 00 MOV   REG[0xD0],0x0
    0EB7: 55 24 01 MOV   [__r1],0x1
    0EBA: 55 25 00 MOV   [__r0],0x0
    0EBD: 80 3E    JMP   0x0EFC
(0078) 		}
(0079) 		else if (w==PIXY_START_WORD_CC && lastw==PIXY_START_WORD)/// Mots de départ aa55 aa56 trouvés : annonce la transmission de données couleurs
    0EBF: 3D 00 AA CMP   [X+0],0xAA
    0EC2: B0 1B    JNZ   0x0EDE
    0EC4: 3D 01 56 CMP   [X+1],0x56
    0EC7: B0 16    JNZ   0x0EDE
    0EC9: 3D 02 AA CMP   [X+2],0xAA
    0ECC: B0 11    JNZ   0x0EDE
    0ECE: 3D 03 55 CMP   [X+3],0x55
    0ED1: B0 0C    JNZ   0x0EDE
(0080) 		{							 
(0081) 			return 1;
    0ED3: 62 D0 00 MOV   REG[0xD0],0x0
    0ED6: 55 24 01 MOV   [__r1],0x1
    0ED9: 55 25 00 MOV   [__r0],0x0
    0EDC: 80 1F    JMP   0x0EFC
(0082) 		}    
(0083) 	
(0084) 	else if (w==PIXY_START_WORDX) getByte_CamGauche(0); 		 /// On est plus synchronisé, renvoie 0 
    0EDE: 3D 00 55 CMP   [X+0],0x55
    0EE1: B0 10    JNZ   0x0EF2
    0EE3: 3D 01 AA CMP   [X+1],0xAA
    0EE6: B0 0B    JNZ   0x0EF2
    0EE8: 50 00    MOV   A,0x0
    0EEA: 08       PUSH  A
    0EEB: 9F 1A    CALL  _getByte_CamGauche
    0EED: 38 FF    ADD   SP,0xFF
    0EEF: 62 D0 00 MOV   REG[0xD0],0x0
(0085) 	
(0086) 	lastw = w; 
    0EF2: 52 01    MOV   A,[X+1]
    0EF4: 54 03    MOV   [X+3],A
    0EF6: 52 00    MOV   A,[X+0]
    0EF8: 54 02    MOV   [X+2],A
(0087) 	}
    0EFA: 8F 79    JMP   0x0E74
(0088) 	
(0089) 	return 0;
(0090) }FILE: C:\Users\germa\Desktop\PROJET~1\PR80B3~1\TOUREL~1\TOUREL~1\initialisationblock.c
(0001) #include <m8c.h>
(0002) #include "PSoCAPI.h"
(0003) #include "const.h"
(0004) #include "camgauche.h"
(0005) #include "camdroite.h"
(0006) 
(0007) /**
(0008)  * \fn 		Block InitialisationBlock(Block block)
(0009)  * \brief 	Initialise les différentes variables d'une structure Block à 0.
(0010)  * \param	block est la structure Block à initialiser
(0011)  * \return 	Retourne le Block modifié
(0012)  */
(0013) 
(0014) Block InitialisationBlock(Block block){
_InitialisationBlock:
  block                --> X-7
    0F00: 10       PUSH  X
    0F01: 4F       MOV   X,SP
(0015) 	block.checksum = 0;
    0F02: 62 D0 00 MOV   REG[0xD0],0x0
    0F05: 52 FA    MOV   A,[X-6]
    0F07: 01 02    ADD   A,0x2
    0F09: 53 24    MOV   [__r1],A
    0F0B: 52 F9    MOV   A,[X-7]
    0F0D: 09 00    ADC   A,0x0
    0F0F: 60 D5    MOV   REG[0xD5],A
    0F11: 50 00    MOV   A,0x0
    0F13: 3F 24    MVI   [__r1],A
    0F15: 3F 24    MVI   [__r1],A
(0016) 	block.signature = 0;
    0F17: 52 FA    MOV   A,[X-6]
    0F19: 53 24    MOV   [__r1],A
    0F1B: 52 F9    MOV   A,[X-7]
    0F1D: 60 D5    MOV   REG[0xD5],A
    0F1F: 50 00    MOV   A,0x0
    0F21: 3F 24    MVI   [__r1],A
    0F23: 3F 24    MVI   [__r1],A
(0017) 	block.x = 0;
    0F25: 52 FA    MOV   A,[X-6]
    0F27: 01 04    ADD   A,0x4
    0F29: 53 24    MOV   [__r1],A
    0F2B: 52 F9    MOV   A,[X-7]
    0F2D: 09 00    ADC   A,0x0
    0F2F: 60 D5    MOV   REG[0xD5],A
    0F31: 50 00    MOV   A,0x0
    0F33: 3F 24    MVI   [__r1],A
    0F35: 3F 24    MVI   [__r1],A
(0018) 	block.y = 0;
    0F37: 52 FA    MOV   A,[X-6]
    0F39: 01 06    ADD   A,0x6
    0F3B: 53 24    MOV   [__r1],A
    0F3D: 52 F9    MOV   A,[X-7]
    0F3F: 09 00    ADC   A,0x0
    0F41: 60 D5    MOV   REG[0xD5],A
    0F43: 50 00    MOV   A,0x0
    0F45: 3F 24    MVI   [__r1],A
    0F47: 3F 24    MVI   [__r1],A
(0019) 	block.width = 0;
    0F49: 52 FA    MOV   A,[X-6]
    0F4B: 01 08    ADD   A,0x8
    0F4D: 53 24    MOV   [__r1],A
    0F4F: 52 F9    MOV   A,[X-7]
    0F51: 09 00    ADC   A,0x0
    0F53: 60 D5    MOV   REG[0xD5],A
    0F55: 50 00    MOV   A,0x0
    0F57: 3F 24    MVI   [__r1],A
    0F59: 3F 24    MVI   [__r1],A
(0020) 	block.height = 0;
    0F5B: 52 FA    MOV   A,[X-6]
    0F5D: 01 0A    ADD   A,0xA
    0F5F: 53 24    MOV   [__r1],A
    0F61: 52 F9    MOV   A,[X-7]
    0F63: 09 00    ADC   A,0x0
    0F65: 60 D5    MOV   REG[0xD5],A
    0F67: 50 00    MOV   A,0x0
    0F69: 3F 24    MVI   [__r1],A
    0F6B: 3F 24    MVI   [__r1],A
(0021) 	return (block) ;
    0F6D: 52 FA    MOV   A,[X-6]
    0F6F: 53 24    MOV   [__r1],A
    0F71: 52 F9    MOV   A,[X-7]
    0F73: 53 25    MOV   [__r0],A
    0F75: 52 FC    MOV   A,[X-4]
    0F77: 53 22    MOV   [__r3],A
    0F79: 52 FB    MOV   A,[X-5]
    0F7B: 53 23    MOV   [__r2],A
    0F7D: 51 25    MOV   A,[__r0]
    0F7F: 60 D4    MOV   REG[0xD4],A
    0F81: 51 23    MOV   A,[__r2]
    0F83: 60 D5    MOV   REG[0xD5],A
    0F85: 10       PUSH  X
    0F86: 57 0C    MOV   X,0xC
    0F88: 62 D0 00 MOV   REG[0xD0],0x0
    0F8B: 3E 24    MVI   A,[__r1]
    0F8D: 3F 22    MVI   [__r3],A
    0F8F: 79       DEC   X
    0F90: BF F7    JNZ   0x0F88
    0F92: 20       POP   X
    0F93: 20       POP   X
    0F94: 7F       RET   
(0022) }	
(0023) 
(0024) /**
(0025)  * \fn 		Block ValeurBlockDroit(void)
(0026)  * \brief 	Fonction qui retourne une structure Block contenant les données envoyées par la PixyCam de droite.
(0027)  * \param 	block est la structure Block contenant les données de la caméra droite
(0028)  * \return 	block est une structure Block contenant les données envoyées par la PixyCam de droite.
(0029)  */
(0030) 
(0031) Block ValeurBlockDroit (Block block) {
_ValeurBlockDroit:
  block                --> X-7
    0F95: 10       PUSH  X
    0F96: 4F       MOV   X,SP
(0032) 	block.checksum = getWord_CamDroite();
    0F97: 7C 0D 38 LCALL _getWord_CamDroite
    0F9A: 62 D0 00 MOV   REG[0xD0],0x0
    0F9D: 52 FA    MOV   A,[X-6]
    0F9F: 01 02    ADD   A,0x2
    0FA1: 53 22    MOV   [__r3],A
    0FA3: 52 F9    MOV   A,[X-7]
    0FA5: 09 00    ADC   A,0x0
    0FA7: 60 D5    MOV   REG[0xD5],A
    0FA9: 51 25    MOV   A,[__r0]
    0FAB: 3F 22    MVI   [__r3],A
    0FAD: 51 24    MOV   A,[__r1]
    0FAF: 3F 22    MVI   [__r3],A
(0033) 	block.signature = getWord_CamDroite();
    0FB1: 7C 0D 38 LCALL _getWord_CamDroite
    0FB4: 62 D0 00 MOV   REG[0xD0],0x0
    0FB7: 52 FA    MOV   A,[X-6]
    0FB9: 53 22    MOV   [__r3],A
    0FBB: 52 F9    MOV   A,[X-7]
    0FBD: 60 D5    MOV   REG[0xD5],A
    0FBF: 51 25    MOV   A,[__r0]
    0FC1: 3F 22    MVI   [__r3],A
    0FC3: 51 24    MOV   A,[__r1]
    0FC5: 3F 22    MVI   [__r3],A
(0034) 	block.x = getWord_CamDroite();
    0FC7: 7C 0D 38 LCALL _getWord_CamDroite
    0FCA: 62 D0 00 MOV   REG[0xD0],0x0
    0FCD: 52 FA    MOV   A,[X-6]
    0FCF: 01 04    ADD   A,0x4
    0FD1: 53 22    MOV   [__r3],A
    0FD3: 52 F9    MOV   A,[X-7]
    0FD5: 09 00    ADC   A,0x0
    0FD7: 60 D5    MOV   REG[0xD5],A
    0FD9: 51 25    MOV   A,[__r0]
    0FDB: 3F 22    MVI   [__r3],A
    0FDD: 51 24    MOV   A,[__r1]
    0FDF: 3F 22    MVI   [__r3],A
(0035) 	block.y = getWord_CamDroite();
    0FE1: 7C 0D 38 LCALL _getWord_CamDroite
    0FE4: 62 D0 00 MOV   REG[0xD0],0x0
    0FE7: 52 FA    MOV   A,[X-6]
    0FE9: 01 06    ADD   A,0x6
    0FEB: 53 22    MOV   [__r3],A
    0FED: 52 F9    MOV   A,[X-7]
    0FEF: 09 00    ADC   A,0x0
    0FF1: 60 D5    MOV   REG[0xD5],A
    0FF3: 51 25    MOV   A,[__r0]
    0FF5: 3F 22    MVI   [__r3],A
    0FF7: 51 24    MOV   A,[__r1]
    0FF9: 3F 22    MVI   [__r3],A
(0036) 	block.width = getWord_CamDroite();
    0FFB: 7C 0D 38 LCALL _getWord_CamDroite
    0FFE: 62 D0 00 MOV   REG[0xD0],0x0
    1001: 52 FA    MOV   A,[X-6]
    1003: 01 08    ADD   A,0x8
    1005: 53 22    MOV   [__r3],A
    1007: 52 F9    MOV   A,[X-7]
    1009: 09 00    ADC   A,0x0
    100B: 60 D5    MOV   REG[0xD5],A
    100D: 51 25    MOV   A,[__r0]
    100F: 3F 22    MVI   [__r3],A
    1011: 51 24    MOV   A,[__r1]
    1013: 3F 22    MVI   [__r3],A
(0037) 	block.height = getWord_CamDroite();
    1015: 7C 0D 38 LCALL _getWord_CamDroite
    1018: 62 D0 00 MOV   REG[0xD0],0x0
    101B: 52 FA    MOV   A,[X-6]
    101D: 01 0A    ADD   A,0xA
    101F: 53 22    MOV   [__r3],A
    1021: 52 F9    MOV   A,[X-7]
    1023: 09 00    ADC   A,0x0
    1025: 60 D5    MOV   REG[0xD5],A
    1027: 51 25    MOV   A,[__r0]
    1029: 3F 22    MVI   [__r3],A
    102B: 51 24    MOV   A,[__r1]
    102D: 3F 22    MVI   [__r3],A
(0038) 	return (block);
    102F: 52 FA    MOV   A,[X-6]
    1031: 53 24    MOV   [__r1],A
    1033: 52 F9    MOV   A,[X-7]
    1035: 53 25    MOV   [__r0],A
    1037: 52 FC    MOV   A,[X-4]
    1039: 53 22    MOV   [__r3],A
    103B: 52 FB    MOV   A,[X-5]
    103D: 53 23    MOV   [__r2],A
    103F: 51 25    MOV   A,[__r0]
    1041: 60 D4    MOV   REG[0xD4],A
    1043: 51 23    MOV   A,[__r2]
    1045: 60 D5    MOV   REG[0xD5],A
    1047: 10       PUSH  X
    1048: 57 0C    MOV   X,0xC
    104A: 62 D0 00 MOV   REG[0xD0],0x0
    104D: 3E 24    MVI   A,[__r1]
    104F: 3F 22    MVI   [__r3],A
    1051: 79       DEC   X
    1052: BF F7    JNZ   0x104A
    1054: 20       POP   X
    1055: 20       POP   X
    1056: 7F       RET   
(0039) }
(0040) 
(0041) /**
(0042)  * \fn 		Block ValeurBlockGauche (Block block)
(0043)  * \brief 	Fonction qui retourne une structure Block contenant les données envoyées par la PixyCam de gauche.
(0044)  * \param 	block est la structure Block contenant les données de la caméra gauche
(0045)  * \return 	block est une structure Block contenant les données envoyées par la PixyCam de gauche.
(0046)  */
(0047) 
(0048) Block ValeurBlockGauche (Block block) {
_ValeurBlockGauche:
  block                --> X-7
    1057: 10       PUSH  X
    1058: 4F       MOV   X,SP
(0049) 	block.checksum = getWord_CamGauche();
    1059: 7C 0E 31 LCALL _getWord_CamGauche
    105C: 62 D0 00 MOV   REG[0xD0],0x0
    105F: 52 FA    MOV   A,[X-6]
    1061: 01 02    ADD   A,0x2
    1063: 53 22    MOV   [__r3],A
    1065: 52 F9    MOV   A,[X-7]
    1067: 09 00    ADC   A,0x0
    1069: 60 D5    MOV   REG[0xD5],A
    106B: 51 25    MOV   A,[__r0]
    106D: 3F 22    MVI   [__r3],A
    106F: 51 24    MOV   A,[__r1]
    1071: 3F 22    MVI   [__r3],A
(0050) 	block.signature = getWord_CamGauche();
    1073: 7C 0E 31 LCALL _getWord_CamGauche
    1076: 62 D0 00 MOV   REG[0xD0],0x0
    1079: 52 FA    MOV   A,[X-6]
    107B: 53 22    MOV   [__r3],A
    107D: 52 F9    MOV   A,[X-7]
    107F: 60 D5    MOV   REG[0xD5],A
    1081: 51 25    MOV   A,[__r0]
    1083: 3F 22    MVI   [__r3],A
    1085: 51 24    MOV   A,[__r1]
    1087: 3F 22    MVI   [__r3],A
(0051) 	block.x = getWord_CamGauche();
    1089: 7C 0E 31 LCALL _getWord_CamGauche
    108C: 62 D0 00 MOV   REG[0xD0],0x0
    108F: 52 FA    MOV   A,[X-6]
    1091: 01 04    ADD   A,0x4
    1093: 53 22    MOV   [__r3],A
    1095: 52 F9    MOV   A,[X-7]
    1097: 09 00    ADC   A,0x0
    1099: 60 D5    MOV   REG[0xD5],A
    109B: 51 25    MOV   A,[__r0]
    109D: 3F 22    MVI   [__r3],A
    109F: 51 24    MOV   A,[__r1]
    10A1: 3F 22    MVI   [__r3],A
(0052) 	block.y = getWord_CamGauche();
    10A3: 7C 0E 31 LCALL _getWord_CamGauche
    10A6: 62 D0 00 MOV   REG[0xD0],0x0
    10A9: 52 FA    MOV   A,[X-6]
    10AB: 01 06    ADD   A,0x6
    10AD: 53 22    MOV   [__r3],A
    10AF: 52 F9    MOV   A,[X-7]
    10B1: 09 00    ADC   A,0x0
    10B3: 60 D5    MOV   REG[0xD5],A
    10B5: 51 25    MOV   A,[__r0]
    10B7: 3F 22    MVI   [__r3],A
    10B9: 51 24    MOV   A,[__r1]
    10BB: 3F 22    MVI   [__r3],A
(0053) 	block.width = getWord_CamGauche();
    10BD: 7C 0E 31 LCALL _getWord_CamGauche
    10C0: 62 D0 00 MOV   REG[0xD0],0x0
    10C3: 52 FA    MOV   A,[X-6]
    10C5: 01 08    ADD   A,0x8
    10C7: 53 22    MOV   [__r3],A
    10C9: 52 F9    MOV   A,[X-7]
    10CB: 09 00    ADC   A,0x0
    10CD: 60 D5    MOV   REG[0xD5],A
    10CF: 51 25    MOV   A,[__r0]
    10D1: 3F 22    MVI   [__r3],A
    10D3: 51 24    MOV   A,[__r1]
    10D5: 3F 22    MVI   [__r3],A
(0054) 	block.height = getWord_CamGauche();
    10D7: 7C 0E 31 LCALL _getWord_CamGauche
    10DA: 62 D0 00 MOV   REG[0xD0],0x0
    10DD: 52 FA    MOV   A,[X-6]
    10DF: 01 0A    ADD   A,0xA
    10E1: 53 22    MOV   [__r3],A
    10E3: 52 F9    MOV   A,[X-7]
    10E5: 09 00    ADC   A,0x0
    10E7: 60 D5    MOV   REG[0xD5],A
    10E9: 51 25    MOV   A,[__r0]
    10EB: 3F 22    MVI   [__r3],A
    10ED: 51 24    MOV   A,[__r1]
    10EF: 3F 22    MVI   [__r3],A
(0055) 	return (block) ;
    10F1: 52 FA    MOV   A,[X-6]
    10F3: 53 24    MOV   [__r1],A
    10F5: 52 F9    MOV   A,[X-7]
    10F7: 53 25    MOV   [__r0],A
    10F9: 52 FC    MOV   A,[X-4]
    10FB: 53 22    MOV   [__r3],A
    10FD: 52 FB    MOV   A,[X-5]
    10FF: 53 23    MOV   [__r2],A
    1101: 51 25    MOV   A,[__r0]
    1103: 60 D4    MOV   REG[0xD4],A
    1105: 51 23    MOV   A,[__r2]
    1107: 60 D5    MOV   REG[0xD5],A
    1109: 10       PUSH  X
    110A: 57 0C    MOV   X,0xC
    110C: 62 D0 00 MOV   REG[0xD0],0x0
    110F: 3E 24    MVI   A,[__r1]
    1111: 3F 22    MVI   [__r3],A
    1113: 79       DEC   X
    1114: BF F7    JNZ   0x110C
    1116: 20       POP   X
    1117: 20       POP   X
    1118: 7F       RET   
(0056) }
(0057) 
(0058) /**
(0059)  * \fn Block EnvoiBlock (Block block)
(0060)  * \brief Fonction qui envoie à l'Xbee les données contenues dans une structure Block. 
(0061) 	Les données sont envoyées en 16 bits via UART.
(0062)  * \param block est la structure Block contenant les données à envoyer.
(0063)  * \return aucune donné retournée.
(0064)  */
(0065) 
(0066) void EnvoiBlock ( Block block){
_EnvoiBlock:
  block                --> X-5
    1119: 10       PUSH  X
    111A: 4F       MOV   X,SP
(0067) 	UART_PutSHexInt(block.signature);
    111B: 62 D0 00 MOV   REG[0xD0],0x0
    111E: 52 FC    MOV   A,[X-4]
    1120: 53 24    MOV   [__r1],A
    1122: 52 FB    MOV   A,[X-5]
    1124: 60 D4    MOV   REG[0xD4],A
    1126: 3E 24    MVI   A,[__r1]
    1128: 53 25    MOV   [__r0],A
    112A: 3E 24    MVI   A,[__r1]
    112C: 53 24    MOV   [__r1],A
    112E: 10       PUSH  X
    112F: 51 25    MOV   A,[__r0]
    1131: 08       PUSH  A
    1132: 51 24    MOV   A,[__r1]
    1134: 20       POP   X
    1135: 7C 06 22 LCALL _UART_PutSHexInt
    1138: 20       POP   X
(0068) 	UART_PutSHexInt(block.x);
    1139: 62 D0 00 MOV   REG[0xD0],0x0
    113C: 52 FC    MOV   A,[X-4]
    113E: 01 04    ADD   A,0x4
    1140: 53 24    MOV   [__r1],A
    1142: 52 FB    MOV   A,[X-5]
    1144: 09 00    ADC   A,0x0
    1146: 60 D4    MOV   REG[0xD4],A
    1148: 3E 24    MVI   A,[__r1]
    114A: 53 25    MOV   [__r0],A
    114C: 3E 24    MVI   A,[__r1]
    114E: 53 24    MOV   [__r1],A
    1150: 10       PUSH  X
    1151: 51 25    MOV   A,[__r0]
    1153: 08       PUSH  A
    1154: 51 24    MOV   A,[__r1]
    1156: 20       POP   X
    1157: 7C 06 22 LCALL _UART_PutSHexInt
    115A: 20       POP   X
(0069) 	UART_PutSHexInt(block.y);
    115B: 62 D0 00 MOV   REG[0xD0],0x0
    115E: 52 FC    MOV   A,[X-4]
    1160: 01 06    ADD   A,0x6
    1162: 53 24    MOV   [__r1],A
    1164: 52 FB    MOV   A,[X-5]
    1166: 09 00    ADC   A,0x0
    1168: 60 D4    MOV   REG[0xD4],A
    116A: 3E 24    MVI   A,[__r1]
    116C: 53 25    MOV   [__r0],A
    116E: 3E 24    MVI   A,[__r1]
    1170: 53 24    MOV   [__r1],A
    1172: 10       PUSH  X
    1173: 51 25    MOV   A,[__r0]
    1175: 08       PUSH  A
    1176: 51 24    MOV   A,[__r1]
    1178: 20       POP   X
    1179: 7C 06 22 LCALL _UART_PutSHexInt
    117C: 20       POP   X
(0070) 	UART_PutSHexInt(block.width);
    117D: 62 D0 00 MOV   REG[0xD0],0x0
    1180: 52 FC    MOV   A,[X-4]
    1182: 01 08    ADD   A,0x8
    1184: 53 24    MOV   [__r1],A
    1186: 52 FB    MOV   A,[X-5]
    1188: 09 00    ADC   A,0x0
    118A: 60 D4    MOV   REG[0xD4],A
    118C: 3E 24    MVI   A,[__r1]
    118E: 53 25    MOV   [__r0],A
    1190: 3E 24    MVI   A,[__r1]
    1192: 53 24    MOV   [__r1],A
    1194: 10       PUSH  X
    1195: 51 25    MOV   A,[__r0]
    1197: 08       PUSH  A
    1198: 51 24    MOV   A,[__r1]
    119A: 20       POP   X
    119B: 7C 06 22 LCALL _UART_PutSHexInt
    119E: 20       POP   X
(0071) 	UART_PutSHexInt(block.height);
    119F: 62 D0 00 MOV   REG[0xD0],0x0
    11A2: 52 FC    MOV   A,[X-4]
    11A4: 01 0A    ADD   A,0xA
    11A6: 53 24    MOV   [__r1],A
    11A8: 52 FB    MOV   A,[X-5]
    11AA: 09 00    ADC   A,0x0
    11AC: 60 D4    MOV   REG[0xD4],A
    11AE: 3E 24    MVI   A,[__r1]
    11B0: 53 25    MOV   [__r0],A
    11B2: 3E 24    MVI   A,[__r1]
    11B4: 53 24    MOV   [__r1],A
    11B6: 10       PUSH  X
    11B7: 51 25    MOV   A,[__r0]
    11B9: 08       PUSH  A
    11BA: 51 24    MOV   A,[__r1]
    11BC: 20       POP   X
    11BD: 7C 06 22 LCALL _UART_PutSHexInt
    11C0: 20       POP   X
    11C1: 20       POP   X
    11C2: 7F       RET   
FILE: C:\Users\germa\Desktop\PROJET~1\PR80B3~1\TOUREL~1\TOUREL~1\main.c
(0001) /**
(0002)  * \file 		main.c
(0003)  * \brief 		Projet tourelle mobile 1. Contient la boucle principale du programme.
(0004)  * \author 		Systendo
(0005)  * \version 	1.1
(0006)  * \date 		26 septembre 2016
(0007)  *
(0008)  * Ce projet utilise le projet tourelle fixe et peut détecter un PoKeanMon à la fois. L'amélioration apportée
(0009)  * est un balayage horizontal et vertical des tourelles grâce aux servo-moteurs commandés par des modules PWM
(0010)  *
(0011)  */
(0012) 
(0013) #include <m8c.h>
(0014) #include "PSoCAPI.h"
(0015) #include <stdio.h>
(0016) #include <stdlib.h>
(0017) #include <string.h>
(0018) 
(0019) #include "Motor_Functions.h"
(0020) #include "camgauche.h"
(0021) #include "camdroite.h"
(0022) #include "affichage.h"
(0023) #include "InitialisationBlock.h"
(0024) 
(0025) /// Constantes et flags du timer
(0026) unsigned char Flag_ISR_Timer = 0;		// Flag se mettant à 1 tous les 200ms
(0027) unsigned char Flag_ISR_Timer_fast = 0;	// Flag se mettant à 1 tous les 50ms
(0028) char count;
(0029) 
(0030) 
(0031) void main(void)
(0032) {
_main:
  a                    --> X+30
  pulsewidth_X         --> X+28
  pulsewidth_Z         --> X+26
  i                    --> X+24
  camDroite            --> X+12
  camGauche            --> X+0
    11C3: 10       PUSH  X
    11C4: 4F       MOV   X,SP
    11C5: 38 50    ADD   SP,0x50
(0033) 	int *pulsewidth_Z;
(0034) 	int *pulsewidth_X;
(0035) 	int *a;
(0036) 	int i = 0x01;
    11C7: 56 19 01 MOV   [X+25],0x1
    11CA: 56 18 00 MOV   [X+24],0x0
(0037) 	Block camGauche;	// Correspond à une cible détectée sur la caméra gauche
(0038) 	Block camDroite;	// Correspond à une cible détectée sur la caméra droite
(0039) 	
(0040) 	*pulsewidth_Z = 0;
    11CD: 62 D0 00 MOV   REG[0xD0],0x0
    11D0: 52 1B    MOV   A,[X+27]
    11D2: 53 24    MOV   [__r1],A
    11D4: 52 1A    MOV   A,[X+26]
    11D6: 60 D5    MOV   REG[0xD5],A
    11D8: 50 00    MOV   A,0x0
    11DA: 3F 24    MVI   [__r1],A
    11DC: 3F 24    MVI   [__r1],A
(0041) 	*pulsewidth_X = 0;
    11DE: 52 1D    MOV   A,[X+29]
    11E0: 53 24    MOV   [__r1],A
    11E2: 52 1C    MOV   A,[X+28]
    11E4: 60 D5    MOV   REG[0xD5],A
    11E6: 50 00    MOV   A,0x0
    11E8: 3F 24    MVI   [__r1],A
    11EA: 3F 24    MVI   [__r1],A
(0042) 	*a = 0;
    11EC: 52 1F    MOV   A,[X+31]
    11EE: 53 24    MOV   [__r1],A
    11F0: 52 1E    MOV   A,[X+30]
    11F2: 60 D5    MOV   REG[0xD5],A
    11F4: 50 00    MOV   A,0x0
    11F6: 3F 24    MVI   [__r1],A
    11F8: 3F 24    MVI   [__r1],A
(0043) 	
(0044) 	/// Démarrage des différents modules
(0045) 	SPIM_CamGauche_Start(SPIM_CamGauche_SPIM_MODE_0 | SPIM_CamGauche_SPIM_MSB_FIRST);
    11FA: 10       PUSH  X
    11FB: 7C 07 9C LCALL _SPIM_CamGauche_Start
(0046) 	SPIM_CamDroite_Start(SPIM_CamDroite_SPIM_MODE_0 | SPIM_CamDroite_SPIM_MSB_FIRST);
    11FE: 50 00    MOV   A,0x0
    1200: 7C 07 B7 LCALL _SPIM_CamDroite_Start
(0047) 	UART_Start(UART_PARITY_NONE);	
    1203: 50 00    MOV   A,0x0
    1205: 7C 05 B7 LCALL _UART_Start
(0048) 	TimerCamera_Start();
    1208: 7C 06 F3 LCALL _TimerCamera_Start
(0049) 	TimerCamera_EnableInt();
    120B: 7C 06 EB LCALL _TimerCamera_EnableInt
(0050) 	LCD_Start();
    120E: 7C 09 D3 LCALL _LCD_Start|_LCD_Init|LCD_Start|LCD_Init
    1211: 20       POP   X
(0051) 	Init_Motor();
    1212: 7C 14 29 LCALL _Init_Motor
(0052) 	
(0053) 	/// Active les interruptions globales et locales
(0054) 	M8C_EnableGInt;
    1215: 71 01    OR    F,0x1
    1217: 81 E3    JMP   0x13FB
(0055) 	
(0056) 	while(1)	// Boucle principale
(0057) 	{
(0058) 		if (Flag_ISR_Timer == 1){
    1219: 62 D0 00 MOV   REG[0xD0],0x0
    121C: 3C 2A 01 CMP   [Flag_ISR_Timer],0x1
    121F: B1 DB    JNZ   0x13FB
(0059) 			
(0060) 			LED_Invert();
    1221: 10       PUSH  X
    1222: 7C 08 A1 LCALL _LED_Invert
    1225: 20       POP   X
(0061) 			Flag_ISR_Timer_fast = 0;
    1226: 62 D0 00 MOV   REG[0xD0],0x0
    1229: 55 29 00 MOV   [Flag_ISR_Timer_fast],0x0
    122C: 80 43    JMP   0x1270
(0062) 			while(getStart_CamGauche() == 0) 		// On cherche le début de frame 0xAA55AA56
(0063) 			{ 
(0064) 				if (Flag_ISR_Timer_fast == 1)		// Attend 50ms et met des 0 dans le bloc si aucun Pokeanmon n'est détecté
    122E: 62 D0 00 MOV   REG[0xD0],0x0
    1231: 3C 29 01 CMP   [Flag_ISR_Timer_fast],0x1
    1234: B0 3B    JNZ   0x1270
(0065) 				{
(0066) 					camGauche = InitialisationBlock(camGauche);
    1236: 62 D0 00 MOV   REG[0xD0],0x0
    1239: 5A 24    MOV   [__r1],X
    123B: 5A 22    MOV   [__r3],X
    123D: 06 22 20 ADD   [__r3],0x20
    1240: 62 D4 07 MOV   REG[0xD4],0x7
    1243: 62 D5 07 MOV   REG[0xD5],0x7
    1246: 10       PUSH  X
    1247: 57 0C    MOV   X,0xC
    1249: 62 D0 00 MOV   REG[0xD0],0x0
    124C: 3E 24    MVI   A,[__r1]
    124E: 3F 22    MVI   [__r3],A
    1250: 79       DEC   X
    1251: BF F7    JNZ   0x1249
    1253: 20       POP   X
    1254: 5A 24    MOV   [__r1],X
    1256: 06 24 20 ADD   [__r1],0x20
    1259: 50 07    MOV   A,0x7
    125B: 08       PUSH  A
    125C: 51 24    MOV   A,[__r1]
    125E: 08       PUSH  A
    125F: 50 07    MOV   A,0x7
    1261: 08       PUSH  A
    1262: 10       PUSH  X
    1263: 7C 0F 00 LCALL _InitialisationBlock
    1266: 38 FC    ADD   SP,0xFC
(0067) 					Flag_ISR_Timer_fast = 0;
    1268: 62 D0 00 MOV   REG[0xD0],0x0
    126B: 55 29 00 MOV   [Flag_ISR_Timer_fast],0x0
(0068) 					break;
    126E: 80 11    JMP   0x1280
(0069) 				}
(0070) 			}
    1270: 7C 0E 68 LCALL _getStart_CamGauche
    1273: 62 D0 00 MOV   REG[0xD0],0x0
    1276: 3C 25 00 CMP   [__r0],0x0
    1279: B0 06    JNZ   0x1280
    127B: 3C 24 00 CMP   [__r1],0x0
    127E: AF AF    JZ    0x122E
(0071) 			
(0072) 			camGauche = ValeurBlockGauche(camGauche) ;		// Récupère les données de la caméra gauche (des 0 si rien n'est détecté)
    1280: 62 D0 00 MOV   REG[0xD0],0x0
    1283: 5A 24    MOV   [__r1],X
    1285: 5A 22    MOV   [__r3],X
    1287: 06 22 20 ADD   [__r3],0x20
    128A: 62 D4 07 MOV   REG[0xD4],0x7
    128D: 62 D5 07 MOV   REG[0xD5],0x7
    1290: 10       PUSH  X
    1291: 57 0C    MOV   X,0xC
    1293: 62 D0 00 MOV   REG[0xD0],0x0
    1296: 3E 24    MVI   A,[__r1]
    1298: 3F 22    MVI   [__r3],A
    129A: 79       DEC   X
    129B: BF F7    JNZ   0x1293
    129D: 20       POP   X
    129E: 5A 24    MOV   [__r1],X
    12A0: 06 24 20 ADD   [__r1],0x20
    12A3: 50 07    MOV   A,0x7
    12A5: 08       PUSH  A
    12A6: 51 24    MOV   A,[__r1]
    12A8: 08       PUSH  A
    12A9: 50 07    MOV   A,0x7
    12AB: 08       PUSH  A
    12AC: 10       PUSH  X
    12AD: 7C 10 57 LCALL _ValeurBlockGauche
    12B0: 38 FC    ADD   SP,0xFC
(0073) 			
(0074) 			Flag_ISR_Timer_fast = 0;
    12B2: 62 D0 00 MOV   REG[0xD0],0x0
    12B5: 55 29 00 MOV   [Flag_ISR_Timer_fast],0x0
    12B8: 80 4D    JMP   0x1306
(0075) 			while(getStart_CamDroite() == 0) 		// On cherche le début de frame 0xAA55AA56
(0076) 			{ 
(0077) 				if (Flag_ISR_Timer_fast == 1)		// Attend 50ms et met des 0 dans le bloc si aucun Pokeanmon n'est détecté
    12BA: 62 D0 00 MOV   REG[0xD0],0x0
    12BD: 3C 29 01 CMP   [Flag_ISR_Timer_fast],0x1
    12C0: B0 45    JNZ   0x1306
(0078) 				{
(0079) 					camDroite = InitialisationBlock(camDroite) ;
    12C2: 62 D0 00 MOV   REG[0xD0],0x0
    12C5: 5A 24    MOV   [__r1],X
    12C7: 06 24 0C ADD   [__r1],0xC
    12CA: 5A 22    MOV   [__r3],X
    12CC: 06 22 2C ADD   [__r3],0x2C
    12CF: 62 D4 07 MOV   REG[0xD4],0x7
    12D2: 62 D5 07 MOV   REG[0xD5],0x7
    12D5: 10       PUSH  X
    12D6: 57 0C    MOV   X,0xC
    12D8: 62 D0 00 MOV   REG[0xD0],0x0
    12DB: 3E 24    MVI   A,[__r1]
    12DD: 3F 22    MVI   [__r3],A
    12DF: 79       DEC   X
    12E0: BF F7    JNZ   0x12D8
    12E2: 20       POP   X
    12E3: 5A 24    MOV   [__r1],X
    12E5: 06 24 2C ADD   [__r1],0x2C
    12E8: 50 07    MOV   A,0x7
    12EA: 08       PUSH  A
    12EB: 51 24    MOV   A,[__r1]
    12ED: 08       PUSH  A
    12EE: 5A 24    MOV   [__r1],X
    12F0: 06 24 0C ADD   [__r1],0xC
    12F3: 50 07    MOV   A,0x7
    12F5: 08       PUSH  A
    12F6: 51 24    MOV   A,[__r1]
    12F8: 08       PUSH  A
    12F9: 7C 0F 00 LCALL _InitialisationBlock
    12FC: 38 FC    ADD   SP,0xFC
(0080) 					Flag_ISR_Timer_fast = 0;
    12FE: 62 D0 00 MOV   REG[0xD0],0x0
    1301: 55 29 00 MOV   [Flag_ISR_Timer_fast],0x0
(0081) 					break;
    1304: 80 11    JMP   0x1316
(0082) 				}
(0083) 			}
    1306: 7C 0D 6F LCALL _getStart_CamDroite
    1309: 62 D0 00 MOV   REG[0xD0],0x0
    130C: 3C 25 00 CMP   [__r0],0x0
    130F: B0 06    JNZ   0x1316
    1311: 3C 24 00 CMP   [__r1],0x0
    1314: AF A5    JZ    0x12BA
(0084) 			
(0085) 			camDroite = ValeurBlockDroit(camDroite) ;		// Récupère les données de la caméra gauche (des 0 si rien n'est détecté)
    1316: 62 D0 00 MOV   REG[0xD0],0x0
    1319: 5A 24    MOV   [__r1],X
    131B: 06 24 0C ADD   [__r1],0xC
    131E: 5A 22    MOV   [__r3],X
    1320: 06 22 2C ADD   [__r3],0x2C
    1323: 62 D4 07 MOV   REG[0xD4],0x7
    1326: 62 D5 07 MOV   REG[0xD5],0x7
    1329: 10       PUSH  X
    132A: 57 0C    MOV   X,0xC
    132C: 62 D0 00 MOV   REG[0xD0],0x0
    132F: 3E 24    MVI   A,[__r1]
    1331: 3F 22    MVI   [__r3],A
    1333: 79       DEC   X
    1334: BF F7    JNZ   0x132C
    1336: 20       POP   X
    1337: 5A 24    MOV   [__r1],X
    1339: 06 24 2C ADD   [__r1],0x2C
    133C: 50 07    MOV   A,0x7
    133E: 08       PUSH  A
    133F: 51 24    MOV   A,[__r1]
    1341: 08       PUSH  A
    1342: 5A 24    MOV   [__r1],X
    1344: 06 24 0C ADD   [__r1],0xC
    1347: 50 07    MOV   A,0x7
    1349: 08       PUSH  A
    134A: 51 24    MOV   A,[__r1]
    134C: 08       PUSH  A
    134D: 7C 0F 95 LCALL _ValeurBlockDroit
    1350: 38 FC    ADD   SP,0xFC
(0086) 			
(0087) 			// Affichage des données de position des caméras sur le LCD
(0088) 			affichage(camGauche.signature, camGauche.x, camGauche.y, 
    1352: 52 12    MOV   A,[X+18]
    1354: 08       PUSH  A
    1355: 52 13    MOV   A,[X+19]
    1357: 08       PUSH  A
    1358: 52 10    MOV   A,[X+16]
    135A: 08       PUSH  A
    135B: 52 11    MOV   A,[X+17]
    135D: 08       PUSH  A
    135E: 52 06    MOV   A,[X+6]
    1360: 08       PUSH  A
    1361: 52 07    MOV   A,[X+7]
    1363: 08       PUSH  A
    1364: 52 04    MOV   A,[X+4]
    1366: 08       PUSH  A
    1367: 52 05    MOV   A,[X+5]
    1369: 08       PUSH  A
    136A: 52 00    MOV   A,[X+0]
    136C: 08       PUSH  A
    136D: 52 01    MOV   A,[X+1]
    136F: 08       PUSH  A
    1370: 7C 0A 78 LCALL __UserModules_end|__text_start|_affichage|_affichage
(0089) 						camDroite.x, camDroite.y );
(0090) 			
(0091) 			//Mise en route du balayage
(0092) 			i ^= 0x01;
    1373: 37 19 01 XOR   [X+25],0x1
    1376: 37 18 00 XOR   [X+24],0x0
(0093) 			Motor_Balay(a, pulsewidth_Z, pulsewidth_X, i); 
    1379: 52 18    MOV   A,[X+24]
    137B: 08       PUSH  A
    137C: 52 19    MOV   A,[X+25]
    137E: 08       PUSH  A
    137F: 52 1C    MOV   A,[X+28]
    1381: 08       PUSH  A
    1382: 52 1D    MOV   A,[X+29]
    1384: 08       PUSH  A
    1385: 52 1A    MOV   A,[X+26]
    1387: 08       PUSH  A
    1388: 52 1B    MOV   A,[X+27]
    138A: 08       PUSH  A
    138B: 52 1E    MOV   A,[X+30]
    138D: 08       PUSH  A
    138E: 52 1F    MOV   A,[X+31]
    1390: 08       PUSH  A
    1391: 7C 15 7E LCALL _Motor_Balay
    1394: 38 EE    ADD   SP,0xEE
(0094) 			
(0095) 			// Envoie des données vers l'UART (XBee)
(0096) 			EnvoiBlock (camGauche); 	
    1396: 62 D0 00 MOV   REG[0xD0],0x0
    1399: 5A 24    MOV   [__r1],X
    139B: 5A 22    MOV   [__r3],X
    139D: 06 22 38 ADD   [__r3],0x38
    13A0: 62 D4 07 MOV   REG[0xD4],0x7
    13A3: 62 D5 07 MOV   REG[0xD5],0x7
    13A6: 10       PUSH  X
    13A7: 57 0C    MOV   X,0xC
    13A9: 62 D0 00 MOV   REG[0xD0],0x0
    13AC: 3E 24    MVI   A,[__r1]
    13AE: 3F 22    MVI   [__r3],A
    13B0: 79       DEC   X
    13B1: BF F7    JNZ   0x13A9
    13B3: 20       POP   X
    13B4: 5A 24    MOV   [__r1],X
    13B6: 06 24 38 ADD   [__r1],0x38
    13B9: 50 07    MOV   A,0x7
    13BB: 08       PUSH  A
    13BC: 51 24    MOV   A,[__r1]
    13BE: 08       PUSH  A
    13BF: 7C 11 19 LCALL _EnvoiBlock
    13C2: 38 FE    ADD   SP,0xFE
(0097) 			EnvoiBlock (camDroite);
    13C4: 62 D0 00 MOV   REG[0xD0],0x0
    13C7: 5A 24    MOV   [__r1],X
    13C9: 06 24 0C ADD   [__r1],0xC
    13CC: 5A 22    MOV   [__r3],X
    13CE: 06 22 44 ADD   [__r3],0x44
    13D1: 62 D4 07 MOV   REG[0xD4],0x7
    13D4: 62 D5 07 MOV   REG[0xD5],0x7
    13D7: 10       PUSH  X
    13D8: 57 0C    MOV   X,0xC
    13DA: 62 D0 00 MOV   REG[0xD0],0x0
    13DD: 3E 24    MVI   A,[__r1]
    13DF: 3F 22    MVI   [__r3],A
    13E1: 79       DEC   X
    13E2: BF F7    JNZ   0x13DA
    13E4: 20       POP   X
    13E5: 5A 24    MOV   [__r1],X
    13E7: 06 24 44 ADD   [__r1],0x44
    13EA: 50 07    MOV   A,0x7
    13EC: 08       PUSH  A
    13ED: 51 24    MOV   A,[__r1]
    13EF: 08       PUSH  A
    13F0: 7C 11 19 LCALL _EnvoiBlock
    13F3: 38 FE    ADD   SP,0xFE
(0098) 			Flag_ISR_Timer = 0;
    13F5: 62 D0 00 MOV   REG[0xD0],0x0
    13F8: 55 2A 00 MOV   [Flag_ISR_Timer],0x0
(0099) 		}
(0100) 	}
    13FB: 8E 1D    JMP   0x1219
    13FD: 38 B0    ADD   SP,0xB0
    13FF: 20       POP   X
    1400: 8F FF    JMP   0x1400
(0101) 	
(0102) 	return;
(0103) }
(0104) 
(0105) /// Routine d'interruption du timer
(0106) #pragma interrupt_handler TimerCamera_ISR_C
(0107) void TimerCamera_ISR_C(void)
(0108) {
_TimerCamera_ISR_C:
    1402: 71 C0    OR    F,0xC0
    1404: 08       PUSH  A
    1405: 5D D0    MOV   A,REG[0xD0]
    1407: 08       PUSH  A
(0109) 	count++;
    1408: 62 D0 00 MOV   REG[0xD0],0x0
    140B: 76 28    INC   [count]
(0110) 	if(count>=3)
    140D: 3C 28 03 CMP   [count],0x3
    1410: C0 0D    JC    0x141E
(0111) 	{
(0112) 		count = 0;
    1412: 62 D0 00 MOV   REG[0xD0],0x0
    1415: 55 28 00 MOV   [count],0x0
(0113) 		Flag_ISR_Timer = 1;	
    1418: 62 D0 00 MOV   REG[0xD0],0x0
    141B: 55 2A 01 MOV   [Flag_ISR_Timer],0x1
(0114) 	}
(0115) 	Flag_ISR_Timer_fast = 1;
    141E: 62 D0 00 MOV   REG[0xD0],0x0
    1421: 55 29 01 MOV   [Flag_ISR_Timer_fast],0x1
    1424: 18       POP   A
    1425: 60 D0    MOV   REG[0xD0],A
    1427: 18       POP   A
    1428: 7E       RETI  
FILE: C:\Users\germa\Desktop\PROJET~1\PR80B3~1\TOUREL~1\TOUREL~1\motor_functions.c
(0001) /**
(0002)  * \file 		motor_functions.c
(0003)  * \brief 		Fonctions pour utiliser les servo-moteurs à l'aide des modules PWM
(0004)  * \author 		Systendo
(0005)  * \version 	1.1
(0006)  * \date 		26 septembre 2016
(0007)  */
(0008) 
(0009) #include <m8c.h>        // part specific constants and macros
(0010) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0011) #include "Motor_Functions.h"
(0012) 
(0013) /**
(0014)  * \fn 		void Init_Motor(void)
(0015)  * \brief 	Initialisation des Moteurs.
(0016)  *
(0017)  * \param 	aucun paramètre en entrée.
(0018)  * \return 	aucun parametre.
(0019)  */
(0020) 
(0021) void Init_Motor(void)
(0022) {
(0023) 	PWM16_WritePeriod(PWM_PERIOD);
_Init_Motor:
    1429: 10       PUSH  X
    142A: 57 4F    MOV   X,0x4F
    142C: 50 42    MOV   A,0x42
    142E: 7C 08 37 LCALL _PWM16_WritePeriod
(0024) 	PWM16_2_WritePeriod(PWM_PERIOD);
    1431: 57 4F    MOV   X,0x4F
    1433: 50 42    MOV   A,0x42
    1435: 7C 07 DB LCALL _PWM16_2_WritePeriod
(0025) 	
(0026) 	PWM16_WritePulseWidth(PWM_Z_PULSEWIDTH_MIN);	// Place le moteur dans une position initiale
    1438: 57 02    MOV   X,0x2
    143A: 50 1C    MOV   A,0x1C
    143C: 7C 08 3D LCALL _PWM16_WritePulseWidth
(0027) 	PWM16_2_WritePulseWidth(PWM_X_PULSEWIDTH_MIN);
    143F: 57 03    MOV   X,0x3
    1441: 50 E8    MOV   A,0xE8
    1443: 7C 07 E1 LCALL _PWM16_2_WritePulseWidth
(0028) 	
(0029) 	PWM16_Start();
    1446: 7C 08 2F LCALL _PWM16_Start
(0030) 	PWM16_2_Start();	
    1449: 7C 07 D3 LCALL _PWM16_2_Start
    144C: 20       POP   X
    144D: 7F       RET   
(0031) }
(0032) 
(0033) /**
(0034)  * \fn 		void M_Z_Rot_Hor(int *pulsewidth_Z, int i)
(0035)  * \brief 	Moteur Z rotation horaire. 
(0036)  *
(0037)  * \param 	int *pulsewidth_Z, int i.
(0038)  * \return 	aucun parametre.
(0039)  */
(0040) 
(0041) 
(0042) void M_Z_Rot_Hor(int *pulsewidth_Z, int i)
(0043) {
_M_Z_Rot_Hor:
  i                    --> X-7
  pulsewidth_Z         --> X-5
    144E: 10       PUSH  X
    144F: 4F       MOV   X,SP
(0044) 	if (i == 0x01)
    1450: 3D F9 00 CMP   [X-7],0x0
    1453: B0 0B    JNZ   0x145F
    1455: 3D FA 01 CMP   [X-6],0x1
    1458: B0 06    JNZ   0x145F
(0045) 	{
(0046) 		PWM16_Start();
    145A: 10       PUSH  X
    145B: 7C 08 2F LCALL _PWM16_Start
    145E: 20       POP   X
(0047) 	}
(0048) 	if (i == 0x00)
    145F: 3D F9 00 CMP   [X-7],0x0
    1462: B0 4F    JNZ   0x14B2
    1464: 3D FA 00 CMP   [X-6],0x0
    1467: B0 4A    JNZ   0x14B2
(0049) 	{
(0050) 		PWM16_Stop();
    1469: 10       PUSH  X
    146A: 7C 08 33 LCALL _PWM16_Stop
    146D: 20       POP   X
(0051) 		*pulsewidth_Z = *pulsewidth_Z + PWM_Z_PULSEWIDTH_INCR;
    146E: 62 D0 00 MOV   REG[0xD0],0x0
    1471: 52 FC    MOV   A,[X-4]
    1473: 53 24    MOV   [__r1],A
    1475: 52 FB    MOV   A,[X-5]
    1477: 60 D4    MOV   REG[0xD4],A
    1479: 3E 24    MVI   A,[__r1]
    147B: 53 25    MOV   [__r0],A
    147D: 3E 24    MVI   A,[__r1]
    147F: 53 24    MOV   [__r1],A
    1481: 06 24 78 ADD   [__r1],0x78
    1484: 0E 25 00 ADC   [__r0],0x0
    1487: 52 FC    MOV   A,[X-4]
    1489: 53 22    MOV   [__r3],A
    148B: 52 FB    MOV   A,[X-5]
    148D: 60 D5    MOV   REG[0xD5],A
    148F: 51 25    MOV   A,[__r0]
    1491: 3F 22    MVI   [__r3],A
    1493: 51 24    MOV   A,[__r1]
    1495: 3F 22    MVI   [__r3],A
(0052) 		PWM16_WritePulseWidth(*pulsewidth_Z);		
    1497: 52 FC    MOV   A,[X-4]
    1499: 53 24    MOV   [__r1],A
    149B: 52 FB    MOV   A,[X-5]
    149D: 60 D4    MOV   REG[0xD4],A
    149F: 3E 24    MVI   A,[__r1]
    14A1: 53 25    MOV   [__r0],A
    14A3: 3E 24    MVI   A,[__r1]
    14A5: 53 24    MOV   [__r1],A
    14A7: 10       PUSH  X
    14A8: 51 25    MOV   A,[__r0]
    14AA: 08       PUSH  A
    14AB: 51 24    MOV   A,[__r1]
    14AD: 20       POP   X
    14AE: 7C 08 3D LCALL _PWM16_WritePulseWidth
    14B1: 20       POP   X
(0053) 	}
    14B2: 20       POP   X
    14B3: 7F       RET   
(0054) }
(0055) 
(0056) 
(0057) 
(0058) /**
(0059)  * \fn void M_Z_Rot_Anti_Hor(int *pulsewidth_Z, int i)
(0060)  * \brief Moteur Z rotation Anti-horaire.
(0061)  *
(0062)  * \param int *pulsewidth_Z, int i.
(0063)  * \return aucun parametre.
(0064)  */
(0065) 
(0066) void M_Z_Rot_Anti_Hor(int *pulsewidth_Z, int i)
(0067) {
_M_Z_Rot_Anti_Hor:
  i                    --> X-7
  pulsewidth_Z         --> X-5
    14B4: 10       PUSH  X
    14B5: 4F       MOV   X,SP
(0068) 	if (i == 0x01)
    14B6: 3D F9 00 CMP   [X-7],0x0
    14B9: B0 0B    JNZ   0x14C5
    14BB: 3D FA 01 CMP   [X-6],0x1
    14BE: B0 06    JNZ   0x14C5
(0069) 	{
(0070) 		PWM16_Start();
    14C0: 10       PUSH  X
    14C1: 7C 08 2F LCALL _PWM16_Start
    14C4: 20       POP   X
(0071) 	}
(0072) 	if (i == 0x00)
    14C5: 3D F9 00 CMP   [X-7],0x0
    14C8: B0 4F    JNZ   0x1518
    14CA: 3D FA 00 CMP   [X-6],0x0
    14CD: B0 4A    JNZ   0x1518
(0073) 	{
(0074) 		PWM16_Stop();
    14CF: 10       PUSH  X
    14D0: 7C 08 33 LCALL _PWM16_Stop
    14D3: 20       POP   X
(0075) 		*pulsewidth_Z = *pulsewidth_Z - PWM_Z_PULSEWIDTH_INCR;	
    14D4: 62 D0 00 MOV   REG[0xD0],0x0
    14D7: 52 FC    MOV   A,[X-4]
    14D9: 53 24    MOV   [__r1],A
    14DB: 52 FB    MOV   A,[X-5]
    14DD: 60 D4    MOV   REG[0xD4],A
    14DF: 3E 24    MVI   A,[__r1]
    14E1: 53 25    MOV   [__r0],A
    14E3: 3E 24    MVI   A,[__r1]
    14E5: 53 24    MOV   [__r1],A
    14E7: 16 24 78 SUB   [__r1],0x78
    14EA: 1E 25 00 SBB   [__r0],0x0
    14ED: 52 FC    MOV   A,[X-4]
    14EF: 53 22    MOV   [__r3],A
    14F1: 52 FB    MOV   A,[X-5]
    14F3: 60 D5    MOV   REG[0xD5],A
    14F5: 51 25    MOV   A,[__r0]
    14F7: 3F 22    MVI   [__r3],A
    14F9: 51 24    MOV   A,[__r1]
    14FB: 3F 22    MVI   [__r3],A
(0076) 		PWM16_WritePulseWidth(*pulsewidth_Z);	
    14FD: 52 FC    MOV   A,[X-4]
    14FF: 53 24    MOV   [__r1],A
    1501: 52 FB    MOV   A,[X-5]
    1503: 60 D4    MOV   REG[0xD4],A
    1505: 3E 24    MVI   A,[__r1]
    1507: 53 25    MOV   [__r0],A
    1509: 3E 24    MVI   A,[__r1]
    150B: 53 24    MOV   [__r1],A
    150D: 10       PUSH  X
    150E: 51 25    MOV   A,[__r0]
    1510: 08       PUSH  A
    1511: 51 24    MOV   A,[__r1]
    1513: 20       POP   X
    1514: 7C 08 3D LCALL _PWM16_WritePulseWidth
    1517: 20       POP   X
(0077) 	}	
    1518: 20       POP   X
    1519: 7F       RET   
(0078) }
(0079) 
(0080) /**
(0081)  * \fn void M_X_Rot_Hor(int *pulsewidth_X)
(0082)  * \brief Moteur X rotation horaire.
(0083)  *
(0084)  * \param int *pulsewidth_X.
(0085)  * \return aucun parametre.
(0086)  */
(0087) 
(0088) void M_X_Rot_Hor(int *pulsewidth_X)
(0089) {
_M_X_Rot_Hor:
  pulsewidth_X         --> X-5
    151A: 10       PUSH  X
    151B: 4F       MOV   X,SP
(0090) 	*pulsewidth_X = PWM_X_PULSEWIDTH_MAX;
    151C: 62 D0 00 MOV   REG[0xD0],0x0
    151F: 52 FC    MOV   A,[X-4]
    1521: 53 24    MOV   [__r1],A
    1523: 52 FB    MOV   A,[X-5]
    1525: 60 D5    MOV   REG[0xD5],A
    1527: 50 07    MOV   A,0x7
    1529: 3F 24    MVI   [__r1],A
    152B: 50 D0    MOV   A,0xD0
    152D: 3F 24    MVI   [__r1],A
(0091) 	PWM16_2_WritePulseWidth(*pulsewidth_X);	
    152F: 52 FC    MOV   A,[X-4]
    1531: 53 24    MOV   [__r1],A
    1533: 52 FB    MOV   A,[X-5]
    1535: 60 D4    MOV   REG[0xD4],A
    1537: 3E 24    MVI   A,[__r1]
    1539: 53 25    MOV   [__r0],A
    153B: 3E 24    MVI   A,[__r1]
    153D: 53 24    MOV   [__r1],A
    153F: 10       PUSH  X
    1540: 51 25    MOV   A,[__r0]
    1542: 08       PUSH  A
    1543: 51 24    MOV   A,[__r1]
    1545: 20       POP   X
    1546: 7C 07 E1 LCALL _PWM16_2_WritePulseWidth
    1549: 20       POP   X
    154A: 20       POP   X
    154B: 7F       RET   
(0092) }
(0093) 
(0094) 
(0095) 
(0096) /**
(0097)  * \fn void M_X_Rot_Anti_Hor(int *pulsewidth_X)
(0098)  * \brief Moteur X rotation Anti-horaire.
(0099)  *
(0100)  * \param int *pulsewidth_X.
(0101)  * \return aucun parametre.
(0102)  */
(0103) 
(0104) void M_X_Rot_Anti_Hor(int *pulsewidth_X)
(0105) {
_M_X_Rot_Anti_Hor:
  pulsewidth_X         --> X-5
    154C: 10       PUSH  X
    154D: 4F       MOV   X,SP
(0106) 	*pulsewidth_X = PWM_X_PULSEWIDTH_MIN;
    154E: 62 D0 00 MOV   REG[0xD0],0x0
    1551: 52 FC    MOV   A,[X-4]
    1553: 53 24    MOV   [__r1],A
    1555: 52 FB    MOV   A,[X-5]
    1557: 60 D5    MOV   REG[0xD5],A
    1559: 50 03    MOV   A,0x3
    155B: 3F 24    MVI   [__r1],A
    155D: 50 E8    MOV   A,0xE8
    155F: 3F 24    MVI   [__r1],A
(0107) 	PWM16_2_WritePulseWidth(*pulsewidth_X);
    1561: 52 FC    MOV   A,[X-4]
    1563: 53 24    MOV   [__r1],A
    1565: 52 FB    MOV   A,[X-5]
    1567: 60 D4    MOV   REG[0xD4],A
    1569: 3E 24    MVI   A,[__r1]
    156B: 53 25    MOV   [__r0],A
    156D: 3E 24    MVI   A,[__r1]
    156F: 53 24    MOV   [__r1],A
    1571: 10       PUSH  X
    1572: 51 25    MOV   A,[__r0]
    1574: 08       PUSH  A
    1575: 51 24    MOV   A,[__r1]
    1577: 20       POP   X
    1578: 7C 07 E1 LCALL _PWM16_2_WritePulseWidth
    157B: 20       POP   X
    157C: 20       POP   X
    157D: 7F       RET   
(0108) }
(0109) 
(0110) /**
(0111)  * \fn void Motor_Balay(int *a, int *pulsewidth_Z, int *pulsewidth_X, int i)
(0112)  * \brief Balayage des moteurs.
(0113)  *
(0114)  * \param 	int *a				Pointeur vers un int permettant de vérifier si le maximum de rotation a été
(0115) 								dépassé
(0116) 			int *pulsewidth_Z	
(0117) 			int *pulsewidth_X	
(0118) 			int i				
(0119)  * \return aucun parametre.
(0120)  */
(0121) 
(0122) void Motor_Balay(int *a, int *pulsewidth_Z, int *pulsewidth_X, int i)
(0123) {
_Motor_Balay:
  i                    --> X-11
  pulsewidth_X         --> X-9
  pulsewidth_Z         --> X-7
  a                    --> X-5
    157E: 10       PUSH  X
    157F: 4F       MOV   X,SP
(0124) 	if(*a == 1)
    1580: 62 D0 00 MOV   REG[0xD0],0x0
    1583: 52 FC    MOV   A,[X-4]
    1585: 53 24    MOV   [__r1],A
    1587: 52 FB    MOV   A,[X-5]
    1589: 60 D4    MOV   REG[0xD4],A
    158B: 3E 24    MVI   A,[__r1]
    158D: 53 25    MOV   [__r0],A
    158F: 3E 24    MVI   A,[__r1]
    1591: 3C 25 00 CMP   [__r0],0x0
    1594: B0 4D    JNZ   0x15E2
    1596: 39 01    CMP   A,0x1
    1598: B0 49    JNZ   0x15E2
(0125) 	{
(0126) 		M_Z_Rot_Hor(pulsewidth_Z, i);				// La caméra tourne selon Z de 0 vers 180°
    159A: 52 F5    MOV   A,[X-11]
    159C: 08       PUSH  A
    159D: 52 F6    MOV   A,[X-10]
    159F: 08       PUSH  A
    15A0: 52 F9    MOV   A,[X-7]
    15A2: 08       PUSH  A
    15A3: 52 FA    MOV   A,[X-6]
    15A5: 08       PUSH  A
    15A6: 9E A6    CALL  _M_Z_Rot_Hor
    15A8: 38 FC    ADD   SP,0xFC
(0127) 		
(0128) 		if(*pulsewidth_Z >= PWM_Z_PULSEWIDTH_MAX) 	// La rotation autour de l'axe Z est supérieure à 180°
    15AA: 62 D0 00 MOV   REG[0xD0],0x0
    15AD: 52 FA    MOV   A,[X-6]
    15AF: 53 24    MOV   [__r1],A
    15B1: 52 F9    MOV   A,[X-7]
    15B3: 60 D4    MOV   REG[0xD4],A
    15B5: 3E 24    MVI   A,[__r1]
    15B7: 53 25    MOV   [__r0],A
    15B9: 3E 24    MVI   A,[__r1]
    15BB: 11 98    SUB   A,0x98
    15BD: 51 25    MOV   A,[__r0]
    15BF: 31 80    XOR   A,0x80
    15C1: 19 88    SBB   A,0x88
    15C3: C0 88    JC    0x164C
(0129) 		{
(0130) 			*a = 0;
    15C5: 62 D0 00 MOV   REG[0xD0],0x0
    15C8: 52 FC    MOV   A,[X-4]
    15CA: 53 24    MOV   [__r1],A
    15CC: 52 FB    MOV   A,[X-5]
    15CE: 60 D5    MOV   REG[0xD5],A
    15D0: 50 00    MOV   A,0x0
    15D2: 3F 24    MVI   [__r1],A
    15D4: 3F 24    MVI   [__r1],A
(0131) 			M_X_Rot_Hor(pulsewidth_X);				// La caméra tourne selon X et se baisse
    15D6: 52 F7    MOV   A,[X-9]
    15D8: 08       PUSH  A
    15D9: 52 F8    MOV   A,[X-8]
    15DB: 08       PUSH  A
    15DC: 9F 3C    CALL  _M_X_Rot_Hor
    15DE: 38 FE    ADD   SP,0xFE
(0132) 		}
(0133) 	}
    15E0: 80 6B    JMP   0x164C
(0134) 	else if(*a == 0)
    15E2: 62 D0 00 MOV   REG[0xD0],0x0
    15E5: 52 FC    MOV   A,[X-4]
    15E7: 53 24    MOV   [__r1],A
    15E9: 52 FB    MOV   A,[X-5]
    15EB: 60 D4    MOV   REG[0xD4],A
    15ED: 3E 24    MVI   A,[__r1]
    15EF: 53 25    MOV   [__r0],A
    15F1: 3E 24    MVI   A,[__r1]
    15F3: 3C 25 00 CMP   [__r0],0x0
    15F6: B0 55    JNZ   0x164C
    15F8: 39 00    CMP   A,0x0
    15FA: B0 51    JNZ   0x164C
(0135) 	{
(0136) 		M_Z_Rot_Anti_Hor(pulsewidth_Z, i);			// La caméra tourne selon Z de 180 vers 0°
    15FC: 52 F5    MOV   A,[X-11]
    15FE: 08       PUSH  A
    15FF: 52 F6    MOV   A,[X-10]
    1601: 08       PUSH  A
    1602: 52 F9    MOV   A,[X-7]
    1604: 08       PUSH  A
    1605: 52 FA    MOV   A,[X-6]
    1607: 08       PUSH  A
    1608: 9E AA    CALL  _M_Z_Rot_Anti_Hor
    160A: 38 FC    ADD   SP,0xFC
(0137) 		
(0138) 		if(*pulsewidth_Z <= PWM_Z_PULSEWIDTH_MIN)	// La rotation autour de l'axe Z est inférieure à 0°
    160C: 62 D0 00 MOV   REG[0xD0],0x0
    160F: 52 FA    MOV   A,[X-6]
    1611: 53 24    MOV   [__r1],A
    1613: 52 F9    MOV   A,[X-7]
    1615: 60 D4    MOV   REG[0xD4],A
    1617: 3E 24    MVI   A,[__r1]
    1619: 53 25    MOV   [__r0],A
    161B: 3E 24    MVI   A,[__r1]
    161D: 53 24    MOV   [__r1],A
    161F: 50 1C    MOV   A,0x1C
    1621: 12 24    SUB   A,[__r1]
    1623: 51 25    MOV   A,[__r0]
    1625: 31 80    XOR   A,0x80
    1627: 53 1F    MOV   [__rX],A
    1629: 50 82    MOV   A,0x82
    162B: 1A 1F    SBB   A,[__rX]
    162D: C0 1E    JC    0x164C
(0139) 		{
(0140) 			*a = 1;
    162F: 62 D0 00 MOV   REG[0xD0],0x0
    1632: 52 FC    MOV   A,[X-4]
    1634: 53 24    MOV   [__r1],A
    1636: 52 FB    MOV   A,[X-5]
    1638: 60 D5    MOV   REG[0xD5],A
    163A: 50 00    MOV   A,0x0
    163C: 3F 24    MVI   [__r1],A
    163E: 50 01    MOV   A,0x1
    1640: 3F 24    MVI   [__r1],A
(0141) 			M_X_Rot_Anti_Hor(pulsewidth_X);			// La caméra tourne selon X et s'élève
    1642: 52 F7    MOV   A,[X-9]
    1644: 08       PUSH  A
    1645: 52 F8    MOV   A,[X-8]
    1647: 08       PUSH  A
    1648: 9F 02    CALL  _M_X_Rot_Anti_Hor
    164A: 38 FE    ADD   SP,0xFE
(0142) 		}
(0143) 	}	
    164C: 20       POP   X
(0144) }
(0145) 
    164D: 7F       RET   
__plcall:
    1692: 53 1F    MOV   [__rX],A
    1694: 28       ROMX  
    1695: 08       PUSH  A
    1696: 51 1F    MOV   A,[__rX]
    1698: 75       INC   X
    1699: 09 00    ADC   A,0x0
    169B: 28       ROMX  
    169C: 08       PUSH  A
    169D: 7F       RET   
_itoa:
    169E: 10       PUSH  X
    169F: 4F       MOV   X,SP
    16A0: 38 09    ADD   SP,0x9
    16A2: 52 FA    MOV   A,[X-6]
    16A4: 54 03    MOV   [X+3],A
    16A6: 52 F9    MOV   A,[X-7]
    16A8: 54 02    MOV   [X+2],A
    16AA: 3D F9 00 CMP   [X-7],0x0
    16AD: B0 2F    JNZ   0x16DD
    16AF: 3D FA 00 CMP   [X-6],0x0
    16B2: B0 2A    JNZ   0x16DD
    16B4: 62 D0 00 MOV   REG[0xD0],0x0
    16B7: 52 FC    MOV   A,[X-4]
    16B9: 53 24    MOV   [__r1],A
    16BB: 52 FB    MOV   A,[X-5]
    16BD: 60 D5    MOV   REG[0xD5],A
    16BF: 50 30    MOV   A,0x30
    16C1: 3F 24    MVI   [__r1],A
    16C3: 52 FC    MOV   A,[X-4]
    16C5: 01 01    ADD   A,0x1
    16C7: 53 24    MOV   [__r1],A
    16C9: 52 FB    MOV   A,[X-5]
    16CB: 09 00    ADC   A,0x0
    16CD: 60 D5    MOV   REG[0xD5],A
    16CF: 50 00    MOV   A,0x0
    16D1: 3F 24    MVI   [__r1],A
    16D3: 52 FC    MOV   A,[X-4]
    16D5: 53 24    MOV   [__r1],A
    16D7: 52 FB    MOV   A,[X-5]
    16D9: 53 25    MOV   [__r0],A
    16DB: 81 97    JMP   0x1873
    16DD: 52 FA    MOV   A,[X-6]
    16DF: 11 00    SUB   A,0x0
    16E1: 52 F9    MOV   A,[X-7]
    16E3: 31 80    XOR   A,0x80
    16E5: 19 80    SBB   A,0x80
    16E7: D0 29    JNC   0x1711
    16E9: 3D F7 00 CMP   [X-9],0x0
    16EC: B0 24    JNZ   0x1711
    16EE: 3D F8 0A CMP   [X-8],0xA
    16F1: B0 1F    JNZ   0x1711
    16F3: 56 06 01 MOV   [X+6],0x1
    16F6: 62 D0 00 MOV   REG[0xD0],0x0
    16F9: 52 03    MOV   A,[X+3]
    16FB: 73       CPL   A
    16FC: 53 24    MOV   [__r1],A
    16FE: 52 02    MOV   A,[X+2]
    1700: 73       CPL   A
    1701: 53 25    MOV   [__r0],A
    1703: 51 24    MOV   A,[__r1]
    1705: 01 01    ADD   A,0x1
    1707: 54 03    MOV   [X+3],A
    1709: 51 25    MOV   A,[__r0]
    170B: 09 00    ADC   A,0x0
    170D: 54 02    MOV   [X+2],A
    170F: 80 04    JMP   0x1714
    1711: 56 06 00 MOV   [X+6],0x0
    1714: 52 FC    MOV   A,[X-4]
    1716: 54 01    MOV   [X+1],A
    1718: 52 FB    MOV   A,[X-5]
    171A: 54 00    MOV   [X+0],A
    171C: 62 D0 00 MOV   REG[0xD0],0x0
    171F: 52 F7    MOV   A,[X-9]
    1721: 08       PUSH  A
    1722: 52 F8    MOV   A,[X-8]
    1724: 08       PUSH  A
    1725: 52 02    MOV   A,[X+2]
    1727: 08       PUSH  A
    1728: 52 03    MOV   A,[X+3]
    172A: 08       PUSH  A
    172B: 7C 16 4E LCALL 0x164E
    172E: 38 FE    ADD   SP,0xFE
    1730: 18       POP   A
    1731: 53 24    MOV   [__r1],A
    1733: 18       POP   A
    1734: 53 25    MOV   [__r0],A
    1736: 51 24    MOV   A,[__r1]
    1738: 54 08    MOV   [X+8],A
    173A: 51 25    MOV   A,[__r0]
    173C: 54 07    MOV   [X+7],A
    173E: 50 09    MOV   A,0x9
    1740: 13 08    SUB   A,[X+8]
    1742: 52 07    MOV   A,[X+7]
    1744: 31 80    XOR   A,0x80
    1746: 53 1F    MOV   [__rX],A
    1748: 50 80    MOV   A,0x80
    174A: 1A 1F    SBB   A,[__rX]
    174C: C0 28    JC    0x1775
    174E: 62 D0 00 MOV   REG[0xD0],0x0
    1751: 52 01    MOV   A,[X+1]
    1753: 53 24    MOV   [__r1],A
    1755: 52 00    MOV   A,[X+0]
    1757: 53 25    MOV   [__r0],A
    1759: 51 24    MOV   A,[__r1]
    175B: 01 01    ADD   A,0x1
    175D: 54 01    MOV   [X+1],A
    175F: 51 25    MOV   A,[__r0]
    1761: 09 00    ADC   A,0x0
    1763: 54 00    MOV   [X+0],A
    1765: 52 08    MOV   A,[X+8]
    1767: 01 30    ADD   A,0x30
    1769: 53 23    MOV   [__r2],A
    176B: 51 25    MOV   A,[__r0]
    176D: 60 D5    MOV   REG[0xD5],A
    176F: 51 23    MOV   A,[__r2]
    1771: 3F 24    MVI   [__r1],A
    1773: 80 26    JMP   0x179A
    1775: 62 D0 00 MOV   REG[0xD0],0x0
    1778: 52 01    MOV   A,[X+1]
    177A: 53 24    MOV   [__r1],A
    177C: 52 00    MOV   A,[X+0]
    177E: 53 25    MOV   [__r0],A
    1780: 51 24    MOV   A,[__r1]
    1782: 01 01    ADD   A,0x1
    1784: 54 01    MOV   [X+1],A
    1786: 51 25    MOV   A,[__r0]
    1788: 09 00    ADC   A,0x0
    178A: 54 00    MOV   [X+0],A
    178C: 52 08    MOV   A,[X+8]
    178E: 01 57    ADD   A,0x57
    1790: 53 23    MOV   [__r2],A
    1792: 51 25    MOV   A,[__r0]
    1794: 60 D5    MOV   REG[0xD5],A
    1796: 51 23    MOV   A,[__r2]
    1798: 3F 24    MVI   [__r1],A
    179A: 52 F7    MOV   A,[X-9]
    179C: 08       PUSH  A
    179D: 52 F8    MOV   A,[X-8]
    179F: 08       PUSH  A
    17A0: 52 02    MOV   A,[X+2]
    17A2: 08       PUSH  A
    17A3: 52 03    MOV   A,[X+3]
    17A5: 08       PUSH  A
    17A6: 62 D0 00 MOV   REG[0xD0],0x0
    17A9: 7C 16 4E LCALL 0x164E
    17AC: 18       POP   A
    17AD: 54 03    MOV   [X+3],A
    17AF: 18       POP   A
    17B0: 54 02    MOV   [X+2],A
    17B2: 38 FE    ADD   SP,0xFE
    17B4: 3D 02 00 CMP   [X+2],0x0
    17B7: BF 64    JNZ   0x171C
    17B9: 3D 03 00 CMP   [X+3],0x0
    17BC: BF 5F    JNZ   0x171C
    17BE: 3D 06 00 CMP   [X+6],0x0
    17C1: A0 20    JZ    0x17E2
    17C3: 62 D0 00 MOV   REG[0xD0],0x0
    17C6: 52 01    MOV   A,[X+1]
    17C8: 53 24    MOV   [__r1],A
    17CA: 52 00    MOV   A,[X+0]
    17CC: 53 25    MOV   [__r0],A
    17CE: 51 24    MOV   A,[__r1]
    17D0: 01 01    ADD   A,0x1
    17D2: 54 01    MOV   [X+1],A
    17D4: 51 25    MOV   A,[__r0]
    17D6: 09 00    ADC   A,0x0
    17D8: 54 00    MOV   [X+0],A
    17DA: 51 25    MOV   A,[__r0]
    17DC: 60 D5    MOV   REG[0xD5],A
    17DE: 50 2D    MOV   A,0x2D
    17E0: 3F 24    MVI   [__r1],A
    17E2: 62 D0 00 MOV   REG[0xD0],0x0
    17E5: 52 01    MOV   A,[X+1]
    17E7: 53 24    MOV   [__r1],A
    17E9: 52 00    MOV   A,[X+0]
    17EB: 53 25    MOV   [__r0],A
    17ED: 51 24    MOV   A,[__r1]
    17EF: 01 FF    ADD   A,0xFF
    17F1: 54 01    MOV   [X+1],A
    17F3: 51 25    MOV   A,[__r0]
    17F5: 09 FF    ADC   A,0xFF
    17F7: 54 00    MOV   [X+0],A
    17F9: 51 25    MOV   A,[__r0]
    17FB: 60 D5    MOV   REG[0xD5],A
    17FD: 50 00    MOV   A,0x0
    17FF: 3F 24    MVI   [__r1],A
    1801: 52 FC    MOV   A,[X-4]
    1803: 54 05    MOV   [X+5],A
    1805: 52 FB    MOV   A,[X-5]
    1807: 54 04    MOV   [X+4],A
    1809: 80 54    JMP   0x185E
    180B: 62 D0 00 MOV   REG[0xD0],0x0
    180E: 52 05    MOV   A,[X+5]
    1810: 53 24    MOV   [__r1],A
    1812: 52 04    MOV   A,[X+4]
    1814: 60 D4    MOV   REG[0xD4],A
    1816: 3E 24    MVI   A,[__r1]
    1818: 54 06    MOV   [X+6],A
    181A: 52 05    MOV   A,[X+5]
    181C: 53 24    MOV   [__r1],A
    181E: 52 04    MOV   A,[X+4]
    1820: 53 25    MOV   [__r0],A
    1822: 51 24    MOV   A,[__r1]
    1824: 01 01    ADD   A,0x1
    1826: 54 05    MOV   [X+5],A
    1828: 51 25    MOV   A,[__r0]
    182A: 09 00    ADC   A,0x0
    182C: 54 04    MOV   [X+4],A
    182E: 52 01    MOV   A,[X+1]
    1830: 53 22    MOV   [__r3],A
    1832: 52 00    MOV   A,[X+0]
    1834: 60 D4    MOV   REG[0xD4],A
    1836: 3E 22    MVI   A,[__r3]
    1838: 53 23    MOV   [__r2],A
    183A: 51 25    MOV   A,[__r0]
    183C: 60 D5    MOV   REG[0xD5],A
    183E: 51 23    MOV   A,[__r2]
    1840: 3F 24    MVI   [__r1],A
    1842: 52 01    MOV   A,[X+1]
    1844: 53 24    MOV   [__r1],A
    1846: 52 00    MOV   A,[X+0]
    1848: 53 25    MOV   [__r0],A
    184A: 51 24    MOV   A,[__r1]
    184C: 01 FF    ADD   A,0xFF
    184E: 54 01    MOV   [X+1],A
    1850: 51 25    MOV   A,[__r0]
    1852: 09 FF    ADC   A,0xFF
    1854: 54 00    MOV   [X+0],A
    1856: 51 25    MOV   A,[__r0]
    1858: 60 D5    MOV   REG[0xD5],A
    185A: 52 06    MOV   A,[X+6]
    185C: 3F 24    MVI   [__r1],A
    185E: 52 05    MOV   A,[X+5]
    1860: 13 01    SUB   A,[X+1]
    1862: 52 04    MOV   A,[X+4]
    1864: 1B 00    SBB   A,[X+0]
    1866: CF A4    JC    0x180B
    1868: 62 D0 00 MOV   REG[0xD0],0x0
    186B: 52 FC    MOV   A,[X-4]
    186D: 53 24    MOV   [__r1],A
    186F: 52 FB    MOV   A,[X-5]
    1871: 53 25    MOV   [__r0],A
    1873: 38 F7    ADD   SP,0xF7
    1875: 20       POP   X
    1876: 7F       RET   
_utoa:
    1877: 10       PUSH  X
    1878: 4F       MOV   X,SP
    1879: 38 07    ADD   SP,0x7
    187B: 52 FC    MOV   A,[X-4]
    187D: 54 01    MOV   [X+1],A
    187F: 52 FB    MOV   A,[X-5]
    1881: 54 00    MOV   [X+0],A
    1883: 62 D0 00 MOV   REG[0xD0],0x0
    1886: 52 F7    MOV   A,[X-9]
    1888: 08       PUSH  A
    1889: 52 F8    MOV   A,[X-8]
    188B: 08       PUSH  A
    188C: 52 F9    MOV   A,[X-7]
    188E: 08       PUSH  A
    188F: 52 FA    MOV   A,[X-6]
    1891: 08       PUSH  A
    1892: 7C 16 4E LCALL 0x164E
    1895: 38 FE    ADD   SP,0xFE
    1897: 18       POP   A
    1898: 53 24    MOV   [__r1],A
    189A: 18       POP   A
    189B: 53 25    MOV   [__r0],A
    189D: 51 24    MOV   A,[__r1]
    189F: 54 06    MOV   [X+6],A
    18A1: 51 25    MOV   A,[__r0]
    18A3: 54 05    MOV   [X+5],A
    18A5: 50 09    MOV   A,0x9
    18A7: 13 06    SUB   A,[X+6]
    18A9: 52 05    MOV   A,[X+5]
    18AB: 31 80    XOR   A,0x80
    18AD: 53 1F    MOV   [__rX],A
    18AF: 50 80    MOV   A,0x80
    18B1: 1A 1F    SBB   A,[__rX]
    18B3: C0 28    JC    0x18DC
    18B5: 62 D0 00 MOV   REG[0xD0],0x0
    18B8: 52 01    MOV   A,[X+1]
    18BA: 53 24    MOV   [__r1],A
    18BC: 52 00    MOV   A,[X+0]
    18BE: 53 25    MOV   [__r0],A
    18C0: 51 24    MOV   A,[__r1]
    18C2: 01 01    ADD   A,0x1
    18C4: 54 01    MOV   [X+1],A
    18C6: 51 25    MOV   A,[__r0]
    18C8: 09 00    ADC   A,0x0
    18CA: 54 00    MOV   [X+0],A
    18CC: 52 06    MOV   A,[X+6]
    18CE: 01 30    ADD   A,0x30
    18D0: 53 23    MOV   [__r2],A
    18D2: 51 25    MOV   A,[__r0]
    18D4: 60 D5    MOV   REG[0xD5],A
    18D6: 51 23    MOV   A,[__r2]
    18D8: 3F 24    MVI   [__r1],A
    18DA: 80 26    JMP   0x1901
    18DC: 62 D0 00 MOV   REG[0xD0],0x0
    18DF: 52 01    MOV   A,[X+1]
    18E1: 53 24    MOV   [__r1],A
    18E3: 52 00    MOV   A,[X+0]
    18E5: 53 25    MOV   [__r0],A
    18E7: 51 24    MOV   A,[__r1]
    18E9: 01 01    ADD   A,0x1
    18EB: 54 01    MOV   [X+1],A
    18ED: 51 25    MOV   A,[__r0]
    18EF: 09 00    ADC   A,0x0
    18F1: 54 00    MOV   [X+0],A
    18F3: 52 06    MOV   A,[X+6]
    18F5: 01 57    ADD   A,0x57
    18F7: 53 23    MOV   [__r2],A
    18F9: 51 25    MOV   A,[__r0]
    18FB: 60 D5    MOV   REG[0xD5],A
    18FD: 51 23    MOV   A,[__r2]
    18FF: 3F 24    MVI   [__r1],A
    1901: 52 F7    MOV   A,[X-9]
    1903: 08       PUSH  A
    1904: 52 F8    MOV   A,[X-8]
    1906: 08       PUSH  A
    1907: 52 F9    MOV   A,[X-7]
    1909: 08       PUSH  A
    190A: 52 FA    MOV   A,[X-6]
    190C: 08       PUSH  A
    190D: 62 D0 00 MOV   REG[0xD0],0x0
    1910: 7C 16 4E LCALL 0x164E
    1913: 18       POP   A
    1914: 54 FA    MOV   [X-6],A
    1916: 18       POP   A
    1917: 54 F9    MOV   [X-7],A
    1919: 38 FE    ADD   SP,0xFE
    191B: 3D F9 00 CMP   [X-7],0x0
    191E: BF 64    JNZ   0x1883
    1920: 3D FA 00 CMP   [X-6],0x0
    1923: BF 5F    JNZ   0x1883
    1925: 62 D0 00 MOV   REG[0xD0],0x0
    1928: 52 01    MOV   A,[X+1]
    192A: 53 24    MOV   [__r1],A
    192C: 52 00    MOV   A,[X+0]
    192E: 53 25    MOV   [__r0],A
    1930: 51 24    MOV   A,[__r1]
    1932: 01 FF    ADD   A,0xFF
    1934: 54 01    MOV   [X+1],A
    1936: 51 25    MOV   A,[__r0]
    1938: 09 FF    ADC   A,0xFF
    193A: 54 00    MOV   [X+0],A
    193C: 51 25    MOV   A,[__r0]
    193E: 60 D5    MOV   REG[0xD5],A
    1940: 50 00    MOV   A,0x0
    1942: 3F 24    MVI   [__r1],A
    1944: 52 FC    MOV   A,[X-4]
    1946: 54 03    MOV   [X+3],A
    1948: 52 FB    MOV   A,[X-5]
    194A: 54 02    MOV   [X+2],A
    194C: 80 54    JMP   0x19A1
    194E: 62 D0 00 MOV   REG[0xD0],0x0
    1951: 52 03    MOV   A,[X+3]
    1953: 53 24    MOV   [__r1],A
    1955: 52 02    MOV   A,[X+2]
    1957: 60 D4    MOV   REG[0xD4],A
    1959: 3E 24    MVI   A,[__r1]
    195B: 54 04    MOV   [X+4],A
    195D: 52 03    MOV   A,[X+3]
    195F: 53 24    MOV   [__r1],A
    1961: 52 02    MOV   A,[X+2]
    1963: 53 25    MOV   [__r0],A
    1965: 51 24    MOV   A,[__r1]
    1967: 01 01    ADD   A,0x1
    1969: 54 03    MOV   [X+3],A
    196B: 51 25    MOV   A,[__r0]
    196D: 09 00    ADC   A,0x0
    196F: 54 02    MOV   [X+2],A
    1971: 52 01    MOV   A,[X+1]
    1973: 53 22    MOV   [__r3],A
    1975: 52 00    MOV   A,[X+0]
    1977: 60 D4    MOV   REG[0xD4],A
    1979: 3E 22    MVI   A,[__r3]
    197B: 53 23    MOV   [__r2],A
    197D: 51 25    MOV   A,[__r0]
    197F: 60 D5    MOV   REG[0xD5],A
    1981: 51 23    MOV   A,[__r2]
    1983: 3F 24    MVI   [__r1],A
    1985: 52 01    MOV   A,[X+1]
    1987: 53 24    MOV   [__r1],A
    1989: 52 00    MOV   A,[X+0]
    198B: 53 25    MOV   [__r0],A
    198D: 51 24    MOV   A,[__r1]
    198F: 01 FF    ADD   A,0xFF
    1991: 54 01    MOV   [X+1],A
    1993: 51 25    MOV   A,[__r0]
    1995: 09 FF    ADC   A,0xFF
    1997: 54 00    MOV   [X+0],A
    1999: 51 25    MOV   A,[__r0]
    199B: 60 D5    MOV   REG[0xD5],A
    199D: 52 04    MOV   A,[X+4]
    199F: 3F 24    MVI   [__r1],A
    19A1: 52 03    MOV   A,[X+3]
    19A3: 13 01    SUB   A,[X+1]
    19A5: 52 02    MOV   A,[X+2]
    19A7: 1B 00    SBB   A,[X+0]
    19A9: CF A4    JC    0x194E
    19AB: 62 D0 00 MOV   REG[0xD0],0x0
    19AE: 52 FC    MOV   A,[X-4]
    19B0: 53 24    MOV   [__r1],A
    19B2: 52 FB    MOV   A,[X-5]
    19B4: 53 25    MOV   [__r0],A
    19B6: 38 F9    ADD   SP,0xF9
    19B8: 20       POP   X
    19B9: 7F       RET   
_isdigit:
    19BA: 10       PUSH  X
    19BB: 4F       MOV   X,SP
    19BC: 62 D0 00 MOV   REG[0xD0],0x0
    19BF: 52 FC    MOV   A,[X-4]
    19C1: 01 AA    ADD   A,0xAA
    19C3: 53 24    MOV   [__r1],A
    19C5: 52 FB    MOV   A,[X-5]
    19C7: 09 02    ADC   A,0x2
    19C9: 10       PUSH  X
    19CA: 58 24    MOV   X,[__r1]
    19CC: 28       ROMX  
    19CD: 20       POP   X
    19CE: 53 24    MOV   [__r1],A
    19D0: 55 25 00 MOV   [__r0],0x0
    19D3: 26 24 04 AND   [__r1],0x4
    19D6: 26 25 00 AND   [__r0],0x0
    19D9: 20       POP   X
    19DA: 7F       RET   
_islower:
    19DB: 10       PUSH  X
    19DC: 4F       MOV   X,SP
    19DD: 62 D0 00 MOV   REG[0xD0],0x0
    19E0: 52 FC    MOV   A,[X-4]
    19E2: 01 AA    ADD   A,0xAA
    19E4: 53 24    MOV   [__r1],A
    19E6: 52 FB    MOV   A,[X-5]
    19E8: 09 02    ADC   A,0x2
    19EA: 10       PUSH  X
    19EB: 58 24    MOV   X,[__r1]
    19ED: 28       ROMX  
    19EE: 20       POP   X
    19EF: 53 24    MOV   [__r1],A
    19F1: 55 25 00 MOV   [__r0],0x0
    19F4: 26 24 02 AND   [__r1],0x2
    19F7: 26 25 00 AND   [__r0],0x0
    19FA: 20       POP   X
    19FB: 7F       RET   
_isspace:
    19FC: 10       PUSH  X
    19FD: 4F       MOV   X,SP
    19FE: 62 D0 00 MOV   REG[0xD0],0x0
    1A01: 52 FC    MOV   A,[X-4]
    1A03: 01 AA    ADD   A,0xAA
    1A05: 53 24    MOV   [__r1],A
    1A07: 52 FB    MOV   A,[X-5]
    1A09: 09 02    ADC   A,0x2
    1A0B: 10       PUSH  X
    1A0C: 58 24    MOV   X,[__r1]
    1A0E: 28       ROMX  
    1A0F: 20       POP   X
    1A10: 53 24    MOV   [__r1],A
    1A12: 55 25 00 MOV   [__r0],0x0
    1A15: 26 24 10 AND   [__r1],0x10
    1A18: 26 25 00 AND   [__r0],0x0
    1A1B: 20       POP   X
    1A1C: 7F       RET   
_toupper:
    1A1D: 10       PUSH  X
    1A1E: 4F       MOV   X,SP
    1A1F: 52 FB    MOV   A,[X-5]
    1A21: 08       PUSH  A
    1A22: 52 FC    MOV   A,[X-4]
    1A24: 08       PUSH  A
    1A25: 7C 19 DB LCALL _islower
    1A28: 38 FE    ADD   SP,0xFE
    1A2A: 62 D0 00 MOV   REG[0xD0],0x0
    1A2D: 3C 25 00 CMP   [__r0],0x0
    1A30: B0 06    JNZ   0x1A37
    1A32: 3C 24 00 CMP   [__r1],0x0
    1A35: A0 18    JZ    0x1A4E
    1A37: 62 D0 00 MOV   REG[0xD0],0x0
    1A3A: 52 FC    MOV   A,[X-4]
    1A3C: 11 61    SUB   A,0x61
    1A3E: 53 24    MOV   [__r1],A
    1A40: 52 FB    MOV   A,[X-5]
    1A42: 19 00    SBB   A,0x0
    1A44: 53 25    MOV   [__r0],A
    1A46: 06 24 41 ADD   [__r1],0x41
    1A49: 0E 25 00 ADC   [__r0],0x0
    1A4C: 80 0C    JMP   0x1A59
    1A4E: 62 D0 00 MOV   REG[0xD0],0x0
    1A51: 52 FC    MOV   A,[X-4]
    1A53: 53 24    MOV   [__r1],A
    1A55: 52 FB    MOV   A,[X-5]
    1A57: 53 25    MOV   [__r0],A
    1A59: 20       POP   X
    1A5A: 7F       RET   
__csdepi:
    1A5B: 10       PUSH  X
    1A5C: 4F       MOV   X,SP
    1A5D: 62 D0 00 MOV   REG[0xD0],0x0
    1A60: 51 27    MOV   A,[0x27]
    1A62: 08       PUSH  A
    1A63: 51 26    MOV   A,[0x26]
    1A65: 62 D0 00 MOV   REG[0xD0],0x0
    1A68: 53 25    MOV   [__r0],A
    1A6A: 18       POP   A
    1A6B: 53 24    MOV   [__r1],A
    1A6D: 01 01    ADD   A,0x1
    1A6F: 62 D0 00 MOV   REG[0xD0],0x0
    1A72: 53 27    MOV   [0x27],A
    1A74: 62 D0 00 MOV   REG[0xD0],0x0
    1A77: 51 25    MOV   A,[__r0]
    1A79: 09 00    ADC   A,0x0
    1A7B: 62 D0 00 MOV   REG[0xD0],0x0
    1A7E: 53 26    MOV   [0x26],A
    1A80: 62 D0 00 MOV   REG[0xD0],0x0
    1A83: 51 25    MOV   A,[__r0]
    1A85: 60 D5    MOV   REG[0xD5],A
    1A87: 52 FC    MOV   A,[X-4]
    1A89: 3F 24    MVI   [__r1],A
    1A8B: 20       POP   X
    1A8C: 7F       RET   
_csprintf:
    1A8D: 10       PUSH  X
    1A8E: 4F       MOV   X,SP
    1A8F: 38 02    ADD   SP,0x2
    1A91: 62 D0 00 MOV   REG[0xD0],0x0
    1A94: 52 FC    MOV   A,[X-4]
    1A96: 53 27    MOV   [0x27],A
    1A98: 52 FB    MOV   A,[X-5]
    1A9A: 53 26    MOV   [0x26],A
    1A9C: 62 D0 00 MOV   REG[0xD0],0x0
    1A9F: 5A 24    MOV   [__r1],X
    1AA1: 16 24 07 SUB   [__r1],0x7
    1AA4: 51 24    MOV   A,[__r1]
    1AA6: 54 01    MOV   [X+1],A
    1AA8: 56 00 07 MOV   [X+0],0x7
    1AAB: 52 00    MOV   A,[X+0]
    1AAD: 08       PUSH  A
    1AAE: 52 01    MOV   A,[X+1]
    1AB0: 08       PUSH  A
    1AB1: 52 F9    MOV   A,[X-7]
    1AB3: 08       PUSH  A
    1AB4: 52 FA    MOV   A,[X-6]
    1AB6: 08       PUSH  A
    1AB7: 50 04    MOV   A,0x4
    1AB9: 08       PUSH  A
    1ABA: 50 20    MOV   A,0x20
    1ABC: 08       PUSH  A
    1ABD: 7C 1A F6 LCALL __cprint
    1AC0: 38 FA    ADD   SP,0xFA
    1AC2: 62 D0 00 MOV   REG[0xD0],0x0
    1AC5: 51 27    MOV   A,[0x27]
    1AC7: 08       PUSH  A
    1AC8: 51 26    MOV   A,[0x26]
    1ACA: 62 D0 00 MOV   REG[0xD0],0x0
    1ACD: 53 25    MOV   [__r0],A
    1ACF: 18       POP   A
    1AD0: 53 24    MOV   [__r1],A
    1AD2: 51 25    MOV   A,[__r0]
    1AD4: 60 D5    MOV   REG[0xD5],A
    1AD6: 50 00    MOV   A,0x0
    1AD8: 3F 24    MVI   [__r1],A
    1ADA: 62 D0 00 MOV   REG[0xD0],0x0
    1ADD: 51 27    MOV   A,[0x27]
    1ADF: 13 FC    SUB   A,[X-4]
    1AE1: 62 D0 00 MOV   REG[0xD0],0x0
    1AE4: 53 24    MOV   [__r1],A
    1AE6: 62 D0 00 MOV   REG[0xD0],0x0
    1AE9: 51 26    MOV   A,[0x26]
    1AEB: 1B FB    SBB   A,[X-5]
    1AED: 62 D0 00 MOV   REG[0xD0],0x0
    1AF0: 53 25    MOV   [__r0],A
    1AF2: 38 FE    ADD   SP,0xFE
    1AF4: 20       POP   X
    1AF5: 7F       RET   
__cprint:
    1AF6: 10       PUSH  X
    1AF7: 4F       MOV   X,SP
    1AF8: 38 11    ADD   SP,0x11
    1AFA: 56 05 00 MOV   [X+5],0x0
    1AFD: 56 04 00 MOV   [X+4],0x0
    1B00: 83 C7    JMP   0x1EC8
    1B02: 62 D0 00 MOV   REG[0xD0],0x0
    1B05: 52 FA    MOV   A,[X-6]
    1B07: 53 24    MOV   [__r1],A
    1B09: 52 F9    MOV   A,[X-7]
    1B0B: 10       PUSH  X
    1B0C: 58 24    MOV   X,[__r1]
    1B0E: 28       ROMX  
    1B0F: 20       POP   X
    1B10: 39 25    CMP   A,0x25
    1B12: A0 23    JZ    0x1B36
    1B14: 52 FA    MOV   A,[X-6]
    1B16: 53 24    MOV   [__r1],A
    1B18: 52 F9    MOV   A,[X-7]
    1B1A: 10       PUSH  X
    1B1B: 58 24    MOV   X,[__r1]
    1B1D: 28       ROMX  
    1B1E: 20       POP   X
    1B1F: 10       PUSH  X
    1B20: 08       PUSH  A
    1B21: 52 FC    MOV   A,[X-4]
    1B23: 53 24    MOV   [__r1],A
    1B25: 52 FB    MOV   A,[X-5]
    1B27: 58 24    MOV   X,[__r1]
    1B29: 7C 16 92 LCALL __plcall
    1B2C: 38 FF    ADD   SP,0xFF
    1B2E: 20       POP   X
    1B2F: 77 05    INC   [X+5]
    1B31: 0F 04 00 ADC   [X+4],0x0
    1B34: 83 8E    JMP   0x1EC3
    1B36: 56 0A 00 MOV   [X+10],0x0
    1B39: 56 09 00 MOV   [X+9],0x0
    1B3C: 56 07 04 MOV   [X+7],0x4
    1B3F: 56 06 00 MOV   [X+6],0x0
    1B42: 56 08 20 MOV   [X+8],0x20
    1B45: 77 FA    INC   [X-6]
    1B47: 0F F9 00 ADC   [X-7],0x0
    1B4A: 62 D0 00 MOV   REG[0xD0],0x0
    1B4D: 52 FA    MOV   A,[X-6]
    1B4F: 53 24    MOV   [__r1],A
    1B51: 52 F9    MOV   A,[X-7]
    1B53: 10       PUSH  X
    1B54: 58 24    MOV   X,[__r1]
    1B56: 28       ROMX  
    1B57: 20       POP   X
    1B58: 54 10    MOV   [X+16],A
    1B5A: 56 0F 00 MOV   [X+15],0x0
    1B5D: 52 10    MOV   A,[X+16]
    1B5F: 11 58    SUB   A,0x58
    1B61: 53 1E    MOV   [__rY],A
    1B63: 52 0F    MOV   A,[X+15]
    1B65: 31 80    XOR   A,0x80
    1B67: 19 80    SBB   A,0x80
    1B69: 2A 1E    OR    A,[__rY]
    1B6B: A0 ED    JZ    0x1C59
    1B6D: D0 22    JNC   0x1B90
    1B6F: 52 10    MOV   A,[X+16]
    1B71: 11 45    SUB   A,0x45
    1B73: 62 D0 00 MOV   REG[0xD0],0x0
    1B76: 53 1E    MOV   [__rY],A
    1B78: 52 0F    MOV   A,[X+15]
    1B7A: 31 80    XOR   A,0x80
    1B7C: 19 80    SBB   A,0x80
    1B7E: C0 83    JC    0x1C02
    1B80: 2A 1E    OR    A,[__rY]
    1B82: A3 38    JZ    0x1EBB
    1B84: 3D 0F 00 CMP   [X+15],0x0
    1B87: B0 06    JNZ   0x1B8E
    1B89: 3D 10 53 CMP   [X+16],0x53
    1B8C: A2 32    JZ    0x1DBF
    1B8E: 80 73    JMP   0x1C02
    1B90: 3D 0F 00 CMP   [X+15],0x0
    1B93: B0 06    JNZ   0x1B9A
    1B95: 3D 10 63 CMP   [X+16],0x63
    1B98: A1 F6    JZ    0x1D8F
    1B9A: 3D 0F 00 CMP   [X+15],0x0
    1B9D: B0 06    JNZ   0x1BA4
    1B9F: 3D 10 64 CMP   [X+16],0x64
    1BA2: A0 84    JZ    0x1C27
    1BA4: 3D 0F 00 CMP   [X+15],0x0
    1BA7: B0 06    JNZ   0x1BAE
    1BA9: 3D 10 65 CMP   [X+16],0x65
    1BAC: A3 0E    JZ    0x1EBB
    1BAE: 3D 0F 00 CMP   [X+15],0x0
    1BB1: B0 06    JNZ   0x1BB8
    1BB3: 3D 10 66 CMP   [X+16],0x66
    1BB6: A3 04    JZ    0x1EBB
    1BB8: 3D 0F 00 CMP   [X+15],0x0
    1BBB: B0 06    JNZ   0x1BC2
    1BBD: 3D 10 69 CMP   [X+16],0x69
    1BC0: A0 66    JZ    0x1C27
    1BC2: 3D 0F 00 CMP   [X+15],0x0
    1BC5: B0 06    JNZ   0x1BCC
    1BC7: 3D 10 6F CMP   [X+16],0x6F
    1BCA: A0 8E    JZ    0x1C59
    1BCC: 3D 0F 00 CMP   [X+15],0x0
    1BCF: B0 06    JNZ   0x1BD6
    1BD1: 3D 10 70 CMP   [X+16],0x70
    1BD4: A0 84    JZ    0x1C59
    1BD6: 52 10    MOV   A,[X+16]
    1BD8: 11 63    SUB   A,0x63
    1BDA: 52 0F    MOV   A,[X+15]
    1BDC: 31 80    XOR   A,0x80
    1BDE: 19 80    SBB   A,0x80
    1BE0: C0 21    JC    0x1C02
    1BE2: 3D 0F 00 CMP   [X+15],0x0
    1BE5: B0 06    JNZ   0x1BEC
    1BE7: 3D 10 73 CMP   [X+16],0x73
    1BEA: A2 4A    JZ    0x1E35
    1BEC: 3D 0F 00 CMP   [X+15],0x0
    1BEF: B0 06    JNZ   0x1BF6
    1BF1: 3D 10 75 CMP   [X+16],0x75
    1BF4: A0 64    JZ    0x1C59
    1BF6: 3D 0F 00 CMP   [X+15],0x0
    1BF9: B0 06    JNZ   0x1C00
    1BFB: 3D 10 78 CMP   [X+16],0x78
    1BFE: A0 5A    JZ    0x1C59
    1C00: 80 01    JMP   0x1C02
    1C02: 62 D0 00 MOV   REG[0xD0],0x0
    1C05: 52 FA    MOV   A,[X-6]
    1C07: 53 24    MOV   [__r1],A
    1C09: 52 F9    MOV   A,[X-7]
    1C0B: 10       PUSH  X
    1C0C: 58 24    MOV   X,[__r1]
    1C0E: 28       ROMX  
    1C0F: 20       POP   X
    1C10: 10       PUSH  X
    1C11: 08       PUSH  A
    1C12: 52 FC    MOV   A,[X-4]
    1C14: 53 24    MOV   [__r1],A
    1C16: 52 FB    MOV   A,[X-5]
    1C18: 58 24    MOV   X,[__r1]
    1C1A: 7C 16 92 LCALL __plcall
    1C1D: 38 FF    ADD   SP,0xFF
    1C1F: 20       POP   X
    1C20: 77 05    INC   [X+5]
    1C22: 0F 04 00 ADC   [X+4],0x0
    1C25: 82 9D    JMP   0x1EC3
    1C27: 07 F8 FE ADD   [X-8],0xFE
    1C2A: 0F F7 FF ADC   [X-9],0xFF
    1C2D: 62 D0 00 MOV   REG[0xD0],0x0
    1C30: 52 F8    MOV   A,[X-8]
    1C32: 53 24    MOV   [__r1],A
    1C34: 52 F7    MOV   A,[X-9]
    1C36: 60 D4    MOV   REG[0xD4],A
    1C38: 3E 24    MVI   A,[__r1]
    1C3A: 54 0B    MOV   [X+11],A
    1C3C: 3E 24    MVI   A,[__r1]
    1C3E: 54 0C    MOV   [X+12],A
    1C40: 50 00    MOV   A,0x0
    1C42: 08       PUSH  A
    1C43: 50 0A    MOV   A,0xA
    1C45: 08       PUSH  A
    1C46: 52 0B    MOV   A,[X+11]
    1C48: 08       PUSH  A
    1C49: 52 0C    MOV   A,[X+12]
    1C4B: 08       PUSH  A
    1C4C: 52 06    MOV   A,[X+6]
    1C4E: 08       PUSH  A
    1C4F: 52 07    MOV   A,[X+7]
    1C51: 08       PUSH  A
    1C52: 7C 16 9E LCALL _itoa
    1C55: 38 FA    ADD   SP,0xFA
    1C57: 81 2F    JMP   0x1D87
    1C59: 07 F8 FE ADD   [X-8],0xFE
    1C5C: 0F F7 FF ADC   [X-9],0xFF
    1C5F: 62 D0 00 MOV   REG[0xD0],0x0
    1C62: 52 F8    MOV   A,[X-8]
    1C64: 53 24    MOV   [__r1],A
    1C66: 52 F7    MOV   A,[X-9]
    1C68: 60 D4    MOV   REG[0xD4],A
    1C6A: 3E 24    MVI   A,[__r1]
    1C6C: 53 25    MOV   [__r0],A
    1C6E: 3E 24    MVI   A,[__r1]
    1C70: 54 0C    MOV   [X+12],A
    1C72: 51 25    MOV   A,[__r0]
    1C74: 54 0B    MOV   [X+11],A
    1C76: 52 FA    MOV   A,[X-6]
    1C78: 53 24    MOV   [__r1],A
    1C7A: 52 F9    MOV   A,[X-7]
    1C7C: 10       PUSH  X
    1C7D: 58 24    MOV   X,[__r1]
    1C7F: 28       ROMX  
    1C80: 20       POP   X
    1C81: 39 75    CMP   A,0x75
    1C83: B0 1A    JNZ   0x1C9E
    1C85: 50 00    MOV   A,0x0
    1C87: 08       PUSH  A
    1C88: 50 0A    MOV   A,0xA
    1C8A: 08       PUSH  A
    1C8B: 52 0B    MOV   A,[X+11]
    1C8D: 08       PUSH  A
    1C8E: 52 0C    MOV   A,[X+12]
    1C90: 08       PUSH  A
    1C91: 52 06    MOV   A,[X+6]
    1C93: 08       PUSH  A
    1C94: 52 07    MOV   A,[X+7]
    1C96: 08       PUSH  A
    1C97: 7C 18 77 LCALL _utoa
    1C9A: 38 FA    ADD   SP,0xFA
    1C9C: 80 EA    JMP   0x1D87
    1C9E: 62 D0 00 MOV   REG[0xD0],0x0
    1CA1: 52 FA    MOV   A,[X-6]
    1CA3: 53 24    MOV   [__r1],A
    1CA5: 52 F9    MOV   A,[X-7]
    1CA7: 10       PUSH  X
    1CA8: 58 24    MOV   X,[__r1]
    1CAA: 28       ROMX  
    1CAB: 20       POP   X
    1CAC: 39 6F    CMP   A,0x6F
    1CAE: B0 1A    JNZ   0x1CC9
    1CB0: 50 00    MOV   A,0x0
    1CB2: 08       PUSH  A
    1CB3: 50 08    MOV   A,0x8
    1CB5: 08       PUSH  A
    1CB6: 52 0B    MOV   A,[X+11]
    1CB8: 08       PUSH  A
    1CB9: 52 0C    MOV   A,[X+12]
    1CBB: 08       PUSH  A
    1CBC: 52 06    MOV   A,[X+6]
    1CBE: 08       PUSH  A
    1CBF: 52 07    MOV   A,[X+7]
    1CC1: 08       PUSH  A
    1CC2: 7C 18 77 LCALL _utoa
    1CC5: 38 FA    ADD   SP,0xFA
    1CC7: 80 BF    JMP   0x1D87
    1CC9: 62 D0 00 MOV   REG[0xD0],0x0
    1CCC: 52 FA    MOV   A,[X-6]
    1CCE: 53 24    MOV   [__r1],A
    1CD0: 52 F9    MOV   A,[X-7]
    1CD2: 10       PUSH  X
    1CD3: 58 24    MOV   X,[__r1]
    1CD5: 28       ROMX  
    1CD6: 20       POP   X
    1CD7: 39 70    CMP   A,0x70
    1CD9: B0 39    JNZ   0x1D13
    1CDB: 52 07    MOV   A,[X+7]
    1CDD: 53 24    MOV   [__r1],A
    1CDF: 52 06    MOV   A,[X+6]
    1CE1: 53 25    MOV   [__r0],A
    1CE3: 51 24    MOV   A,[__r1]
    1CE5: 01 01    ADD   A,0x1
    1CE7: 54 07    MOV   [X+7],A
    1CE9: 51 25    MOV   A,[__r0]
    1CEB: 09 00    ADC   A,0x0
    1CED: 54 06    MOV   [X+6],A
    1CEF: 51 25    MOV   A,[__r0]
    1CF1: 60 D5    MOV   REG[0xD5],A
    1CF3: 50 30    MOV   A,0x30
    1CF5: 3F 24    MVI   [__r1],A
    1CF7: 52 07    MOV   A,[X+7]
    1CF9: 53 24    MOV   [__r1],A
    1CFB: 52 06    MOV   A,[X+6]
    1CFD: 53 25    MOV   [__r0],A
    1CFF: 51 24    MOV   A,[__r1]
    1D01: 01 01    ADD   A,0x1
    1D03: 54 07    MOV   [X+7],A
    1D05: 51 25    MOV   A,[__r0]
    1D07: 09 00    ADC   A,0x0
    1D09: 54 06    MOV   [X+6],A
    1D0B: 51 25    MOV   A,[__r0]
    1D0D: 60 D5    MOV   REG[0xD5],A
    1D0F: 50 78    MOV   A,0x78
    1D11: 3F 24    MVI   [__r1],A
    1D13: 50 00    MOV   A,0x0
    1D15: 08       PUSH  A
    1D16: 50 10    MOV   A,0x10
    1D18: 08       PUSH  A
    1D19: 52 0B    MOV   A,[X+11]
    1D1B: 08       PUSH  A
    1D1C: 52 0C    MOV   A,[X+12]
    1D1E: 08       PUSH  A
    1D1F: 52 06    MOV   A,[X+6]
    1D21: 08       PUSH  A
    1D22: 52 07    MOV   A,[X+7]
    1D24: 08       PUSH  A
    1D25: 7C 18 77 LCALL _utoa
    1D28: 38 FA    ADD   SP,0xFA
    1D2A: 62 D0 00 MOV   REG[0xD0],0x0
    1D2D: 52 FA    MOV   A,[X-6]
    1D2F: 53 24    MOV   [__r1],A
    1D31: 52 F9    MOV   A,[X-7]
    1D33: 10       PUSH  X
    1D34: 58 24    MOV   X,[__r1]
    1D36: 28       ROMX  
    1D37: 20       POP   X
    1D38: 39 58    CMP   A,0x58
    1D3A: B0 4C    JNZ   0x1D87
    1D3C: 56 01 04 MOV   [X+1],0x4
    1D3F: 56 00 00 MOV   [X+0],0x0
    1D42: 80 33    JMP   0x1D76
    1D44: 62 D0 00 MOV   REG[0xD0],0x0
    1D47: 52 01    MOV   A,[X+1]
    1D49: 53 24    MOV   [__r1],A
    1D4B: 52 00    MOV   A,[X+0]
    1D4D: 60 D4    MOV   REG[0xD4],A
    1D4F: 3E 24    MVI   A,[__r1]
    1D51: 53 24    MOV   [__r1],A
    1D53: 50 00    MOV   A,0x0
    1D55: 08       PUSH  A
    1D56: 51 24    MOV   A,[__r1]
    1D58: 08       PUSH  A
    1D59: 7C 1A 1D LCALL _toupper
    1D5C: 38 FE    ADD   SP,0xFE
    1D5E: 62 D0 00 MOV   REG[0xD0],0x0
    1D61: 51 24    MOV   A,[__r1]
    1D63: 53 25    MOV   [__r0],A
    1D65: 52 01    MOV   A,[X+1]
    1D67: 53 22    MOV   [__r3],A
    1D69: 52 00    MOV   A,[X+0]
    1D6B: 60 D5    MOV   REG[0xD5],A
    1D6D: 51 25    MOV   A,[__r0]
    1D6F: 3F 22    MVI   [__r3],A
    1D71: 77 01    INC   [X+1]
    1D73: 0F 00 00 ADC   [X+0],0x0
    1D76: 62 D0 00 MOV   REG[0xD0],0x0
    1D79: 52 01    MOV   A,[X+1]
    1D7B: 53 24    MOV   [__r1],A
    1D7D: 52 00    MOV   A,[X+0]
    1D7F: 60 D4    MOV   REG[0xD4],A
    1D81: 3E 24    MVI   A,[__r1]
    1D83: 39 00    CMP   A,0x0
    1D85: BF BE    JNZ   0x1D44
    1D87: 56 01 04 MOV   [X+1],0x4
    1D8A: 56 00 00 MOV   [X+0],0x0
    1D8D: 80 D2    JMP   0x1E60
    1D8F: 07 F8 FE ADD   [X-8],0xFE
    1D92: 0F F7 FF ADC   [X-9],0xFF
    1D95: 62 D0 00 MOV   REG[0xD0],0x0
    1D98: 52 F8    MOV   A,[X-8]
    1D9A: 53 24    MOV   [__r1],A
    1D9C: 52 F7    MOV   A,[X-9]
    1D9E: 60 D4    MOV   REG[0xD4],A
    1DA0: 3E 24    MVI   A,[__r1]
    1DA2: 3E 24    MVI   A,[__r1]
    1DA4: 54 0D    MOV   [X+13],A
    1DA6: 10       PUSH  X
    1DA7: 52 0D    MOV   A,[X+13]
    1DA9: 08       PUSH  A
    1DAA: 52 FC    MOV   A,[X-4]
    1DAC: 53 24    MOV   [__r1],A
    1DAE: 52 FB    MOV   A,[X-5]
    1DB0: 58 24    MOV   X,[__r1]
    1DB2: 7C 16 92 LCALL __plcall
    1DB5: 38 FF    ADD   SP,0xFF
    1DB7: 20       POP   X
    1DB8: 77 05    INC   [X+5]
    1DBA: 0F 04 00 ADC   [X+4],0x0
    1DBD: 81 05    JMP   0x1EC3
    1DBF: 07 F8 FE ADD   [X-8],0xFE
    1DC2: 0F F7 FF ADC   [X-9],0xFF
    1DC5: 62 D0 00 MOV   REG[0xD0],0x0
    1DC8: 52 F8    MOV   A,[X-8]
    1DCA: 53 24    MOV   [__r1],A
    1DCC: 52 F7    MOV   A,[X-9]
    1DCE: 60 D4    MOV   REG[0xD4],A
    1DD0: 3E 24    MVI   A,[__r1]
    1DD2: 54 02    MOV   [X+2],A
    1DD4: 3E 24    MVI   A,[__r1]
    1DD6: 54 03    MOV   [X+3],A
    1DD8: 3D 08 2D CMP   [X+8],0x2D
    1DDB: B0 45    JNZ   0x1E21
    1DDD: 10       PUSH  X
    1DDE: 50 2D    MOV   A,0x2D
    1DE0: 08       PUSH  A
    1DE1: 62 D0 00 MOV   REG[0xD0],0x0
    1DE4: 52 FC    MOV   A,[X-4]
    1DE6: 53 24    MOV   [__r1],A
    1DE8: 52 FB    MOV   A,[X-5]
    1DEA: 58 24    MOV   X,[__r1]
    1DEC: 7C 16 92 LCALL __plcall
    1DEF: 38 FF    ADD   SP,0xFF
    1DF1: 20       POP   X
    1DF2: 77 05    INC   [X+5]
    1DF4: 0F 04 00 ADC   [X+4],0x0
    1DF7: 80 29    JMP   0x1E21
    1DF9: 62 D0 00 MOV   REG[0xD0],0x0
    1DFC: 52 03    MOV   A,[X+3]
    1DFE: 53 24    MOV   [__r1],A
    1E00: 52 02    MOV   A,[X+2]
    1E02: 10       PUSH  X
    1E03: 58 24    MOV   X,[__r1]
    1E05: 28       ROMX  
    1E06: 20       POP   X
    1E07: 10       PUSH  X
    1E08: 08       PUSH  A
    1E09: 52 FC    MOV   A,[X-4]
    1E0B: 53 24    MOV   [__r1],A
    1E0D: 52 FB    MOV   A,[X-5]
    1E0F: 58 24    MOV   X,[__r1]
    1E11: 7C 16 92 LCALL __plcall
    1E14: 38 FF    ADD   SP,0xFF
    1E16: 20       POP   X
    1E17: 77 05    INC   [X+5]
    1E19: 0F 04 00 ADC   [X+4],0x0
    1E1C: 77 03    INC   [X+3]
    1E1E: 0F 02 00 ADC   [X+2],0x0
    1E21: 62 D0 00 MOV   REG[0xD0],0x0
    1E24: 52 03    MOV   A,[X+3]
    1E26: 53 24    MOV   [__r1],A
    1E28: 52 02    MOV   A,[X+2]
    1E2A: 10       PUSH  X
    1E2B: 58 24    MOV   X,[__r1]
    1E2D: 28       ROMX  
    1E2E: 20       POP   X
    1E2F: 39 00    CMP   A,0x0
    1E31: BF C7    JNZ   0x1DF9
    1E33: 80 8F    JMP   0x1EC3
    1E35: 07 F8 FE ADD   [X-8],0xFE
    1E38: 0F F7 FF ADC   [X-9],0xFF
    1E3B: 62 D0 00 MOV   REG[0xD0],0x0
    1E3E: 52 F8    MOV   A,[X-8]
    1E40: 53 24    MOV   [__r1],A
    1E42: 52 F7    MOV   A,[X-9]
    1E44: 60 D4    MOV   REG[0xD4],A
    1E46: 3E 24    MVI   A,[__r1]
    1E48: 54 00    MOV   [X+0],A
    1E4A: 3E 24    MVI   A,[__r1]
    1E4C: 54 01    MOV   [X+1],A
    1E4E: 3D 00 00 CMP   [X+0],0x0
    1E51: B0 0E    JNZ   0x1E60
    1E53: 3D 01 00 CMP   [X+1],0x0
    1E56: B0 09    JNZ   0x1E60
    1E58: 56 03 AA MOV   [X+3],0xAA
    1E5B: 56 02 03 MOV   [X+2],0x3
    1E5E: 8F 79    JMP   0x1DD8
    1E60: 3D 08 2D CMP   [X+8],0x2D
    1E63: B0 44    JNZ   0x1EA8
    1E65: 10       PUSH  X
    1E66: 50 2D    MOV   A,0x2D
    1E68: 08       PUSH  A
    1E69: 62 D0 00 MOV   REG[0xD0],0x0
    1E6C: 52 FC    MOV   A,[X-4]
    1E6E: 53 24    MOV   [__r1],A
    1E70: 52 FB    MOV   A,[X-5]
    1E72: 58 24    MOV   X,[__r1]
    1E74: 7C 16 92 LCALL __plcall
    1E77: 38 FF    ADD   SP,0xFF
    1E79: 20       POP   X
    1E7A: 77 05    INC   [X+5]
    1E7C: 0F 04 00 ADC   [X+4],0x0
    1E7F: 80 28    JMP   0x1EA8
    1E81: 62 D0 00 MOV   REG[0xD0],0x0
    1E84: 52 01    MOV   A,[X+1]
    1E86: 53 24    MOV   [__r1],A
    1E88: 52 00    MOV   A,[X+0]
    1E8A: 60 D4    MOV   REG[0xD4],A
    1E8C: 3E 24    MVI   A,[__r1]
    1E8E: 10       PUSH  X
    1E8F: 08       PUSH  A
    1E90: 52 FC    MOV   A,[X-4]
    1E92: 53 24    MOV   [__r1],A
    1E94: 52 FB    MOV   A,[X-5]
    1E96: 58 24    MOV   X,[__r1]
    1E98: 7C 16 92 LCALL __plcall
    1E9B: 38 FF    ADD   SP,0xFF
    1E9D: 20       POP   X
    1E9E: 77 05    INC   [X+5]
    1EA0: 0F 04 00 ADC   [X+4],0x0
    1EA3: 77 01    INC   [X+1]
    1EA5: 0F 00 00 ADC   [X+0],0x0
    1EA8: 62 D0 00 MOV   REG[0xD0],0x0
    1EAB: 52 01    MOV   A,[X+1]
    1EAD: 53 24    MOV   [__r1],A
    1EAF: 52 00    MOV   A,[X+0]
    1EB1: 60 D4    MOV   REG[0xD4],A
    1EB3: 3E 24    MVI   A,[__r1]
    1EB5: 39 00    CMP   A,0x0
    1EB7: BF C9    JNZ   0x1E81
    1EB9: 80 09    JMP   0x1EC3
    1EBB: 56 03 BC MOV   [X+3],0xBC
    1EBE: 56 02 03 MOV   [X+2],0x3
    1EC1: 8F 16    JMP   0x1DD8
    1EC3: 77 FA    INC   [X-6]
    1EC5: 0F F9 00 ADC   [X-7],0x0
    1EC8: 62 D0 00 MOV   REG[0xD0],0x0
    1ECB: 52 FA    MOV   A,[X-6]
    1ECD: 53 24    MOV   [__r1],A
    1ECF: 52 F9    MOV   A,[X-7]
    1ED1: 10       PUSH  X
    1ED2: 58 24    MOV   X,[__r1]
    1ED4: 28       ROMX  
    1ED5: 20       POP   X
    1ED6: 39 00    CMP   A,0x0
    1ED8: BC 29    JNZ   0x1B02
    1EDA: 52 05    MOV   A,[X+5]
    1EDC: 53 24    MOV   [__r1],A
    1EDE: 52 04    MOV   A,[X+4]
    1EE0: 53 25    MOV   [__r0],A
    1EE2: 38 EF    ADD   SP,0xEF
    1EE4: 20       POP   X
    1EE5: 7F       RET   
    1EE6: 10       PUSH  X
    1EE7: 4F       MOV   X,SP
    1EE8: 38 04    ADD   SP,0x4
    1EEA: 80 06    JMP   0x1EF1
    1EEC: 77 FC    INC   [X-4]
    1EEE: 0F FB 00 ADC   [X-5],0x0
    1EF1: 62 D0 00 MOV   REG[0xD0],0x0
    1EF4: 52 FC    MOV   A,[X-4]
    1EF6: 53 24    MOV   [__r1],A
    1EF8: 52 FB    MOV   A,[X-5]
    1EFA: 10       PUSH  X
    1EFB: 58 24    MOV   X,[__r1]
    1EFD: 28       ROMX  
    1EFE: 20       POP   X
    1EFF: 53 24    MOV   [__r1],A
    1F01: 50 00    MOV   A,0x0
    1F03: 08       PUSH  A
    1F04: 51 24    MOV   A,[__r1]
    1F06: 08       PUSH  A
    1F07: 7C 19 FC LCALL _isspace
    1F0A: 38 FE    ADD   SP,0xFE
    1F0C: 62 D0 00 MOV   REG[0xD0],0x0
    1F0F: 3C 25 00 CMP   [__r0],0x0
    1F12: BF D9    JNZ   0x1EEC
    1F14: 3C 24 00 CMP   [__r1],0x0
    1F17: BF D4    JNZ   0x1EEC
    1F19: 56 03 00 MOV   [X+3],0x0
    1F1C: 56 02 00 MOV   [X+2],0x0
    1F1F: 62 D0 00 MOV   REG[0xD0],0x0
    1F22: 52 FC    MOV   A,[X-4]
    1F24: 53 24    MOV   [__r1],A
    1F26: 52 FB    MOV   A,[X-5]
    1F28: 10       PUSH  X
    1F29: 58 24    MOV   X,[__r1]
    1F2B: 28       ROMX  
    1F2C: 20       POP   X
    1F2D: 39 2D    CMP   A,0x2D
    1F2F: B0 0E    JNZ   0x1F3E
    1F31: 56 03 01 MOV   [X+3],0x1
    1F34: 56 02 00 MOV   [X+2],0x0
    1F37: 77 FC    INC   [X-4]
    1F39: 0F FB 00 ADC   [X-5],0x0
    1F3C: 80 18    JMP   0x1F55
    1F3E: 62 D0 00 MOV   REG[0xD0],0x0
    1F41: 52 FC    MOV   A,[X-4]
    1F43: 53 24    MOV   [__r1],A
    1F45: 52 FB    MOV   A,[X-5]
    1F47: 10       PUSH  X
    1F48: 58 24    MOV   X,[__r1]
    1F4A: 28       ROMX  
    1F4B: 20       POP   X
    1F4C: 39 2B    CMP   A,0x2B
    1F4E: B0 06    JNZ   0x1F55
    1F50: 77 FC    INC   [X-4]
    1F52: 0F FB 00 ADC   [X-5],0x0
    1F55: 56 01 00 MOV   [X+1],0x0
    1F58: 56 00 00 MOV   [X+0],0x0
    1F5B: 80 7C    JMP   0x1FD8
    1F5D: 62 D0 00 MOV   REG[0xD0],0x0
    1F60: 52 FC    MOV   A,[X-4]
    1F62: 53 24    MOV   [__r1],A
    1F64: 52 FB    MOV   A,[X-5]
    1F66: 53 25    MOV   [__r0],A
    1F68: 51 24    MOV   A,[__r1]
    1F6A: 01 01    ADD   A,0x1
    1F6C: 54 FC    MOV   [X-4],A
    1F6E: 51 25    MOV   A,[__r0]
    1F70: 09 00    ADC   A,0x0
    1F72: 54 FB    MOV   [X-5],A
    1F74: 52 01    MOV   A,[X+1]
    1F76: 53 22    MOV   [__r3],A
    1F78: 52 00    MOV   A,[X+0]
    1F7A: 53 23    MOV   [__r2],A
    1F7C: 55 20 0A MOV   [__r5],0xA
    1F7F: 55 21 00 MOV   [__r4],0x0
    1F82: 55 1F 00 MOV   [__rX],0x0
    1F85: 55 1E 00 MOV   [__rY],0x0
    1F88: 3C 21 00 CMP   [__r4],0x0
    1F8B: B0 06    JNZ   0x1F92
    1F8D: 3C 20 00 CMP   [__r5],0x0
    1F90: A0 1A    JZ    0x1FAB
    1F92: 70 FB    AND   F,0xFB
    1F94: 6E 21    RRC   [__r4]
    1F96: 6E 20    RRC   [__r5]
    1F98: D0 0C    JNC   0x1FA5
    1F9A: 62 D0 00 MOV   REG[0xD0],0x0
    1F9D: 51 22    MOV   A,[__r3]
    1F9F: 04 1F    ADD   [__rX],A
    1FA1: 51 23    MOV   A,[__r2]
    1FA3: 0C 1E    ADC   [__rY],A
    1FA5: 65 22    ASL   [__r3]
    1FA7: 6B 23    RLC   [__r2]
    1FA9: 8F DE    JMP   0x1F88
    1FAB: 5F 22 1F MOV   [__r3],[__rX]
    1FAE: 5F 23 1E MOV   [__r2],[__rY]
    1FB1: 62 D0 00 MOV   REG[0xD0],0x0
    1FB4: 51 25    MOV   A,[__r0]
    1FB6: 10       PUSH  X
    1FB7: 58 24    MOV   X,[__r1]
    1FB9: 28       ROMX  
    1FBA: 20       POP   X
    1FBB: 53 24    MOV   [__r1],A
    1FBD: 55 25 00 MOV   [__r0],0x0
    1FC0: 51 22    MOV   A,[__r3]
    1FC2: 02 24    ADD   A,[__r1]
    1FC4: 53 24    MOV   [__r1],A
    1FC6: 51 23    MOV   A,[__r2]
    1FC8: 0A 25    ADC   A,[__r0]
    1FCA: 53 25    MOV   [__r0],A
    1FCC: 51 24    MOV   A,[__r1]
    1FCE: 11 30    SUB   A,0x30
    1FD0: 54 01    MOV   [X+1],A
    1FD2: 51 25    MOV   A,[__r0]
    1FD4: 19 00    SBB   A,0x0
    1FD6: 54 00    MOV   [X+0],A
    1FD8: 62 D0 00 MOV   REG[0xD0],0x0
    1FDB: 52 FC    MOV   A,[X-4]
    1FDD: 53 24    MOV   [__r1],A
    1FDF: 52 FB    MOV   A,[X-5]
    1FE1: 10       PUSH  X
    1FE2: 58 24    MOV   X,[__r1]
    1FE4: 28       ROMX  
    1FE5: 20       POP   X
    1FE6: 53 24    MOV   [__r1],A
    1FE8: 50 00    MOV   A,0x0
    1FEA: 08       PUSH  A
    1FEB: 51 24    MOV   A,[__r1]
    1FED: 08       PUSH  A
    1FEE: 7C 19 BA LCALL _isdigit
    1FF1: 38 FE    ADD   SP,0xFE
    1FF3: 62 D0 00 MOV   REG[0xD0],0x0
    1FF6: 3C 25 00 CMP   [__r0],0x0
    1FF9: BF 63    JNZ   0x1F5D
    1FFB: 3C 24 00 CMP   [__r1],0x0
    1FFE: BF 5E    JNZ   0x1F5D
    2000: 3D 02 00 CMP   [X+2],0x0
    2003: B0 06    JNZ   0x200A
    2005: 3D 03 00 CMP   [X+3],0x0
    2008: A0 14    JZ    0x201D
    200A: 62 D0 00 MOV   REG[0xD0],0x0
    200D: 52 01    MOV   A,[X+1]
    200F: 73       CPL   A
    2010: 11 FF    SUB   A,0xFF
    2012: 53 24    MOV   [__r1],A
    2014: 52 00    MOV   A,[X+0]
    2016: 73       CPL   A
    2017: 19 FF    SBB   A,0xFF
    2019: 53 25    MOV   [__r0],A
    201B: 80 0C    JMP   0x2028
    201D: 62 D0 00 MOV   REG[0xD0],0x0
    2020: 52 01    MOV   A,[X+1]
    2022: 53 24    MOV   [__r1],A
    2024: 52 00    MOV   A,[X+0]
    2026: 53 25    MOV   [__r0],A
    2028: 38 FC    ADD   SP,0xFC
    202A: 20       POP   X
    202B: 7F       RET   
